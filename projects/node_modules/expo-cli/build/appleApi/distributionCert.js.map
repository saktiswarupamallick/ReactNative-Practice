{"version":3,"file":"distributionCert.js","names":["_appleUtils","data","require","_chalk","_interopRequireDefault","_dateformat","_CommandError","_interopRequireWildcard","_ora","_authenticate","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","AppleTooManyCertsError","CommandError","exports","getCertificateBySerialNumberAsync","context","serialNumber","cert","Certificate","getAsync","find","item","attributes","getDistributionCertificateAync","_certificates$find","certificates","query","filter","certificateType","CertificateType","IOS_DISTRIBUTION","certificate","transformCertificate","id","name","status","created","Date","requestedDate","getTime","expires","expirationDate","ownerName","ownerId","listDistributionCertificatesAsync","authCtx","spinner","ora","start","getRequestContext","certs","DISTRIBUTION","MAC_APP_DISTRIBUTION","map","succeed","error","fail","createDistributionCertificateAsync","results","createCertificateAndP12Async","certId","certP12","certificateP12","certPassword","password","certPrivateSigningKey","privateSigningKey","distCertSerialNumber","teamId","team","teamName","test","message","ErrorCodes","APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR","revokeDistributionCertificateAsync","ids","length","Promise","all","deleteAsync","isDistCert","chalk","underline","DistCertManager","constructor","ctx","list","create","revoke","format","expiresDate","_formatTimestamp","createdDate","timestamp","dateformat"],"sources":["../../src/appleApi/distributionCert.ts"],"sourcesContent":["import {\n  Certificate,\n  CertificateType,\n  createCertificateAndP12Async,\n  RequestContext,\n} from '@expo/apple-utils';\nimport chalk from 'chalk';\nimport dateformat from 'dateformat';\n\nimport CommandError, { ErrorCodes } from '../CommandError';\nimport { ora } from '../utils/ora';\nimport { AppleCtx, getRequestContext } from './authenticate';\n\nexport type DistCertInfo = {\n  id: string;\n  name: string;\n  status: string;\n  created: number;\n  expires: number;\n  ownerName: string;\n  ownerId: string;\n  serialNumber: string;\n};\n\nexport type DistCert = {\n  certId?: string;\n  certP12: string;\n  certPassword: string;\n  certPrivateSigningKey?: string;\n  distCertSerialNumber?: string;\n  teamId: string;\n  teamName?: string;\n};\n\nexport class AppleTooManyCertsError extends CommandError {}\n\nexport async function getCertificateBySerialNumberAsync(\n  context: RequestContext,\n  serialNumber: string\n): Promise<Certificate> {\n  const cert = (await Certificate.getAsync(context)).find(\n    item => item.attributes.serialNumber === serialNumber\n  );\n  if (!cert) {\n    throw new CommandError(`No certificate exists with serial number \"${serialNumber}\"`);\n  }\n  return cert;\n}\n\nexport async function getDistributionCertificateAync(\n  context: RequestContext,\n  serialNumber: string\n): Promise<Certificate | null> {\n  // At most, this returns 2 values.\n  const certificates = await Certificate.getAsync(context, {\n    query: {\n      filter: {\n        certificateType: CertificateType.IOS_DISTRIBUTION,\n      },\n    },\n  });\n  return (\n    certificates.find(certificate => certificate.attributes.serialNumber === serialNumber) ?? null\n  );\n}\n\nexport function transformCertificate(cert: Certificate): DistCertInfo {\n  return {\n    id: cert.id,\n    name: cert.attributes.name,\n    status: cert.attributes.status,\n    created: new Date(cert.attributes.requestedDate).getTime() / 1000,\n    expires: new Date(cert.attributes.expirationDate).getTime() / 1000,\n    ownerName: cert.attributes.ownerName,\n    ownerId: cert.attributes.ownerId,\n    serialNumber: cert.attributes.serialNumber,\n  };\n}\n\nexport async function listDistributionCertificatesAsync(\n  authCtx: AppleCtx\n): Promise<DistCertInfo[]> {\n  const spinner = ora(`Fetching Apple distribution certificates`).start();\n  try {\n    const context = getRequestContext(authCtx);\n    const certs = (\n      await Certificate.getAsync(context, {\n        query: {\n          filter: {\n            certificateType: [\n              CertificateType.DISTRIBUTION,\n              CertificateType.IOS_DISTRIBUTION,\n              CertificateType.MAC_APP_DISTRIBUTION,\n            ],\n          },\n        },\n      })\n    ).map(transformCertificate);\n    spinner.succeed(`Fetched Apple distribution certificates`);\n    return certs;\n  } catch (error: any) {\n    spinner.fail(`Failed to fetch Apple distribution certificates`);\n    throw error;\n  }\n}\n\n/**\n * Run from `eas credentials` -> iOS -> Add new Distribution Certificate\n */\nexport async function createDistributionCertificateAsync(authCtx: AppleCtx): Promise<DistCert> {\n  const spinner = ora(`Creating Apple distribution certificate`).start();\n  try {\n    const context = getRequestContext(authCtx);\n    const results = await createCertificateAndP12Async(context, {\n      certificateType: CertificateType.IOS_DISTRIBUTION,\n    });\n    spinner.succeed(`Created Apple distribution certificate`);\n    return {\n      certId: results.certificate.id,\n      certP12: results.certificateP12,\n      certPassword: results.password,\n      certPrivateSigningKey: results.privateSigningKey,\n      distCertSerialNumber: results.certificate.attributes.serialNumber,\n      teamId: authCtx.team.id,\n      teamName: authCtx.team.name,\n    };\n  } catch (error: any) {\n    spinner.fail('Failed to create Apple distribution certificate');\n    // TODO: Move check into apple-utils\n    if (\n      /You already have a current .* certificate or a pending certificate request/.test(\n        error.message\n      )\n    ) {\n      throw new AppleTooManyCertsError(\n        ErrorCodes.APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR,\n        APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR\n      );\n    }\n    throw error;\n  }\n}\n\nexport async function revokeDistributionCertificateAsync(\n  authCtx: AppleCtx,\n  ids: string[]\n): Promise<void> {\n  const name = `Apple distribution certificate${ids?.length === 1 ? '' : 's'}`;\n  const spinner = ora(`Revoking ${name}`).start();\n  try {\n    const context = getRequestContext(authCtx);\n    await Promise.all(ids.map(id => Certificate.deleteAsync(context, { id })));\n\n    spinner.succeed(`Revoked ${name}`);\n  } catch (error: any) {\n    spinner.fail(`Failed to revoke ${name}`);\n    throw error;\n  }\n}\n\nexport function isDistCert(obj: { [key: string]: any }): obj is DistCert {\n  return (\n    obj.certP12 &&\n    typeof obj.certP12 === 'string' &&\n    obj.certPassword &&\n    typeof obj.certPassword === 'string' &&\n    obj.teamId &&\n    typeof obj.teamId === 'string'\n  );\n}\n\nconst APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR = `\nYou can have only ${chalk.underline(\n  'three'\n)} Apple Distribution Certificates generated on your Apple Developer account.\nPlease revoke the old ones or reuse existing from your other apps.\nPlease remember that Apple Distribution Certificates are not application specific!\n`;\n\nexport class DistCertManager {\n  constructor(public ctx: AppleCtx) {}\n\n  async list(): Promise<DistCertInfo[]> {\n    return listDistributionCertificatesAsync(this.ctx);\n  }\n  async create(): Promise<DistCert> {\n    return createDistributionCertificateAsync(this.ctx);\n  }\n  async revoke(ids: string[]) {\n    return revokeDistributionCertificateAsync(this.ctx, ids);\n  }\n\n  format({ name, id, status, expires, created, ownerName }: DistCertInfo): string {\n    const expiresDate = _formatTimestamp(expires);\n    const createdDate = _formatTimestamp(created);\n    return `${name} (${status}) - ID: ${id} - expires: ${expiresDate} (created: ${createdDate}) - owner: ${ownerName}`;\n  }\n}\n\nfunction _formatTimestamp(timestamp: number): string {\n  return dateformat(new Date(timestamp * 1000));\n}\n"],"mappings":"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"}