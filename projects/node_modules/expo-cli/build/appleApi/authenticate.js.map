{"version":3,"file":"authenticate.js","names":["_appleUtils","data","require","_assert","_interopRequireDefault","_chalk","_CommandError","_log","_prompts","_resolveCredentials","obj","__esModule","default","APPLE_IN_HOUSE_TEAM_TYPE","getRequestContext","authCtx","_authCtx$authState","assert","authState","context","loginAsync","userCredentials","options","cookies","session","Auth","loginWithCookiesAsync","username","password","resolveCredentialsAsync","resetInMemoryData","restoredSession","tryRestoringAuthStateFromUserCredentialsAsync","providerId","teamId","loginWithUserCredentialsAsync","error","InvalidUserCredentialsError","Log","message","deletePasswordAsync","toggleConfirmAsync","AbortCommandError","newSession","promptPasswordAsync","authenticateAsync","addNewLineIfNone","appleId","autoResolveProvider","teams","Teams","getTeamsAsync","team","find","fastlaneSession","Session","getSessionAsYAML","appleIdPassword","formatTeam","process","exit","log","chalk","red","name","type","id","inHouse","toLowerCase"],"sources":["../../src/appleApi/authenticate.ts"],"sourcesContent":["import {\n  Auth,\n  InvalidUserCredentialsError,\n  RequestContext,\n  Session,\n  Teams,\n} from '@expo/apple-utils';\nimport assert from 'assert';\nimport chalk from 'chalk';\n\nimport { AbortCommandError } from '../CommandError';\nimport Log from '../log';\nimport { toggleConfirmAsync } from '../utils/prompts';\nimport {\n  deletePasswordAsync,\n  promptPasswordAsync,\n  resolveCredentialsAsync,\n} from './resolveCredentials';\n\nconst APPLE_IN_HOUSE_TEAM_TYPE = 'in-house';\n\nexport type Options = {\n  appleId?: string;\n  teamId?: string;\n  /**\n   * Can be used to restore the Apple auth state via apple-utils.\n   */\n  cookies?: Session.AuthState['cookies'];\n};\n\nexport type Team = {\n  id: string;\n  name?: string;\n  inHouse?: boolean;\n};\n\nexport type AppleCtx = {\n  appleId: string;\n  appleIdPassword?: string;\n  team: Team;\n  /**\n   * Defined when using Fastlane\n   */\n  fastlaneSession?: string;\n  /**\n   * Can be used to restore the Apple auth state via apple-utils.\n   */\n  authState?: Session.AuthState;\n};\n\nexport function getRequestContext(authCtx: AppleCtx): RequestContext {\n  assert(authCtx.authState?.context, 'Apple request context must be defined');\n  return authCtx.authState.context;\n}\n\nasync function loginAsync(\n  userCredentials: Partial<Auth.UserCredentials> = {},\n  options: Auth.LoginOptions\n): Promise<Session.AuthState> {\n  // First try login with cookies JSON\n  if (userCredentials.cookies) {\n    const session = await Auth.loginWithCookiesAsync(userCredentials);\n    // If the session isn't valid, continue to the other authentication methods.\n    // Use `loginWithCookiesAsync` for a less resilient flow.\n    if (session) {\n      return session;\n    }\n  }\n\n  // Resolve the user credentials, optimizing for password-less login.\n  const { username, password } = await resolveCredentialsAsync(userCredentials);\n  assert(username);\n\n  // Clear data\n  Auth.resetInMemoryData();\n\n  try {\n    // Attempt to rehydrate the session.\n    const restoredSession = await Auth.tryRestoringAuthStateFromUserCredentialsAsync(\n      {\n        username,\n        providerId: userCredentials.providerId,\n        teamId: userCredentials.teamId,\n      },\n      options\n    );\n    if (restoredSession) {\n      // Completed authentication!\n      return { password, ...restoredSession };\n    }\n\n    return await loginWithUserCredentialsAsync({\n      username,\n      password,\n      providerId: userCredentials.providerId,\n      teamId: userCredentials.teamId,\n    });\n  } catch (error: any) {\n    if (error instanceof InvalidUserCredentialsError) {\n      Log.error(error.message);\n      // Remove the invalid password so it isn't automatically used...\n      await deletePasswordAsync({ username });\n\n      if (await toggleConfirmAsync({ message: 'Would you like to try again?' })) {\n        // Don't pass credentials back or the method will throw\n        return loginAsync(\n          {\n            teamId: userCredentials.teamId,\n            providerId: userCredentials.providerId,\n          },\n          options\n        );\n      } else {\n        throw new AbortCommandError();\n      }\n    }\n    throw error;\n  }\n}\n\nasync function loginWithUserCredentialsAsync({\n  username,\n  password,\n  teamId,\n  providerId,\n}: {\n  username: string;\n  password?: string;\n  teamId?: string;\n  providerId?: number;\n}) {\n  // Start a new login flow\n  const newSession = await Auth.loginWithUserCredentialsAsync({\n    username,\n    // If the session couldn't be restored, then prompt for the password (also check if it's stored in the keychain).\n    password: password || (await promptPasswordAsync({ username })),\n    providerId,\n    teamId,\n  });\n  // User cancelled or something.\n  assert(newSession, 'An unexpected error occurred while completing authentication');\n\n  // Success!\n  return newSession;\n}\n\nexport async function authenticateAsync(options: Options = {}): Promise<AppleCtx> {\n  // help keep apple login visually apart from the other operations.\n  Log.addNewLineIfNone();\n\n  try {\n    const authState = await loginAsync(\n      {\n        username: options.appleId,\n        cookies: options.cookies,\n        teamId: options.teamId,\n      },\n      {\n        // TODO: Provide a way to disable this for users who want to mix and match teams / providers.\n        autoResolveProvider: true,\n      }\n    );\n\n    // Currently, this is resolved once, inside the apple-utils package.\n    const teamId = authState.context.teamId!;\n    // Get all of the teams to resolve the rest of the user data.\n    // TODO: optimize this step.\n    const teams = await Teams.getTeamsAsync();\n    const team = teams.find(team => team.teamId === teamId);\n    assert(team, `Your account is not associated with Apple Team with ID: ${teamId}`);\n\n    // Get the JSON cookies in the custom YAML format used by Fastlane\n    const fastlaneSession = Session.getSessionAsYAML();\n    return {\n      appleId: authState.username,\n      appleIdPassword: authState.password,\n      team: formatTeam(team),\n      // Can be used to restore the auth state using apple-utils.\n      authState,\n      // Defined for legacy usage in Turtle V1 or any other places where Fastlane is used in the servers.\n      fastlaneSession,\n    };\n  } catch (error: any) {\n    if (error.message === 'ABORTED') {\n      process.exit(1);\n    }\n    Log.log(chalk.red('Authentication with Apple Developer Portal failed!'));\n    throw error;\n  }\n}\n\nfunction formatTeam({ teamId, name, type }: Teams.AppStoreTeam): Team {\n  return {\n    id: teamId,\n    name: `${name} (${type})`,\n    inHouse: type.toLowerCase() === APPLE_IN_HOUSE_TEAM_TYPE,\n  };\n}\n"],"mappings":"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"}