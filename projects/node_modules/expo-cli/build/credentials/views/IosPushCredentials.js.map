{"version":3,"file":"IosPushCredentials.js","names":["_chalk","data","_interopRequireDefault","require","_fsExtra","_terminalLink","_CommandError","_appleApi","_log","_ora","_prompts","_interopRequireWildcard","_list","_promptForCredentials","_IosApi","_credentials","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","APPLE_KEYS_TOO_MANY_GENERATED_ERROR","chalk","underline","CreateIosPush","constructor","accountName","create","ctx","newPushKey","provideOrGenerate","ios","createPushKey","open","pushKey","Log","log","displayIosUserCredentials","_getRequiredQuestions","requiredQuestions","pushKeySchema","hasAppleCtx","questions","required","filter","q","_ensurePushKey","partialKey","teamId","appleCtx","team","id","teamName","name","isPushKey","Error","nonInteractive","userProvided","askForUserProvided","isValid","validatePushKey","generatePushKey","exports","CreateAndAssignIosPush","hasProjectContext","assignToCurrentProject","pushKeyId","_ctx$manifest","_ctx$manifest$ios","experienceName","projectOwner","manifest","slug","bundleIdentifier","confirm","confirmAsync","message","app","getAppLookupParams","usePushKey","green","RemoveIosPush","shouldRevoke","CommandError","selected","selectPushCredFromList","removePushCert","removeSpecific","deletePushCert","credentials","getAllCredentials","apps","getAppsUsingPushCred","appsList","map","appCred","join","deletePushKey","revoke","ensureAppleCtx","PushKeyManager","apnsKeyId","UpdateIosPush","allowLegacy","updateSpecific","updated","userCredentials","find","i","length","warn","updatePushKey","UseExistingPushNotification","projectName","CreateOrReusePushKey","assignPushKey","userCredentialsId","user","existingPushKeys","getValidPushKeys","autoselectedPushKey","formatPushKey","limit","Infinity","_createOrReuse","choices","title","value","question","type","action","prompt","iosCredentials","pushKeys","cred","yellow","pushKeyManager","pushInfoFromApple","list","filterRevokedPushKeys","getValidityStatus","validPushKeys","includes","options","filterInvalid","pushCerts","appCredentials","pushP12","pushPassword","pushCredentials","getName","pushCred","pushCert","pushId","entry","index","credentialsIndex","_pushCred$credentials","_pushCred$credentials2","pushCredentialsId","formatPushKeyFromApple","appleInfo","joinApps","usedByString","gray","teamText","validityStatus","validityText","manager","e","code","keys","usedByExpo","cert","reduce","acc","here","terminalLink","grey","optionsPerPage","certInfo","spinner","ora","start","filteredFormattedPushKeyArray","isValidPushKey","successMsg","succeed","failureMsg","fail","validKeyIdsOnAppleServer","validPushKeysOnExpoServer","getPushKeyFromParams","builderOptions","pushP8Path","apnsKeyP8","fs","readFile","usePushKeyFromParams","iosPushCredentials"],"sources":["../../../src/credentials/views/IosPushCredentials.ts"],"sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs-extra';\nimport terminalLink from 'terminal-link';\n\nimport CommandError from '../../CommandError';\nimport { isPushKey, PushKey, PushKeyInfo, PushKeyManager } from '../../appleApi';\nimport Log from '../../log';\nimport { ora } from '../../utils/ora';\nimport prompt, { confirmAsync, Question } from '../../utils/prompts';\nimport { displayIosUserCredentials } from '../actions/list';\nimport { askForUserProvided, CredentialSchema } from '../actions/promptForCredentials';\nimport { AppLookupParams, getAppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport {\n  IosAppCredentials,\n  IosCredentials,\n  IosPushCredentials,\n  pushKeySchema,\n} from '../credentials';\n\nconst APPLE_KEYS_TOO_MANY_GENERATED_ERROR = `\nYou can have only ${chalk.underline('two')} Push Notifactions Keys on your Apple Developer account.\nPlease revoke the old ones or reuse existing from your other apps.\nPlease remember that Apple Keys are not application specific!\n`;\n\nexport class CreateIosPush implements IView {\n  constructor(private accountName: string) {}\n\n  async create(ctx: Context): Promise<IosPushCredentials> {\n    const newPushKey = await this.provideOrGenerate(ctx);\n    return await ctx.ios.createPushKey(this.accountName, newPushKey);\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const pushKey = await this.create(ctx);\n\n    Log.log('Successfully created Push Notification Key\\n');\n    displayIosUserCredentials(pushKey);\n    Log.log();\n\n    return null;\n  }\n\n  _getRequiredQuestions(ctx: Context): CredentialSchema<PushKey> {\n    const requiredQuestions = { ...pushKeySchema };\n    if (ctx.hasAppleCtx() && requiredQuestions.questions) {\n      requiredQuestions.required = requiredQuestions.required.filter(q => q !== 'teamId');\n    }\n    return requiredQuestions;\n  }\n\n  _ensurePushKey(ctx: Context, partialKey: Partial<PushKey>): PushKey {\n    if (ctx.hasAppleCtx()) {\n      partialKey.teamId = ctx.appleCtx.team.id;\n      partialKey.teamName = ctx.appleCtx.team.name;\n    }\n    if (!isPushKey(partialKey)) {\n      throw new Error(`Not of type PushKey: ${partialKey}`);\n    }\n    return partialKey;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<PushKey> {\n    if (!ctx.nonInteractive) {\n      const requiredQuestions = this._getRequiredQuestions(ctx);\n      const userProvided = await askForUserProvided(requiredQuestions);\n      if (userProvided) {\n        const pushKey = this._ensurePushKey(ctx, userProvided);\n        const isValid = await validatePushKey(ctx, pushKey);\n        return isValid ? userProvided : await this.provideOrGenerate(ctx);\n      }\n    }\n    return await generatePushKey(ctx, this.accountName);\n  }\n}\n\nexport class CreateAndAssignIosPush extends CreateIosPush {\n  async open(ctx: Context): Promise<IView | null> {\n    const pushKey = await super.create(ctx);\n\n    Log.log('Successfully created Push Notification Key\\n');\n    displayIosUserCredentials(pushKey);\n    Log.log();\n\n    if (ctx.hasProjectContext && pushKey) {\n      await this.assignToCurrentProject(ctx, pushKey.id);\n      Log.log();\n    }\n\n    return null;\n  }\n\n  async assignToCurrentProject(ctx: Context, pushKeyId: number) {\n    const experienceName = `@${ctx.projectOwner}/${ctx.manifest.slug}`;\n    const bundleIdentifier = ctx.manifest?.ios?.bundleIdentifier;\n    if (!ctx.nonInteractive && bundleIdentifier) {\n      const confirm = await confirmAsync({\n        message: `Would you like to use this push key for the current project: ${experienceName} (${bundleIdentifier})?`,\n      });\n      if (!confirm) {\n        return;\n      }\n\n      const app = getAppLookupParams(experienceName, bundleIdentifier);\n      await ctx.ios.usePushKey(app, pushKeyId);\n      Log.log(\n        chalk.green(`Successfully assigned Push Key to ${experienceName} (${bundleIdentifier})`)\n      );\n    }\n  }\n}\n\nexport class RemoveIosPush implements IView {\n  constructor(private accountName: string, private shouldRevoke: boolean = false) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Start the CLI without the '--non-interactive' flag to select a push notification credential to remove.\"\n      );\n    }\n\n    const selected = await selectPushCredFromList(ctx, this.accountName);\n    if (selected) {\n      if (!('type' in selected)) {\n        const app = getAppLookupParams(selected.experienceName, selected.bundleIdentifier);\n        await this.removePushCert(ctx, app);\n        Log.log(chalk.green('Successfully removed Push Certificate'));\n      } else {\n        await this.removeSpecific(ctx, selected as IosPushCredentials);\n        Log.log(chalk.green('Successfully removed Push Notification Key'));\n      }\n    }\n    return null;\n  }\n\n  async removePushCert(ctx: Context, app: AppLookupParams): Promise<void> {\n    Log.log('Removing Push Certificate');\n    await ctx.ios.deletePushCert(app);\n  }\n\n  async removeSpecific(ctx: Context, selected: IosPushCredentials) {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const apps = getAppsUsingPushCred(credentials, selected);\n    const appsList = apps.map(appCred => appCred.experienceName).join(', ');\n\n    if (appsList && !ctx.nonInteractive) {\n      Log.log('Removing Push Key');\n      const confirm = await confirmAsync({\n        message: `Removing this key/cert will disable notifications in ${appsList}. Do you want to continue?`,\n      });\n      if (!confirm) {\n        Log.log('Aborting');\n        return;\n      }\n    }\n\n    Log.log('Removing Push Key...\\n');\n    await ctx.ios.deletePushKey(selected.id, this.accountName);\n\n    let shouldRevoke = this.shouldRevoke;\n    if (!shouldRevoke && !ctx.nonInteractive) {\n      const revoke = await confirmAsync({\n        message: `Do you also want to revoke it on Apple Developer Portal?`,\n      });\n      shouldRevoke = revoke;\n    }\n\n    if (shouldRevoke) {\n      await ctx.ensureAppleCtx();\n      await new PushKeyManager(ctx.appleCtx).revoke([selected.apnsKeyId]);\n    }\n  }\n}\n\nexport class UpdateIosPush implements IView {\n  constructor(private accountName: string) {}\n\n  async open(ctx: Context) {\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Start the CLI without the '--non-interactive' flag to select a push notification credential to update.\"\n      );\n    }\n\n    const selected = (await selectPushCredFromList(ctx, this.accountName, {\n      allowLegacy: false,\n    })) as IosPushCredentials;\n    if (selected) {\n      await this.updateSpecific(ctx, selected);\n\n      Log.log(chalk.green('Successfully updated Push Notification Key.\\n'));\n      const credentials = await ctx.ios.getAllCredentials(this.accountName);\n      const updated = credentials.userCredentials.find(i => i.id === selected.id);\n      if (updated) {\n        displayIosUserCredentials(updated);\n      }\n      Log.log();\n    }\n    return null;\n  }\n\n  async updateSpecific(ctx: Context, selected: IosPushCredentials) {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const apps = getAppsUsingPushCred(credentials, selected);\n    const appsList = apps.map(appCred => appCred.experienceName).join(', ');\n\n    if (apps.length > 1) {\n      if (ctx.nonInteractive) {\n        throw new CommandError(\n          'NON_INTERACTIVE',\n          `Updating credentials will affect all applications that are using this key (${appsList}). Start the CLI without the '--non-interactive' flag to confirm.`\n        );\n      }\n\n      const confirm = await confirmAsync({\n        message: `Update will affect all applications that are using this key (${appsList}). Do you want to continue?`,\n      });\n      if (!confirm) {\n        Log.warn('Aborting update process');\n        return;\n      }\n    }\n\n    const newPushKey = await this.provideOrGenerate(ctx);\n    await ctx.ios.updatePushKey(selected.id, this.accountName, newPushKey);\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<PushKey> {\n    const userProvided = await askForUserProvided(pushKeySchema);\n    if (userProvided) {\n      const isValid = await validatePushKey(ctx, userProvided);\n      return isValid ? userProvided : await this.provideOrGenerate(ctx);\n    }\n    return await generatePushKey(ctx, this.accountName);\n  }\n}\n\nexport class UseExistingPushNotification implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Start the CLI without the '--non-interactive' flag to select a push notification credential to use.\"\n      );\n    }\n\n    const selected = (await selectPushCredFromList(ctx, this.app.accountName, {\n      allowLegacy: false,\n    })) as IosPushCredentials;\n    if (selected) {\n      await ctx.ios.usePushKey(this.app, selected.id);\n      Log.log(\n        chalk.green(\n          `Successfully assigned Push Notifactions Key to ${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n        )\n      );\n    }\n    return null;\n  }\n}\n\nexport class CreateOrReusePushKey implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async assignPushKey(ctx: Context, userCredentialsId: number) {\n    await ctx.ios.usePushKey(this.app, userCredentialsId);\n    Log.log(\n      chalk.green(\n        `Successfully assigned Push Key to ${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n      )\n    );\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    const existingPushKeys = await getValidPushKeys(\n      await ctx.ios.getAllCredentials(this.app.accountName),\n      ctx\n    );\n\n    if (existingPushKeys.length === 0) {\n      const pushKey = await new CreateIosPush(this.app.accountName).create(ctx);\n      await this.assignPushKey(ctx, pushKey.id);\n      return null;\n    }\n\n    // autoselect creds if we find valid keys\n    const autoselectedPushKey = existingPushKeys[0];\n\n    if (!ctx.nonInteractive) {\n      const confirm = await confirmAsync({\n        message: `${formatPushKey(\n          autoselectedPushKey,\n          await ctx.ios.getAllCredentials(this.app.accountName),\n          'VALID'\n        )} \\n Would you like to use this Push Key?`,\n        limit: Infinity,\n      });\n      if (!confirm) {\n        return await this._createOrReuse(ctx);\n      }\n    }\n\n    // Use autosuggested push key\n    Log.log(`Using Push Key: ${autoselectedPushKey.apnsKeyId}`);\n    await this.assignPushKey(ctx, autoselectedPushKey.id);\n    return null;\n  }\n\n  async _createOrReuse(ctx: Context): Promise<IView | null> {\n    const choices = [\n      {\n        title: '[Choose existing push key] (Recommended)',\n        value: 'CHOOSE_EXISTING',\n      },\n      { title: '[Add a new push key]', value: 'GENERATE' },\n    ];\n\n    const question: Question = {\n      type: 'select',\n      name: 'action',\n      message: 'Select an iOS push key to use for push notifications:',\n      choices,\n    };\n\n    const { action } = await prompt(question);\n\n    if (action === 'GENERATE') {\n      const pushKey = await new CreateIosPush(this.app.accountName).create(ctx);\n      await this.assignPushKey(ctx, pushKey.id);\n      return null;\n    } else if (action === 'CHOOSE_EXISTING') {\n      return new UseExistingPushNotification(this.app);\n    }\n\n    throw new Error('unsupported action');\n  }\n}\n\nasync function getValidPushKeys(iosCredentials: IosCredentials, ctx: Context) {\n  const pushKeys = iosCredentials.userCredentials.filter(\n    (cred): cred is IosPushCredentials => cred.type === 'push-key'\n  );\n  if (!ctx.hasAppleCtx()) {\n    Log.log(\n      chalk.yellow(\n        `Unable to determine validity of Push Keys due to insufficient Apple Credentials`\n      )\n    );\n    return pushKeys;\n  }\n  const pushKeyManager = new PushKeyManager(ctx.appleCtx);\n  const pushInfoFromApple = await pushKeyManager.list();\n  return await filterRevokedPushKeys<IosPushCredentials>(pushInfoFromApple, pushKeys);\n}\n\nfunction getValidityStatus(\n  pushKey: IosPushCredentials,\n  validPushKeys: IosPushCredentials[] | null\n): ValidityStatus {\n  if (!validPushKeys) {\n    return 'UNKNOWN';\n  }\n  return validPushKeys.includes(pushKey) ? 'VALID' : 'INVALID';\n}\n\ntype ListOptions = {\n  filterInvalid?: boolean;\n  allowLegacy?: boolean;\n};\n\nasync function selectPushCredFromList(\n  ctx: Context,\n  accountName: string,\n  options: ListOptions = {}\n): Promise<IosPushCredentials | IosAppCredentials | null> {\n  const iosCredentials = await ctx.ios.getAllCredentials(accountName);\n  const allowLegacy = options.allowLegacy || true;\n  let pushKeys = iosCredentials.userCredentials.filter(\n    cred => cred.type === 'push-key'\n  ) as IosPushCredentials[];\n  let validPushKeys: IosPushCredentials[] | null = null;\n  if (ctx.hasAppleCtx()) {\n    const pushKeyManager = new PushKeyManager(ctx.appleCtx);\n    const pushInfoFromApple = await pushKeyManager.list();\n    validPushKeys = await filterRevokedPushKeys<IosPushCredentials>(pushInfoFromApple, pushKeys);\n  }\n  pushKeys = options.filterInvalid && validPushKeys ? validPushKeys : pushKeys;\n\n  const pushCerts = allowLegacy\n    ? iosCredentials.appCredentials.filter(\n        ({ credentials }) => credentials.pushP12 && credentials.pushPassword\n      )\n    : [];\n  const pushCredentials = [...pushCerts, ...pushKeys];\n  if (pushCredentials.length === 0) {\n    Log.warn('There are no push credentials available in your account');\n    return null;\n  }\n\n  const getName = (pushCred: IosPushCredentials | IosAppCredentials) => {\n    if ('type' in pushCred) {\n      return formatPushKey(\n        pushCred as IosPushCredentials,\n        iosCredentials,\n        getValidityStatus(pushCred as IosPushCredentials, validPushKeys)\n      );\n    }\n\n    const pushCert = pushCred as IosAppCredentials;\n    return `Push Certificate (PushId: ${pushCert.credentials.pushId || '------'}, TeamId: ${\n      pushCert.credentials.teamId || '-------'\n    } used in ${pushCert.experienceName})`;\n  };\n\n  const question: Question = {\n    type: 'select',\n    name: 'credentialsIndex',\n    message: 'Select credentials from list',\n    choices: pushCredentials.map((entry, index) => ({\n      title: getName(entry),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return pushCredentials[credentialsIndex];\n}\n\nfunction getAppsUsingPushCred(\n  iosCredentials: IosCredentials,\n  pushCred: IosPushCredentials | IosAppCredentials\n): IosAppCredentials[] {\n  if ('type' in pushCred) {\n    return iosCredentials.appCredentials.filter(\n      cred => cred.pushCredentialsId === (pushCred as IosPushCredentials).id\n    );\n  } else if (pushCred.credentials?.pushP12 && pushCred.credentials?.pushPassword) {\n    return [pushCred as IosAppCredentials];\n  }\n  return [];\n}\n\nfunction formatPushKeyFromApple(appleInfo: PushKeyInfo, credentials: IosCredentials): string {\n  const userCredentials = credentials.userCredentials.filter(\n    cred => cred.type === 'push-key' && cred.apnsKeyId === appleInfo.id\n  );\n  const appCredentials =\n    userCredentials.length !== 0\n      ? credentials.appCredentials.filter(cred => cred.pushCredentialsId === userCredentials[0].id)\n      : [];\n  const joinApps = appCredentials\n    .map(i => `      ${i.experienceName} (${i.bundleIdentifier})`)\n    .join('\\n');\n\n  const usedByString = joinApps\n    ? `    ${chalk.gray(`used by\\n${joinApps}`)}`\n    : `    ${chalk.gray(`not used by any apps`)}`;\n\n  const { name, id } = appleInfo;\n  const pushKey = userCredentials[0];\n  const teamText = pushKey\n    ? `, Team ID: ${pushKey.teamId || '---'}, Team name: ${pushKey.teamName || '---'}`\n    : '';\n\n  return `${name} - KeyId: ${id}${teamText}\\n${usedByString}`;\n}\n\ntype ValidityStatus = 'UNKNOWN' | 'VALID' | 'INVALID';\nfunction formatPushKey(\n  pushKey: IosPushCredentials,\n  credentials: IosCredentials,\n  validityStatus: ValidityStatus = 'UNKNOWN'\n): string {\n  const appCredentials = credentials.appCredentials.filter(\n    cred => cred.pushCredentialsId === pushKey.id\n  );\n  const joinApps = appCredentials\n    .map(i => `${i.experienceName} (${i.bundleIdentifier})`)\n    .join(', ');\n\n  const usedByString = joinApps\n    ? `\\n    ${chalk.gray(`used by ${joinApps}`)}`\n    : `\\n    ${chalk.gray(`not used by any apps`)}`;\n\n  let validityText;\n  if (validityStatus === 'VALID') {\n    validityText = chalk.gray(\"\\n    ✅ Currently valid on Apple's servers.\");\n  } else if (validityStatus === 'INVALID') {\n    validityText = chalk.gray(\"\\n    ❌ No longer valid on Apple's servers.\");\n  } else {\n    validityText = chalk.gray(\n      \"\\n    ❓ Validity of this certificate on Apple's servers is unknown.\"\n    );\n  }\n  return `Push Notifications Key (Key ID: ${pushKey.apnsKeyId}, Team ID: ${pushKey.teamId})${usedByString}${validityText}`;\n}\n\nasync function generatePushKey(ctx: Context, accountName: string): Promise<PushKey> {\n  await ctx.ensureAppleCtx();\n  const manager = new PushKeyManager(ctx.appleCtx);\n  try {\n    return await manager.create();\n  } catch (e: any) {\n    if (e.code === 'APPLE_PUSH_KEYS_TOO_MANY_GENERATED_ERROR') {\n      const keys = await manager.list();\n      Log.warn('Maximum number of Push Notifications Keys generated on Apple Developer Portal.');\n      Log.warn(APPLE_KEYS_TOO_MANY_GENERATED_ERROR);\n\n      if (ctx.nonInteractive) {\n        throw new CommandError(\n          'NON_INTERACTIVE',\n          \"Start the CLI without the '--non-interactive' to revoke push notification keys.\"\n        );\n      }\n\n      const credentials = await ctx.ios.getAllCredentials(accountName);\n      const usedByExpo = credentials.userCredentials\n        .filter((cert): cert is IosPushCredentials => cert.type === 'push-key')\n        .reduce<{ [key: string]: IosPushCredentials }>(\n          (acc, cert) => ({ ...acc, [cert.apnsKeyId]: cert }),\n          {}\n        );\n\n      // https://docs.expo.dev/distribution/app-signing/#summary\n      const here = terminalLink('here', 'https://bit.ly/3cfJJkQ');\n      Log.log(chalk.grey(`⚠️  Revoking a Push Key will affect other apps that rely on it`));\n      Log.log(chalk.grey(`ℹ️  Learn more ${here}`));\n      Log.log();\n\n      const { revoke } = await prompt([\n        {\n          type: 'multiselect',\n          name: 'revoke',\n          message: 'Select Push Notifications Key to revoke.',\n          choices: keys.map((key, index) => ({\n            value: index,\n            title: formatPushKeyFromApple(key, credentials),\n          })),\n          optionsPerPage: 20,\n        },\n      ]);\n\n      for (const index of revoke) {\n        const certInfo = keys[index];\n        if (certInfo && usedByExpo[certInfo.id]) {\n          await new RemoveIosPush(accountName, true).removeSpecific(ctx, usedByExpo[certInfo.id]);\n        } else {\n          await manager.revoke([certInfo.id]);\n        }\n      }\n    } else {\n      throw e;\n    }\n  }\n  return await generatePushKey(ctx, accountName);\n}\n\nexport async function validatePushKey(ctx: Context, pushKey: PushKey) {\n  if (!ctx.hasAppleCtx()) {\n    Log.warn('Unable to validate Push Keys due to insufficient Apple Credentials');\n    return true;\n  }\n  const spinner = ora(`Checking validity of push key on Apple Developer Portal...`).start();\n\n  const pushKeyManager = new PushKeyManager(ctx.appleCtx);\n  const pushInfoFromApple = await pushKeyManager.list();\n  const filteredFormattedPushKeyArray = await filterRevokedPushKeys(pushInfoFromApple, [pushKey]);\n  const isValidPushKey = filteredFormattedPushKeyArray.length > 0;\n  if (isValidPushKey) {\n    const successMsg = `Successfully validated Push Key against Apple Servers`;\n    spinner.succeed(successMsg);\n  } else {\n    const failureMsg = `This Push Key is no longer valid on the Apple Developer Portal`;\n    spinner.fail(failureMsg);\n  }\n  return isValidPushKey;\n}\n\nasync function filterRevokedPushKeys<T extends PushKey>(\n  pushInfoFromApple: PushKeyInfo[],\n  pushKeys: T[]\n): Promise<T[]> {\n  // if the credentials are valid, check it against apple to make sure it hasnt been revoked\n  const validKeyIdsOnAppleServer = pushInfoFromApple.map(pushKey => pushKey.id);\n  const validPushKeysOnExpoServer = pushKeys.filter(pushKey => {\n    return validKeyIdsOnAppleServer.includes(pushKey.apnsKeyId);\n  });\n  return validPushKeysOnExpoServer;\n}\n\nexport async function getPushKeyFromParams(builderOptions: {\n  pushId?: string;\n  pushP8Path?: string;\n  teamId?: string;\n}): Promise<PushKey | null> {\n  const { pushId, pushP8Path, teamId } = builderOptions;\n\n  // none of the pushKey params were set, assume user has no intention of passing it in\n  if (!pushId && !pushP8Path) {\n    return null;\n  }\n\n  // partial pushKey params were set, assume user has intention of passing it in\n  if (!(pushId && pushP8Path && teamId)) {\n    throw new Error(\n      'In order to provide a Push Key through the CLI parameters, you have to pass --push-id, --push-p8-path and --team-id parameters.'\n    );\n  }\n\n  return {\n    apnsKeyId: pushId,\n    apnsKeyP8: await fs.readFile(pushP8Path, 'utf8'),\n    teamId,\n  } as PushKey;\n}\n\nexport async function usePushKeyFromParams(\n  ctx: Context,\n  app: AppLookupParams,\n  pushKey: PushKey\n): Promise<IosPushCredentials> {\n  const isValid = await validatePushKey(ctx, pushKey);\n  if (!isValid) {\n    throw new Error('Cannot validate uploaded Push Key');\n  }\n\n  const iosPushCredentials = await ctx.ios.createPushKey(app.accountName, pushKey);\n\n  await ctx.ios.usePushKey(app, iosPushCredentials.id);\n  Log.log(\n    chalk.green(\n      `Successfully assigned Push Key to ${app.accountName}/${app.projectName} (${app.bundleIdentifier})`\n    )\n  );\n  return iosPushCredentials;\n}\n"],"mappings":"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"}