{"version":3,"file":"SetupIosBuildCredentials.js","names":["_chalk","data","_interopRequireDefault","require","_CommandError","appleApi","_interopRequireWildcard","_log","_prompts","credentialsJsonReader","_route","_provisioningProfile","_SetupIosDist","_SetupIosProvisioningProfile","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","SetupIosBuildCredentials","constructor","app","open","ctx","bestEffortAppleCtx","hasAppleCtx","ensureBundleIdExistsAsync","appleCtx","enablePushNotifications","runCredentialsManager","SetupIosDist","error","Log","distCert","ios","getDistCert","CommandError","SetupIosProvisioningProfile","nonInteractive","confirm","confirmAsync","message","ensureAppleCtx","log","chalk","green","exports","SetupIosBuildCredentialsFromLocal","localCredentials","readIosCredentialsAsync","projectDir","team","readAppleTeam","provisioningProfile","updateProvisioningProfile","credentials","getAllCredentials","accountName","appsUsingCert","id","appCredentials","filter","cred","distCredentialsId","appInfo","projectName","bundleIdentifier","newDistCert","certP12","distributionCertificate","certPassword","length","update","prompts","type","name","choices","title","value","updateDistCert","createdDistCert","createDistCert","useDistCert"],"sources":["../../../src/credentials/views/SetupIosBuildCredentials.ts"],"sourcesContent":["import chalk from 'chalk';\n\nimport CommandError from '../../CommandError';\nimport * as appleApi from '../../appleApi';\nimport Log from '../../log';\nimport prompts, { confirmAsync } from '../../utils/prompts';\nimport { AppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport * as credentialsJsonReader from '../credentialsJson/read';\nimport { runCredentialsManager } from '../route';\nimport { readAppleTeam } from '../utils/provisioningProfile';\nimport { SetupIosDist } from './SetupIosDist';\nimport { SetupIosProvisioningProfile } from './SetupIosProvisioningProfile';\n\nexport class SetupIosBuildCredentials implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    await this.bestEffortAppleCtx(ctx);\n\n    if (ctx.hasAppleCtx()) {\n      await appleApi.ensureBundleIdExistsAsync(ctx.appleCtx, this.app, {\n        enablePushNotifications: true,\n      });\n    }\n    try {\n      await runCredentialsManager(ctx, new SetupIosDist(this.app));\n    } catch (error: any) {\n      Log.error('Failed to set up Distribution Certificate');\n      throw error;\n    }\n\n    const distCert = await ctx.ios.getDistCert(this.app);\n    if (!distCert) {\n      throw new CommandError(\n        'INSUFFICIENT_CREDENTIALS',\n        `This build request requires a valid distribution certificate.`\n      );\n    }\n\n    try {\n      await runCredentialsManager(ctx, new SetupIosProvisioningProfile(this.app));\n    } catch (error: any) {\n      Log.error('Failed to set up Provisioning Profile');\n      throw error;\n    }\n\n    return null;\n  }\n\n  // Try to get the user to provide Apple credentials upfront\n  // We will be able to do full validation of their iOS creds this way\n  async bestEffortAppleCtx(ctx: Context): Promise<void> {\n    if (ctx.hasAppleCtx()) {\n      // skip prompts if already have apple ctx\n      return;\n    }\n\n    if (ctx.nonInteractive) {\n      return;\n    }\n\n    const confirm = await confirmAsync({\n      message: `Do you have access to the Apple account that will be used for submitting this app to the App Store?`,\n    });\n    if (confirm) {\n      return await ctx.ensureAppleCtx();\n    } else {\n      Log.log(\n        chalk.green(\n          'No problem! ðŸ‘Œ \\nWe canâ€™t auto-generate credentials if you donâ€™t have access to the main Apple account. \\nBut we can still set it up if you upload your credentials.'\n        )\n      );\n    }\n  }\n}\n\nexport class SetupIosBuildCredentialsFromLocal implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    let localCredentials;\n    try {\n      localCredentials = await credentialsJsonReader.readIosCredentialsAsync(ctx.projectDir);\n    } catch (error: any) {\n      Log.error(\n        'Reading credentials from credentials.json failed. Make sure this file is correct and all credentials are present there.'\n      );\n      throw error;\n    }\n\n    const team = await readAppleTeam(localCredentials.provisioningProfile);\n    await ctx.ios.updateProvisioningProfile(this.app, {\n      ...team,\n      provisioningProfile: localCredentials.provisioningProfile,\n    });\n    const credentials = await ctx.ios.getAllCredentials(this.app.accountName);\n    const distCert = await ctx.ios.getDistCert(this.app);\n    const appsUsingCert = distCert?.id\n      ? (credentials.appCredentials || []).filter(cred => cred.distCredentialsId === distCert.id)\n      : [];\n\n    const appInfo = `@${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`;\n    const newDistCert = {\n      ...team,\n      certP12: localCredentials.distributionCertificate.certP12,\n      certPassword: localCredentials.distributionCertificate.certPassword,\n    };\n\n    if (appsUsingCert.length > 1 && distCert?.id) {\n      const { update } = await prompts({\n        type: 'select',\n        name: 'update',\n        message:\n          'Current distribution certificate is used by multiple apps. Do you want to update all of them?',\n        choices: [\n          { title: 'Update all apps', value: 'all' },\n          { title: `Update only ${appInfo}`, value: 'app' },\n        ],\n      });\n      if (update === 'all') {\n        await ctx.ios.updateDistCert(distCert.id, this.app.accountName, newDistCert);\n      } else {\n        const createdDistCert = await ctx.ios.createDistCert(this.app.accountName, newDistCert);\n        await ctx.ios.useDistCert(this.app, createdDistCert.id);\n      }\n    } else if (distCert?.id) {\n      await ctx.ios.updateDistCert(distCert.id, this.app.accountName, newDistCert);\n    } else {\n      const createdDistCert = await ctx.ios.createDistCert(this.app.accountName, newDistCert);\n      await ctx.ios.useDistCert(this.app, createdDistCert.id);\n    }\n    return null;\n  }\n}\n"],"mappings":"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"}