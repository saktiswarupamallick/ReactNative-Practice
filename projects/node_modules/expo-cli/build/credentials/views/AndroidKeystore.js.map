{"version":3,"file":"AndroidKeystore.js","names":["_chalk","data","_interopRequireDefault","require","_commandExists","_fsExtra","_omit","_os","_path","_uuid","_xdl","_CommandError","_log","_prompts","_promptForCredentials","_credentials","_validateKeystore","obj","__esModule","default","keytoolCommandExists","commandExists","UpdateKeystore","constructor","experienceName","options","open","ctx","android","fetchKeystore","displayWarning","keystore","provideOrGenerate","skipKeystoreValidation","validateKeystoreAsync","updateKeystore","Log","log","chalk","green","providedKeystore","askForUserProvided","keystoreSchema","bestEffortKeystoreGeneration","warn","tmpKeystoreName","path","join","os","tmpdir","uuid","replace","fs","remove","keystoreData","AndroidCredentials","generateUploadKeystore","omit","readFile","error","newLine","red","bold","exports","RemoveKeystore","nonInteractive","CommandError","answers","confirmAsync","message","initial","DownloadKeystore","displayCredentials","outputPath","removeKeystore","_this$options","_this$options3","_this$options$outputP","_this$options5","_this$options6","_this$options$display","_this$options7","undefined","_this$options2","quiet","confirm","keystoreObj","keystorePassword","keyAlias","keyPassword","_this$options4","keystorePath","maybeRenameExistingFile","projectDir","storeBuf","Buffer","from","writeFile","getKeystoreFromParams","keystoreAlias","process","env","EXPO_ANDROID_KEYSTORE_PASSWORD","EXPO_ANDROID_KEY_PASSWORD","Error","err","useKeystore","filename","desiredFilePath","resolve","pathExists","num","rename"],"sources":["../../../src/credentials/views/AndroidKeystore.ts"],"sourcesContent":["import chalk from 'chalk';\nimport commandExists from 'command-exists';\nimport fs from 'fs-extra';\nimport omit from 'lodash/omit';\nimport os from 'os';\nimport path from 'path';\nimport { v4 as uuid } from 'uuid';\nimport { AndroidCredentials } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\nimport { confirmAsync } from '../../utils/prompts';\nimport { askForUserProvided } from '../actions/promptForCredentials';\nimport { Context, IView } from '../context';\nimport { Keystore, keystoreSchema } from '../credentials';\nimport validateKeystoreAsync from '../utils/validateKeystore';\n\ninterface UpdateKeystoreOptions {\n  bestEffortKeystoreGeneration?: boolean;\n  skipKeystoreValidation: boolean;\n}\n\nasync function keytoolCommandExists(): Promise<boolean> {\n  try {\n    await commandExists('keytool');\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nclass UpdateKeystore implements IView {\n  constructor(private experienceName: string, private options: UpdateKeystoreOptions) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (await ctx.android.fetchKeystore(this.experienceName)) {\n      this.displayWarning();\n    }\n    const keystore = await this.provideOrGenerate(ctx);\n    if (!keystore) {\n      return null;\n    }\n    if (!this.options.skipKeystoreValidation) {\n      await validateKeystoreAsync(keystore);\n    }\n    await ctx.android.updateKeystore(this.experienceName, keystore);\n    Log.log(chalk.green('Keystore updated successfully'));\n    return null;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<Keystore | null> {\n    const providedKeystore = await askForUserProvided(keystoreSchema);\n    if (providedKeystore) {\n      return providedKeystore;\n    } else if (this.options.bestEffortKeystoreGeneration && !(await keytoolCommandExists())) {\n      Log.warn(\n        'The `keytool` utility was not found in your PATH. A new Keystore will be generated on Expo servers.'\n      );\n      return null;\n    }\n\n    const tmpKeystoreName = path.join(\n      os.tmpdir(),\n      `${this.experienceName}_${uuid()}_tmp.jks`.replace('/', '__')\n    );\n    try {\n      await fs.remove(tmpKeystoreName);\n      const keystoreData = await AndroidCredentials.generateUploadKeystore(\n        tmpKeystoreName,\n        '--------------',\n        this.experienceName\n      );\n\n      return {\n        ...omit(keystoreData, 'keystorePath'),\n        keystore: await fs.readFile(tmpKeystoreName, 'base64'),\n      };\n    } catch (error: any) {\n      Log.warn(\n        'Failed to generate Android Keystore, it will be generated on Expo servers during the build'\n      );\n      throw error;\n    } finally {\n      await fs.remove(tmpKeystoreName);\n    }\n  }\n\n  async displayWarning() {\n    Log.newLine();\n    Log.warn(\n      `⚠️  Updating your Android build credentials will remove previous version from our servers, this is a ${chalk.red(\n        'PERMANENT and IRREVERSIBLE action.'\n      )}`\n    );\n    Log.warn(\n      chalk.bold(\n        'Android Keystore must be identical to the one previously used to submit your app to the Google Play Store.'\n      )\n    );\n  }\n}\n\nclass RemoveKeystore implements IView {\n  constructor(private experienceName: string) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!(await ctx.android.fetchKeystore(this.experienceName))) {\n      Log.warn('There is no valid Keystore defined for this app');\n      return null;\n    }\n\n    this.displayWarning();\n\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Deleting build credentials is a destructive operation. Start the CLI without the '--non-interactive' flag to delete the credentials.\"\n      );\n    }\n\n    const answers = await confirmAsync({\n      message: 'Permanently delete the Android build credentials from our servers?',\n      initial: false,\n    });\n    if (answers) {\n      Log.log('Backing up your Android Keystore now...');\n      await new DownloadKeystore(this.experienceName, {\n        displayCredentials: true,\n        outputPath: `${this.experienceName}.bak.jks`.replace('/', '__'),\n      }).open(ctx);\n\n      await ctx.android.removeKeystore(this.experienceName);\n      Log.log(chalk.green('Keystore removed successfully'));\n    }\n    return null;\n  }\n\n  async displayWarning() {\n    Log.newLine();\n    Log.warn(\n      `⚠️  Clearing your Android build credentials from our build servers is a ${chalk.red(\n        'PERMANENT and IRREVERSIBLE action.'\n      )}`\n    );\n    Log.warn(\n      chalk.bold(\n        'Android Keystore must be identical to the one previously used to submit your app to the Google Play Store.'\n      )\n    );\n    Log.warn(\n      'Please read https://docs.expo.dev/distribution/building-standalone-apps/#if-you-choose-to-build-for-android for more info before proceeding.'\n    );\n    Log.newLine();\n    Log.warn(\n      chalk.bold('Your Keystore will be backed up to your current directory if you continue.')\n    );\n    Log.newLine();\n  }\n}\n\ninterface DownloadKeystoreOptions {\n  quiet?: boolean;\n  displayCredentials?: boolean;\n  outputPath?: string;\n}\n\nclass DownloadKeystore implements IView {\n  constructor(private experienceName: string, private options?: DownloadKeystoreOptions) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    let displayCredentials;\n\n    if (this.options?.displayCredentials !== undefined) {\n      displayCredentials = this.options?.displayCredentials;\n    } else if (this.options?.quiet) {\n      displayCredentials = false;\n    } else if (ctx.nonInteractive) {\n      displayCredentials = true;\n    } else {\n      const confirm = await confirmAsync({\n        message: 'Do you want to display the Android Keystore credentials?',\n      });\n\n      displayCredentials = confirm;\n    }\n\n    const keystoreObj = await ctx.android.fetchKeystore(this.experienceName);\n\n    const { keystore, keystorePassword, keyAlias, keyPassword }: any = keystoreObj || {};\n    if (!keystore || !keystorePassword || !keyAlias || !keyPassword) {\n      if (!this.options?.quiet) {\n        Log.warn('There is no valid Keystore defined for this app');\n      }\n      return null;\n    }\n\n    const keystorePath =\n      this.options?.outputPath ?? `${this.experienceName.replace('/', '__')}.bak.jks`;\n\n    await maybeRenameExistingFile(ctx.projectDir, keystorePath);\n    if (!this.options?.quiet) {\n      Log.log(chalk.green(`Saving Keystore to ${keystorePath}`));\n    }\n    const storeBuf = Buffer.from(keystore, 'base64');\n    await fs.writeFile(keystorePath, storeBuf);\n\n    if (this.options?.displayCredentials ?? displayCredentials) {\n      Log.log(`Keystore credentials\n  Keystore password: ${chalk.bold(keystorePassword)}\n  Key alias:         ${chalk.bold(keyAlias)}\n  Key password:      ${chalk.bold(keyPassword)}\n\n  Path to Keystore:  ${keystorePath}\n      `);\n    }\n    return null;\n  }\n}\n\nasync function getKeystoreFromParams(options: {\n  keystorePath?: string;\n  keystoreAlias?: string;\n}): Promise<Keystore | null> {\n  const keyAlias = options.keystoreAlias;\n  const keystorePath = options.keystorePath;\n  const keystorePassword = process.env.EXPO_ANDROID_KEYSTORE_PASSWORD;\n  const keyPassword = process.env.EXPO_ANDROID_KEY_PASSWORD;\n  if (!keyAlias && !keystorePath) {\n    return null;\n  }\n\n  if (!keystorePath || !keyAlias || !keystorePassword || !keyPassword) {\n    Log.log(keystorePath, keyAlias, keystorePassword, keyPassword);\n    throw new Error(\n      'In order to provide a Keystore through the CLI parameters, you have to pass --keystore-alias, --keystore-path parameters and set EXPO_ANDROID_KEY_PASSWORD and EXPO_ANDROID_KEYSTORE_PASSWORD environment variables.'\n    );\n  }\n  try {\n    const keystore = await fs.readFile(keystorePath, 'base64');\n    return {\n      keystore,\n      keyAlias,\n      keystorePassword,\n      keyPassword,\n    };\n  } catch (err: any) {\n    Log.error(`Error while reading file ${keystorePath}`);\n    throw err;\n  }\n}\n\nasync function useKeystore(\n  ctx: Context,\n  {\n    experienceName,\n    keystore,\n    skipKeystoreValidation,\n  }: { experienceName: string; keystore: Keystore; skipKeystoreValidation: boolean }\n) {\n  if (!skipKeystoreValidation) {\n    await validateKeystoreAsync(keystore);\n  }\n  await ctx.android.updateKeystore(experienceName, keystore);\n}\n\nasync function maybeRenameExistingFile(projectDir: string, filename: string) {\n  const desiredFilePath = path.resolve(projectDir, filename);\n\n  if (await fs.pathExists(desiredFilePath)) {\n    let num = 1;\n    while (await fs.pathExists(path.resolve(projectDir, `OLD_${num}_${filename}`))) {\n      num++;\n    }\n    Log.log(\n      `\\nA file already exists at \"${desiredFilePath}\"\\n  Renaming the existing file to OLD_${num}_${filename}\\n`\n    );\n    await fs.rename(desiredFilePath, path.resolve(projectDir, `OLD_${num}_${filename}`));\n  }\n}\n\nexport { UpdateKeystore, RemoveKeystore, DownloadKeystore, useKeystore, getKeystoreFromParams };\n"],"mappings":"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"}