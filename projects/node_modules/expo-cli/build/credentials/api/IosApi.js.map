{"version":3,"file":"IosApi.js","names":["_assert","data","_interopRequireDefault","require","_keyBy","_omit","_pick","_IosApiV2Wrapper","obj","__esModule","default","_defineProperty","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","getAppLookupParams","experienceName","bundleIdentifier","matchedExperienceName","match","assert","length","accountName","projectName","IosApi","constructor","api","client","ApiClient","getAllCredentials","_this$credentials$acc","_this$credentials$acc2","_this$credentials$acc3","_this$credentials$acc4","isPrefetched","credentials","getAllCredentialsApi","appCredentials","keyBy","cred","userCredentials","id","values","getDistCert","appLookupParams","_this$credentials$acc5","_this$credentials$acc6","_this$credentials$acc7","_this$credentials$acc8","ensureAppCredentials","appCredentialsIndex","getAppCredentialsCacheIndex","distCredentialsId","distCert","createDistCert","_this$credentials$acc9","_this$credentials$acc10","createDistCertApi","refetchUserCredentials","type","updateDistCert","_this$credentials$acc11","updateDistCertApi","deleteDistCert","deleteDistCertApi","removeUserCredentialFromCache","useDistCert","userCredentialsId","useDistCertApi","refetchAppCredentials","createPushKey","_this$credentials$acc12","_this$credentials$acc13","createPushKeyApi","pushKey","updatePushKey","_this$credentials$acc14","_this$credentials$acc15","updatePushKeyApi","deletePushKey","deletePushKeyApi","getPushKey","_this$credentials$acc16","_this$credentials$acc17","_this$credentials$acc18","_this$credentials$acc19","pushCredentialsId","usePushKey","usePushKeyApi","getPushCert","_appCredentials$crede","_appCredentials$crede2","_appCredentials$crede3","getAppCredentials","pushId","pushP12","pushPassword","deletePushCert","deletePushCertApi","_this$credentials$acc20","_this$credentials$acc21","getProvisioningProfile","_appCredentials$crede4","provisioningProfile","pick","updateProvisioningProfile","_this$credentials$acc22","_this$credentials$acc23","_this$credentials$acc24","updateProvisioningProfileApi","deleteProvisioningProfile","_this$credentials","_this$credentials$acc25","_this$credentials$acc26","deleteProvisioningProfileApi","omit","projectFullName","_this$credentials$acc27","_this$credentials$acc28","_this$credentials$acc29","entries","forEach","val","_this$credentials2","_this$credentials2$ac","_this$credentials2$ac2","_this$credentials$acc30","getUserCredentialsByIdApi","app","_this$credentials$acc31","_this$credentials$acc32","getAllCredentialsForAppApi","pushCredentials","distCredentials","exports"],"sources":["../../../src/credentials/api/IosApi.ts"],"sourcesContent":["import assert from 'assert';\nimport keyBy from 'lodash/keyBy';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport { ApiV2 } from 'xdl';\n\nimport * as appleApi from '../../appleApi';\nimport {\n  IosAppCredentials,\n  IosCredentials,\n  IosDistCredentials,\n  IosPushCredentials,\n} from '../credentials';\nimport ApiClient from './IosApiV2Wrapper';\n\nexport interface AppLookupParams {\n  accountName: string;\n  projectName: string;\n  bundleIdentifier: string;\n}\n\nexport function getAppLookupParams(experienceName: string, bundleIdentifier: string) {\n  const matchedExperienceName = experienceName.match(/@(.+)\\/(.+)/);\n  assert(matchedExperienceName && matchedExperienceName.length >= 3, 'invalid experience name');\n  return {\n    accountName: matchedExperienceName[1],\n    projectName: matchedExperienceName[2],\n    bundleIdentifier,\n  };\n}\n\n// appCredentials are identified by `${projectFullName} ${bundleIdentifier}` (see getAppCredentialsCacheIndex method)\n// userCredentials are identified by id (string or numeric depending on API)\n//\n// Expected behaviour of cache (internals)\n//\n// - when isPrefetched[accountName] true assume everything is synced for that account\n// - when credentials[accountName].appCredentials[experienceNameBundleIdentifier] is truthy assume that user and app credentials for that app are synced\n// - when accessing user or app credentials identified by AppLookupParams fetch all credentials for that app (user and app credentials)\n// - when updating userCredentials refetch only userCredentials\n// - when deleting userCredentials modify prefetched appCredentials without calling api\n// - when updating provisioningProfile refetch all credentials for that app (user and app credentials)\n// - when deleting provisioningProfile modify appCredentials in cache\n// - when deleting pushCert refetch all credentials for app (app + user)\n//\n//\ninterface CredentialsCache {\n  [accountName: string]: {\n    appCredentials: {\n      [experienceNameBundleIdentifier: string]: IosAppCredentials;\n    };\n    userCredentials: {\n      [id: string]: IosDistCredentials | IosPushCredentials;\n    };\n  };\n}\n\nexport default class IosApi {\n  client: ApiClient;\n  credentials: CredentialsCache = {};\n  isPrefetched: { [accountName: string]: boolean } = {};\n\n  constructor(api: ApiV2) {\n    this.client = new ApiClient(api);\n  }\n\n  public async getAllCredentials(accountName: string): Promise<IosCredentials> {\n    if (!this.isPrefetched[accountName]) {\n      const credentials = await this.client.getAllCredentialsApi(accountName);\n      this.credentials[accountName] = {\n        appCredentials: keyBy(\n          credentials.appCredentials,\n          cred => `${cred.experienceName} ${cred.bundleIdentifier}`\n        ),\n        userCredentials: keyBy(credentials.userCredentials, cred => String(cred.id)),\n      };\n      this.isPrefetched[accountName] = true;\n    }\n    return {\n      appCredentials: Object.values(this.credentials[accountName]?.appCredentials ?? {}),\n      userCredentials: Object.values(this.credentials[accountName]?.userCredentials ?? {}),\n    };\n  }\n\n  public async getDistCert(appLookupParams: AppLookupParams): Promise<IosDistCredentials | null> {\n    await this.ensureAppCredentials(appLookupParams);\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    const appCredentials = this.credentials[accountName]?.appCredentials?.[appCredentialsIndex];\n    if (!appCredentials || !appCredentials.distCredentialsId) {\n      return null;\n    }\n\n    const distCert = this.credentials[accountName]?.userCredentials?.[\n      appCredentials.distCredentialsId\n    ] as IosDistCredentials | null;\n    return distCert ?? null;\n  }\n\n  public async createDistCert(\n    accountName: string,\n    credentials: appleApi.DistCert\n  ): Promise<IosDistCredentials> {\n    const id = await this.client.createDistCertApi(accountName, credentials);\n\n    // refetching because www might add some fields (e.g. certSerialNumber)\n    await this.refetchUserCredentials(id, accountName);\n\n    const distCert = this.credentials[accountName]?.userCredentials?.[String(id)];\n    assert(id && distCert, 'distribution certificate does not exists');\n    assert(distCert.type === 'dist-cert', 'wrong type of user credential');\n    return distCert as IosDistCredentials;\n  }\n\n  public async updateDistCert(\n    id: number,\n    accountName: string,\n    credentials: appleApi.DistCert\n  ): Promise<IosDistCredentials> {\n    await this.client.updateDistCertApi(id, accountName, credentials);\n\n    // refetching because www might add some fields (e.g. certSerialNumber)\n    await this.refetchUserCredentials(id, accountName);\n\n    const distCert = this.credentials[accountName]?.userCredentials[String(id)];\n    assert(distCert, 'distribution certificate does not exists');\n    assert(distCert.type === 'dist-cert', 'wrong type of user credential');\n    return distCert as IosDistCredentials;\n  }\n\n  public async deleteDistCert(id: number, accountName: string): Promise<void> {\n    await this.client.deleteDistCertApi(id, accountName);\n    await this.removeUserCredentialFromCache(id, accountName);\n  }\n\n  public async useDistCert(\n    appLookupParams: AppLookupParams,\n    userCredentialsId: number\n  ): Promise<void> {\n    await this.client.useDistCertApi(appLookupParams, userCredentialsId);\n    await this.refetchAppCredentials(appLookupParams);\n  }\n\n  public async createPushKey(\n    accountName: string,\n    credentials: appleApi.PushKey\n  ): Promise<IosPushCredentials> {\n    const id = await this.client.createPushKeyApi(accountName, credentials);\n\n    await this.refetchUserCredentials(id, accountName);\n\n    const pushKey = this.credentials[accountName]?.userCredentials?.[String(id)];\n    assert(id && pushKey, 'push key does not exists');\n    assert(pushKey.type === 'push-key', 'wrong type of user credentials');\n    return pushKey;\n  }\n\n  public async updatePushKey(\n    id: number,\n    accountName: string,\n    credentials: appleApi.PushKey\n  ): Promise<IosPushCredentials> {\n    await this.client.updatePushKeyApi(id, accountName, credentials);\n\n    await this.refetchUserCredentials(id, accountName);\n\n    const pushKey = this.credentials[accountName]?.userCredentials?.[String(id)];\n    assert(id && pushKey, 'push key does not exists');\n    assert(pushKey.type === 'push-key', 'wrong type of user credentials');\n    return pushKey;\n  }\n\n  public async deletePushKey(id: number, accountName: string) {\n    await this.client.deletePushKeyApi(id, accountName);\n    await this.removeUserCredentialFromCache(id, accountName);\n  }\n\n  public async getPushKey(appLookupParams: AppLookupParams): Promise<IosPushCredentials | null> {\n    await this.ensureAppCredentials(appLookupParams);\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    const appCredentials = this.credentials[accountName]?.appCredentials?.[appCredentialsIndex];\n    if (!appCredentials || !appCredentials.pushCredentialsId) {\n      return null;\n    }\n\n    const pushKey = this.credentials[accountName]?.userCredentials?.[\n      appCredentials.pushCredentialsId\n    ] as IosPushCredentials | null;\n    return pushKey ?? null;\n  }\n\n  public async usePushKey(\n    appLookupParams: AppLookupParams,\n    userCredentialsId: number\n  ): Promise<void> {\n    await this.client.usePushKeyApi(appLookupParams, userCredentialsId);\n    await this.refetchAppCredentials(appLookupParams);\n  }\n\n  public async getPushCert(\n    appLookupParams: AppLookupParams\n  ): Promise<{ pushId: string; pushP12: string; pushPassword: string } | null> {\n    const appCredentials = await this.getAppCredentials(appLookupParams);\n    const pushId = appCredentials?.credentials?.pushId;\n    const pushP12 = appCredentials?.credentials?.pushP12;\n    const pushPassword = appCredentials?.credentials?.pushPassword;\n    if (!pushId || !pushP12 || !pushPassword) {\n      return null;\n    }\n    return { pushId, pushP12, pushPassword };\n  }\n\n  public async deletePushCert(appLookupParams: AppLookupParams): Promise<void> {\n    await this.client.deletePushCertApi(appLookupParams);\n    await this.refetchAppCredentials(appLookupParams);\n  }\n\n  public async getAppCredentials(appLookupParams: AppLookupParams): Promise<IosAppCredentials> {\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    await this.ensureAppCredentials(appLookupParams);\n    return this.credentials[accountName]?.appCredentials?.[appCredentialsIndex];\n  }\n\n  public async getProvisioningProfile(\n    appLookupParams: AppLookupParams\n  ): Promise<appleApi.ProvisioningProfile | null> {\n    const appCredentials = await this.getAppCredentials(appLookupParams);\n    const provisioningProfile = appCredentials?.credentials?.provisioningProfile;\n    if (!provisioningProfile) {\n      return null;\n    }\n    return pick(appCredentials.credentials, [\n      'provisioningProfile',\n      'provisioningProfileId',\n      'teamId',\n      'teamName',\n    ]) as appleApi.ProvisioningProfile;\n  }\n\n  public async updateProvisioningProfile(\n    appLookupParams: AppLookupParams,\n    provisioningProfile: appleApi.ProvisioningProfile\n  ): Promise<appleApi.ProvisioningProfile> {\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    await this.client.updateProvisioningProfileApi(appLookupParams, provisioningProfile);\n    await this.refetchAppCredentials(appLookupParams);\n    return pick(this.credentials[accountName]?.appCredentials?.[appCredentialsIndex]?.credentials, [\n      'provisioningProfile',\n      'provisioningProfileId',\n      'teamId',\n      'teamName',\n    ]) as appleApi.ProvisioningProfile;\n  }\n\n  public async deleteProvisioningProfile(appLookupParams: AppLookupParams): Promise<void> {\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    await this.client.deleteProvisioningProfileApi(appLookupParams);\n    const appCredentials = this.credentials?.[accountName]?.appCredentials?.[appCredentialsIndex];\n    if (appCredentials?.credentials) {\n      // teamId should still be there because it might be part of push cert definition\n      appCredentials.credentials = omit(appCredentials.credentials, [\n        'provisioningProfile',\n        'provisioningProfileId',\n      ]);\n    }\n  }\n\n  private getAppCredentialsCacheIndex(appLookupParams: AppLookupParams): string {\n    const { accountName, projectName, bundleIdentifier } = appLookupParams;\n    const projectFullName = `@${accountName}/${projectName}`;\n    return `${projectFullName} ${bundleIdentifier}`;\n  }\n\n  private removeUserCredentialFromCache(id: number, accountName: string): void {\n    if (this.credentials[accountName]?.userCredentials?.[String(id)]) {\n      delete this.credentials[accountName].userCredentials[String(id)];\n    }\n    const appCredentials = this.credentials[accountName]?.appCredentials;\n    if (appCredentials) {\n      Object.entries(appCredentials).forEach(([key, val]) => {\n        if (val.distCredentialsId === id) {\n          delete appCredentials[key].distCredentialsId;\n        }\n        if (val.pushCredentialsId === id) {\n          delete appCredentials[key].pushCredentialsId;\n        }\n      });\n    }\n  }\n\n  // ensures that credentials are fetched from the server if they exists\n  // if there is no credentials on server for specific app this function should still succeed.\n  private async ensureAppCredentials(appLookupParams: AppLookupParams): Promise<void> {\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    if (\n      this.isPrefetched[accountName] ||\n      this.credentials?.[accountName]?.appCredentials?.[appCredentialsIndex]\n    ) {\n      return;\n    }\n    await this.refetchAppCredentials(appLookupParams);\n  }\n\n  private async refetchUserCredentials(id: number, accountName: string): Promise<void> {\n    const userCredentials = await this.client.getUserCredentialsByIdApi(id, accountName);\n    if (!userCredentials || !userCredentials.id) {\n      return;\n    }\n    this.credentials[accountName] = {\n      ...this.credentials[accountName],\n      userCredentials: {\n        ...this.credentials[accountName]?.userCredentials,\n        [String(id)]: userCredentials,\n      },\n    };\n  }\n\n  private async refetchAppCredentials(app: AppLookupParams): Promise<void> {\n    const { accountName } = app;\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(app);\n    const data = await this.client.getAllCredentialsForAppApi(app);\n    if (!data) {\n      return;\n    }\n    this.credentials[accountName] = {\n      appCredentials: {\n        ...this.credentials[accountName]?.appCredentials,\n        [appCredentialsIndex]: omit(data, [\n          'pushCredentials',\n          'distCredentials',\n        ]) as IosAppCredentials,\n      },\n      userCredentials: {\n        ...this.credentials[accountName]?.userCredentials,\n        ...(data.pushCredentialsId\n          ? {\n              [String(data.pushCredentialsId)]: {\n                ...data.pushCredentials,\n                id: data.pushCredentialsId,\n                type: 'push-key',\n              },\n            }\n          : {}),\n        ...(data.distCredentialsId\n          ? {\n              [String(data.distCredentialsId)]: {\n                ...data.distCredentials,\n                id: data.distCredentialsId,\n                type: 'dist-cert',\n              },\n            }\n          : {}),\n      },\n    };\n  }\n}\n"],"mappings":"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"}