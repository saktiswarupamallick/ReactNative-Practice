{"version":3,"file":"promptForCredentials.js","names":["_fsExtra","data","_interopRequireDefault","require","_once","_path","_untildify","_log","_prompts","validators","_interopRequireWildcard","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","EXPERT_PROMPT","once","Log","warn","askForUserProvided","schema","willUserProvideCredentialsType","getCredentialsFromUser","credentialType","results","field","required","_credentialType$quest","askQuestionAndProcessAnswer","questions","_schema$provideMethod","_schema$provideMethod2","_schema$provideMethod3","_schema$provideMethod4","_schema$provideMethod5","_schema$provideMethod6","answer","prompts","type","name","message","provideMethodQuestion","question","choices","title","expoGenerated","value","userProvided","definition","questionObject","buildQuestionObject","input","processAnswer","format","produceAbsolutePath","validate","promptsExistingFile","promptsNonEmptyInput","base64Encode","fs","readFile","filePath","untildified","untildify","trim","path","isAbsolute","resolve"],"sources":["../../../src/credentials/actions/promptForCredentials.ts"],"sourcesContent":["import fs from 'fs-extra';\nimport once from 'lodash/once';\nimport path from 'path';\nimport untildify from 'untildify';\n\nimport Log from '../../log';\nimport prompts, { Question as PromptQuestion } from '../../utils/prompts';\nimport * as validators from '../../utils/validators';\n\nexport type Question = {\n  question: string;\n  type: 'file' | 'string' | 'password';\n  base64Encode?: boolean;\n};\n\ntype Results = {\n  [key: string]: string | undefined;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type CredentialSchema<T> = {\n  id: string;\n  canReuse?: boolean;\n  dependsOn?: string;\n  name: string;\n  required: string[];\n  questions: {\n    [key: string]: Question;\n  };\n  deprecated?: boolean;\n  migrationDocs?: string;\n  provideMethodQuestion?: {\n    question?: string;\n    expoGenerated?: string;\n    userProvided?: string;\n  };\n};\n\nconst EXPERT_PROMPT = once(() =>\n  Log.warn(`\nWARNING! In this mode, we won't be able to make sure that your credentials are valid.\nPlease double check that you're uploading valid files for your app otherwise you may encounter strange errors!\n\nWhen building for IOS make sure you've created your App ID on the Apple Developer Portal, that your App ID\nis in app.json as \\`bundleIdentifier\\`, and that the provisioning profile you\nupload matches that Team ID and App ID.\n`)\n);\n\nexport async function askForUserProvided<T extends Results>(\n  schema: CredentialSchema<T>\n): Promise<T | null> {\n  if (await willUserProvideCredentialsType(schema)) {\n    EXPERT_PROMPT();\n    return await getCredentialsFromUser(schema);\n  }\n  return null;\n}\n\nexport async function getCredentialsFromUser<T extends Results>(\n  credentialType: CredentialSchema<T>\n): Promise<T | null> {\n  const results: Results = {};\n  for (const field of credentialType.required) {\n    results[field] = await askQuestionAndProcessAnswer(credentialType?.questions?.[field]);\n  }\n  return results as T;\n}\n\nasync function willUserProvideCredentialsType<T>(schema: CredentialSchema<T>) {\n  const { answer } = await prompts({\n    type: 'select',\n    name: 'answer',\n    message: schema?.provideMethodQuestion?.question ?? `Will you provide your own ${schema.name}?`,\n    choices: [\n      {\n        title: schema?.provideMethodQuestion?.expoGenerated ?? 'Let Expo handle the process',\n        value: false,\n      },\n      {\n        title: schema?.provideMethodQuestion?.userProvided ?? 'I want to upload my own file',\n        value: true,\n      },\n    ],\n  });\n  return answer;\n}\n\nasync function askQuestionAndProcessAnswer(definition: Question): Promise<string> {\n  const questionObject = buildQuestionObject(definition);\n  const { input } = await prompts(questionObject);\n  return await processAnswer(definition, input);\n}\n\nfunction buildQuestionObject({ type, question }: Question): PromptQuestion {\n  switch (type) {\n    case 'string':\n      return {\n        type: 'text',\n        name: 'input',\n        message: question,\n      };\n    case 'file':\n      return {\n        type: 'text',\n        name: 'input',\n        message: question,\n        format: produceAbsolutePath,\n        validate: validators.promptsExistingFile,\n      } as PromptQuestion;\n    case 'password':\n      return {\n        type: 'password',\n        name: 'input',\n        message: question,\n        validate: validators.promptsNonEmptyInput,\n      };\n  }\n}\n\nasync function processAnswer({ type, base64Encode }: Question, input: string): Promise<string> {\n  if (type === 'file') {\n    return fs.readFile(input, base64Encode ? 'base64' : 'utf8');\n  } else {\n    return input;\n  }\n}\n\nfunction produceAbsolutePath(filePath: string): string {\n  const untildified = untildify(filePath.trim());\n  return !path.isAbsolute(untildified) ? path.resolve(untildified) : untildified;\n}\n"],"mappings":"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"}