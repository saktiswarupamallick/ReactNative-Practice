{"version":3,"file":"credentials.js","names":["distCertSchema","id","canReuse","name","required","questions","certP12","question","type","base64Encode","certPassword","teamId","exports","pushKeySchema","apnsKeyP8","apnsKeyId","provisioningProfileSchema","dependsOn","provisioningProfile","appleTeamSchema","keystoreSchema","provideMethodQuestion","expoGenerated","userProvided","keystore","keystorePassword","keyAlias","keyPassword","EXPO_WILL_GENERATE"],"sources":["../../src/credentials/credentials.ts"],"sourcesContent":["import { AndroidCredentials as Android } from 'xdl';\n\nimport * as appleApi from '../appleApi';\nimport { CredentialSchema } from './actions/promptForCredentials';\n\n//\n// iOS\n//\n\nexport type IosCredentials = {\n  appCredentials: IosAppCredentials[];\n  userCredentials: (IosPushCredentials | IosDistCredentials)[];\n};\n\nexport type IosAppCredentials = {\n  experienceName: string;\n  bundleIdentifier: string;\n\n  pushCredentialsId?: number;\n  distCredentialsId?: number;\n  credentials: {\n    provisioningProfileId?: string;\n    provisioningProfile?: string;\n\n    teamId?: string;\n    teamName?: string;\n    // legacy pushCert\n    pushId?: string;\n    pushP12?: string;\n    pushPassword?: string;\n  };\n};\n\nexport type IosPushCredentials = {\n  id: number;\n  type: 'push-key';\n} & appleApi.PushKey;\n\nexport type IosDistCredentials = {\n  id: number;\n  type: 'dist-cert';\n} & appleApi.DistCert;\n\nexport const distCertSchema: CredentialSchema<appleApi.DistCert> = {\n  id: 'distributionCert',\n  canReuse: true,\n  name: 'Apple Distribution Certificate',\n  required: ['certP12', 'certPassword', 'teamId'],\n  questions: {\n    certP12: {\n      question: 'Path to P12 file:',\n      type: 'file',\n      base64Encode: true,\n    },\n    certPassword: {\n      type: 'password',\n      question: 'P12 password:',\n    },\n    teamId: {\n      type: 'string',\n      question: 'Apple Team ID:',\n    },\n  },\n};\n\nexport const pushKeySchema: CredentialSchema<appleApi.PushKey> = {\n  id: 'pushKey',\n  canReuse: true,\n  name: 'Apple Push Notifications service key',\n  required: ['apnsKeyP8', 'apnsKeyId', 'teamId'],\n  questions: {\n    apnsKeyP8: {\n      type: 'file',\n      question: 'Path to P8 file:',\n    },\n    apnsKeyId: {\n      type: 'string',\n      question: 'Key ID:',\n    },\n    teamId: {\n      type: 'string',\n      question: 'Apple Team ID:',\n    },\n  },\n};\n\nexport const provisioningProfileSchema: CredentialSchema<appleApi.ProvisioningProfile> = {\n  id: 'provisioningProfile',\n  name: 'Apple Provisioning Profile',\n  required: ['provisioningProfile'],\n  dependsOn: 'distributionCert',\n  questions: {\n    provisioningProfile: {\n      type: 'file',\n      question: 'Path to .mobile provisioning profile:',\n      base64Encode: true,\n    },\n  },\n};\n\nexport const appleTeamSchema: CredentialSchema<Pick<appleApi.Team, 'id'>> = {\n  id: 'team',\n  name: 'Apple Team',\n  required: ['id'],\n  questions: {\n    id: {\n      type: 'string',\n      question: 'Apple Team ID:',\n    },\n  },\n};\n\n//\n// Android\n//\n\nexport type FcmCredentials = {\n  fcmApiKey: string;\n};\n\nexport type Keystore = Android.Keystore;\n\nexport type AndroidCredentials = {\n  experienceName: string;\n  keystore: Keystore | null;\n  pushCredentials: FcmCredentials | null;\n};\n\nexport const keystoreSchema: CredentialSchema<Android.Keystore> = {\n  id: 'keystore',\n  name: 'Android Keystore',\n  provideMethodQuestion: {\n    question: `Would you like to upload a Keystore or have us generate one for you?\\nIf you don't know what this means, let us generate it! :)`,\n    expoGenerated: 'Generate new keystore',\n    userProvided: 'I want to upload my own file',\n  },\n  required: ['keystore', 'keystorePassword', 'keyAlias', 'keyPassword'],\n  questions: {\n    keystore: {\n      question: 'Path to the Keystore file.',\n      type: 'file',\n      base64Encode: true,\n    },\n    keystorePassword: {\n      question: 'Keystore password',\n      type: 'password',\n    },\n    keyAlias: {\n      question: 'Key alias',\n      type: 'string',\n    },\n    keyPassword: {\n      question: 'Key password',\n      type: 'password',\n    },\n  },\n};\n\nexport const EXPO_WILL_GENERATE = 'EXPO_PLEASE_GENERATE_THIS_FOR_ME';\n"],"mappings":";;;;;;AAKA;AACA;AACA;;AAoCO,MAAMA,cAAmD,GAAG;EACjEC,EAAE,EAAE,kBAAkB;EACtBC,QAAQ,EAAE,IAAI;EACdC,IAAI,EAAE,gCAAgC;EACtCC,QAAQ,EAAE,CAAC,SAAS,EAAE,cAAc,EAAE,QAAQ,CAAC;EAC/CC,SAAS,EAAE;IACTC,OAAO,EAAE;MACPC,QAAQ,EAAE,mBAAmB;MAC7BC,IAAI,EAAE,MAAM;MACZC,YAAY,EAAE;IAChB,CAAC;IACDC,YAAY,EAAE;MACZF,IAAI,EAAE,UAAU;MAChBD,QAAQ,EAAE;IACZ,CAAC;IACDI,MAAM,EAAE;MACNH,IAAI,EAAE,QAAQ;MACdD,QAAQ,EAAE;IACZ;EACF;AACF,CAAC;AAACK,OAAA,CAAAZ,cAAA,GAAAA,cAAA;AAEK,MAAMa,aAAiD,GAAG;EAC/DZ,EAAE,EAAE,SAAS;EACbC,QAAQ,EAAE,IAAI;EACdC,IAAI,EAAE,sCAAsC;EAC5CC,QAAQ,EAAE,CAAC,WAAW,EAAE,WAAW,EAAE,QAAQ,CAAC;EAC9CC,SAAS,EAAE;IACTS,SAAS,EAAE;MACTN,IAAI,EAAE,MAAM;MACZD,QAAQ,EAAE;IACZ,CAAC;IACDQ,SAAS,EAAE;MACTP,IAAI,EAAE,QAAQ;MACdD,QAAQ,EAAE;IACZ,CAAC;IACDI,MAAM,EAAE;MACNH,IAAI,EAAE,QAAQ;MACdD,QAAQ,EAAE;IACZ;EACF;AACF,CAAC;AAACK,OAAA,CAAAC,aAAA,GAAAA,aAAA;AAEK,MAAMG,yBAAyE,GAAG;EACvFf,EAAE,EAAE,qBAAqB;EACzBE,IAAI,EAAE,4BAA4B;EAClCC,QAAQ,EAAE,CAAC,qBAAqB,CAAC;EACjCa,SAAS,EAAE,kBAAkB;EAC7BZ,SAAS,EAAE;IACTa,mBAAmB,EAAE;MACnBV,IAAI,EAAE,MAAM;MACZD,QAAQ,EAAE,uCAAuC;MACjDE,YAAY,EAAE;IAChB;EACF;AACF,CAAC;AAACG,OAAA,CAAAI,yBAAA,GAAAA,yBAAA;AAEK,MAAMG,eAA4D,GAAG;EAC1ElB,EAAE,EAAE,MAAM;EACVE,IAAI,EAAE,YAAY;EAClBC,QAAQ,EAAE,CAAC,IAAI,CAAC;EAChBC,SAAS,EAAE;IACTJ,EAAE,EAAE;MACFO,IAAI,EAAE,QAAQ;MACdD,QAAQ,EAAE;IACZ;EACF;AACF,CAAC;;AAED;AACA;AACA;AAAAK,OAAA,CAAAO,eAAA,GAAAA,eAAA;AAcO,MAAMC,cAAkD,GAAG;EAChEnB,EAAE,EAAE,UAAU;EACdE,IAAI,EAAE,kBAAkB;EACxBkB,qBAAqB,EAAE;IACrBd,QAAQ,EAAG,iIAAgI;IAC3Ie,aAAa,EAAE,uBAAuB;IACtCC,YAAY,EAAE;EAChB,CAAC;EACDnB,QAAQ,EAAE,CAAC,UAAU,EAAE,kBAAkB,EAAE,UAAU,EAAE,aAAa,CAAC;EACrEC,SAAS,EAAE;IACTmB,QAAQ,EAAE;MACRjB,QAAQ,EAAE,4BAA4B;MACtCC,IAAI,EAAE,MAAM;MACZC,YAAY,EAAE;IAChB,CAAC;IACDgB,gBAAgB,EAAE;MAChBlB,QAAQ,EAAE,mBAAmB;MAC7BC,IAAI,EAAE;IACR,CAAC;IACDkB,QAAQ,EAAE;MACRnB,QAAQ,EAAE,WAAW;MACrBC,IAAI,EAAE;IACR,CAAC;IACDmB,WAAW,EAAE;MACXpB,QAAQ,EAAE,cAAc;MACxBC,IAAI,EAAE;IACR;EACF;AACF,CAAC;AAACI,OAAA,CAAAQ,cAAA,GAAAA,cAAA;AAEK,MAAMQ,kBAAkB,GAAG,kCAAkC;AAAChB,OAAA,CAAAgB,kBAAA,GAAAA,kBAAA"}