{"version":3,"file":"prebuildAppAsync.js","names":["_tempy","data","_interopRequireDefault","require","_log","_ora","CreateApp","_interopRequireWildcard","_configureProjectAsync","_createNativeProjectsFromTemplateAsync","_ensureConfigAsync","_installNodeDependenciesAsync","_platformOptions","_resolveTemplate","_setupWarnings","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","prebuildAsync","projectRoot","platforms","options","_managedConfig$_inter","_managedConfig$_inter2","ensureValidPlatforms","assertPlatforms","exp","pkg","ensureConfigAsync","tempDir","temporary","directory","hasNewProjectFiles","needsPodInstall","hasNewDependencies","createNativeProjectsFromTemplateAsync","template","resolveTemplateOption","undefined","skipDependencyUpdate","shouldInstall","install","packageManager","resolvePackageManager","npm","yarn","installNodeDependenciesAsync","clean","configSyncingStep","logNewSection","managedConfig","configureProjectAsync","succeed","error","fail","podsInstalled","includes","installCocoaPodsAsync","Log","debug","warnIfDependenciesRequireAdditionalSetup","sdkVersion","keys","_internal","pluginHistory","nodeInstall","podInstall"],"sources":["../../../src/commands/eject/prebuildAppAsync.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport { ModPlatform } from '@expo/config-plugins';\nimport temporary from 'tempy';\n\nimport Log from '../../log';\nimport { logNewSection } from '../../utils/ora';\nimport * as CreateApp from '../utils/CreateApp';\nimport configureProjectAsync from './configureProjectAsync';\nimport { createNativeProjectsFromTemplateAsync } from './createNativeProjectsFromTemplateAsync';\nimport { ensureConfigAsync } from './ensureConfigAsync';\nimport { installNodeDependenciesAsync } from './installNodeDependenciesAsync';\nimport { assertPlatforms, ensureValidPlatforms } from './platformOptions';\nimport { resolveTemplateOption } from './resolveTemplate';\nimport { warnIfDependenciesRequireAdditionalSetup } from './setupWarnings';\n\nexport type EjectAsyncOptions = {\n  verbose?: boolean;\n  force?: boolean;\n  template?: string;\n  install?: boolean;\n  packageManager?: 'npm' | 'yarn';\n  platforms: ModPlatform[];\n  skipDependencyUpdate?: string[];\n};\n\nexport type PrebuildResults = {\n  exp: ExpoConfig;\n  hasNewProjectFiles: boolean;\n  platforms: ModPlatform[];\n  podInstall: boolean;\n  nodeInstall: boolean;\n  packageManager: string;\n};\n\n/**\n * Entry point into the prebuild process, delegates to other helpers to perform various steps.\n *\n * 1. Create native projects (ios, android)\n * 2. Install node modules\n * 3. Apply config to native projects\n * 4. Install CocoaPods\n */\nexport async function prebuildAsync(\n  projectRoot: string,\n  { platforms, ...options }: EjectAsyncOptions\n): Promise<PrebuildResults> {\n  platforms = ensureValidPlatforms(platforms);\n  assertPlatforms(platforms);\n\n  const { exp, pkg } = await ensureConfigAsync({ projectRoot, platforms });\n  const tempDir = temporary.directory();\n\n  const {\n    hasNewProjectFiles,\n    needsPodInstall,\n    hasNewDependencies,\n  } = await createNativeProjectsFromTemplateAsync({\n    projectRoot,\n    exp,\n    pkg,\n    template: options.template != null ? resolveTemplateOption(options.template) : undefined,\n    tempDir,\n    platforms,\n    skipDependencyUpdate: options.skipDependencyUpdate,\n  });\n\n  // Install node modules\n  const shouldInstall = options?.install !== false;\n\n  const packageManager = CreateApp.resolvePackageManager({\n    install: shouldInstall,\n    npm: options?.packageManager === 'npm',\n    yarn: options?.packageManager === 'yarn',\n  });\n\n  if (shouldInstall) {\n    await installNodeDependenciesAsync(projectRoot, packageManager, {\n      // We delete the dependencies when new ones are added because native packages are more fragile.\n      // npm doesn't work well so we always run the cleaning step when npm is used in favor of yarn.\n      clean: hasNewDependencies || packageManager === 'npm',\n    });\n  }\n\n  // Apply Expo config to native projects\n  const configSyncingStep = logNewSection('Config syncing');\n  let managedConfig: ExpoConfig;\n  try {\n    managedConfig = await configureProjectAsync({\n      projectRoot,\n      platforms,\n    });\n    configSyncingStep.succeed('Config synced');\n  } catch (error: any) {\n    configSyncingStep.fail('Config sync failed');\n    throw error;\n  }\n\n  // Install CocoaPods\n  let podsInstalled: boolean = false;\n  // err towards running pod install less because it's slow and users can easily run npx pod-install afterwards.\n  if (platforms.includes('ios') && shouldInstall && needsPodInstall) {\n    podsInstalled = await CreateApp.installCocoaPodsAsync(projectRoot);\n  } else {\n    Log.debug('Skipped pod install');\n  }\n\n  warnIfDependenciesRequireAdditionalSetup(\n    pkg,\n    exp.sdkVersion,\n    Object.keys(managedConfig._internal?.pluginHistory ?? {})\n  );\n\n  return {\n    packageManager,\n    nodeInstall: options.install === false,\n    podInstall: !podsInstalled,\n    platforms,\n    hasNewProjectFiles,\n    exp,\n  };\n}\n"],"mappings":"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"}