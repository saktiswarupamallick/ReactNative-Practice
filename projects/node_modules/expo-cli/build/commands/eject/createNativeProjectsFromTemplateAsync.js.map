{"version":3,"file":"createNativeProjectsFromTemplateAsync.js","names":["_paths","data","require","_chalk","_interopRequireDefault","_fsExtra","_path","_semver","_CommandError","_log","_ora","GitIgnore","_interopRequireWildcard","_npm","_Github","_updatePackageJson","_writeMetroConfig","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","directoryExistsAsync","file","_await$fs$stat$catch$","_await$fs$stat$catch","fs","stat","catch","isDirectory","createNativeProjectsFromTemplateAsync","projectRoot","exp","pkg","template","tempDir","platforms","skipDependencyUpdate","copiedPaths","cloneNativeDirectoriesAsync","writeMetroConfig","depsResults","updatePackageJSONAsync","hasNewProjectFiles","length","needsPodInstall","includes","hasNewDependencies","hasNewDevDependencies","creatingNativeProjectStep","logNewSection","targetPaths","getTargetPaths","skippedPaths","resolveTemplateArgAsync","name","templatePackageName","getTemplateNpmPackageName","sdkVersion","downloadAndExtractNpmModuleAsync","cwd","copyPathsFromTemplateAsync","results","mergeGitIgnorePaths","path","join","message","chalk","dim","map","bold","didMerge","didClear","succeed","e","AbortCommandError","Log","error","fail","log","yellow","SilentError","semver","major","templatePath","paths","targetPath","projectPath","push","copySync","bareEntryFile","resolveBareEntryFile","main","isPkgMainExpoAppEntry","resolvedMainField","extensions","getBareExtensions","getFileWithExtensions"],"sources":["../../../src/commands/eject/createNativeProjectsFromTemplateAsync.ts"],"sourcesContent":["import { ExpoConfig, PackageJSONConfig } from '@expo/config';\nimport { ModPlatform } from '@expo/config-plugins';\nimport { getBareExtensions, getFileWithExtensions } from '@expo/config/paths';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport semver from 'semver';\n\nimport { AbortCommandError, SilentError } from '../../CommandError';\nimport Log from '../../log';\nimport { logNewSection } from '../../utils/ora';\nimport * as GitIgnore from '../utils/GitIgnore';\nimport { downloadAndExtractNpmModuleAsync } from '../utils/npm';\nimport { resolveTemplateArgAsync } from './Github';\nimport {\n  DependenciesModificationResults,\n  isPkgMainExpoAppEntry,\n  updatePackageJSONAsync,\n} from './updatePackageJson';\nimport { writeMetroConfig } from './writeMetroConfig';\n\nasync function directoryExistsAsync(file: string): Promise<boolean> {\n  return (await fs.stat(file).catch(() => null))?.isDirectory() ?? false;\n}\n\n/**\n *\n * @param projectRoot\n * @param tempDir\n *\n * @return `true` if the project is ejecting, and `false` if it's syncing.\n */\nexport async function createNativeProjectsFromTemplateAsync({\n  projectRoot,\n  exp,\n  pkg,\n  template,\n  tempDir,\n  platforms,\n  skipDependencyUpdate,\n}: {\n  projectRoot: string;\n  exp: ExpoConfig;\n  pkg: PackageJSONConfig;\n  template?: string;\n  tempDir: string;\n  platforms: ModPlatform[];\n  skipDependencyUpdate?: string[];\n}): Promise<\n  { hasNewProjectFiles: boolean; needsPodInstall: boolean } & DependenciesModificationResults\n> {\n  const copiedPaths = await cloneNativeDirectoriesAsync({\n    projectRoot,\n    template,\n    tempDir,\n    exp,\n    pkg,\n    platforms,\n  });\n\n  writeMetroConfig({ projectRoot, pkg, tempDir });\n\n  const depsResults = await updatePackageJSONAsync({\n    projectRoot,\n    tempDir,\n    pkg,\n    skipDependencyUpdate,\n  });\n\n  return {\n    hasNewProjectFiles: !!copiedPaths.length,\n    // If the iOS folder changes or new packages are added, we should rerun pod install.\n    needsPodInstall:\n      copiedPaths.includes('ios') ||\n      depsResults.hasNewDependencies ||\n      depsResults.hasNewDevDependencies,\n    ...depsResults,\n  };\n}\n\n/**\n * Extract the template and copy the ios and android directories over to the project directory.\n *\n * @param force should create native projects even if they already exist.\n * @return `true` if any project files were created.\n */\nasync function cloneNativeDirectoriesAsync({\n  projectRoot,\n  tempDir,\n  template,\n  exp,\n  pkg,\n  platforms,\n}: {\n  projectRoot: string;\n  tempDir: string;\n  template?: string;\n  exp: Pick<ExpoConfig, 'name' | 'sdkVersion'>;\n  pkg: PackageJSONConfig;\n  platforms: ModPlatform[];\n}): Promise<string[]> {\n  // NOTE(brentvatne): Removing spaces between steps for now, add back when\n  // there is some additional context for steps\n  const creatingNativeProjectStep = logNewSection(\n    'Creating native project directories (./ios and ./android) and updating .gitignore'\n  );\n\n  const targetPaths = getTargetPaths(projectRoot, pkg, platforms);\n\n  let copiedPaths: string[] = [];\n  let skippedPaths: string[] = [];\n  try {\n    if (template) {\n      await resolveTemplateArgAsync(tempDir, creatingNativeProjectStep, exp.name, template);\n    } else {\n      const templatePackageName = await getTemplateNpmPackageName(exp.sdkVersion);\n      await downloadAndExtractNpmModuleAsync(templatePackageName, {\n        cwd: tempDir,\n        name: exp.name,\n      });\n    }\n    [copiedPaths, skippedPaths] = await copyPathsFromTemplateAsync(\n      projectRoot,\n      tempDir,\n      targetPaths\n    );\n    const results = GitIgnore.mergeGitIgnorePaths(\n      path.join(projectRoot, '.gitignore'),\n      path.join(tempDir, '.gitignore')\n    );\n\n    let message = `Created native project${platforms.length > 1 ? 's' : ''}`;\n\n    if (skippedPaths.length) {\n      message += chalk.dim(\n        ` | ${skippedPaths.map(path => chalk.bold(`/${path}`)).join(', ')} already created`\n      );\n    }\n    if (!results?.didMerge) {\n      message += chalk.dim(` | gitignore already synced`);\n    } else if (results.didMerge && results.didClear) {\n      message += chalk.dim(` | synced gitignore`);\n    }\n    creatingNativeProjectStep.succeed(message);\n  } catch (e: any) {\n    if (!(e instanceof AbortCommandError)) {\n      Log.error(e.message);\n    }\n    creatingNativeProjectStep.fail('Failed to create the native project.');\n    Log.log(\n      chalk.yellow(\n        'You may want to delete the `./ios` and/or `./android` directories before trying again.'\n      )\n    );\n    throw new SilentError(e);\n  }\n\n  return copiedPaths;\n}\n\n/** Given an `sdkVersion` like `44.0.0` return a fully qualified NPM package name like: `expo-template-bare-minimum@sdk-44` */\nfunction getTemplateNpmPackageName(sdkVersion?: string): string {\n  // When undefined or UNVERSIONED, we use the latest version.\n  if (!sdkVersion || sdkVersion === 'UNVERSIONED') {\n    Log.log('Using an unspecified Expo SDK version. The latest template will be used.');\n    return `expo-template-bare-minimum@latest`;\n  }\n  return `expo-template-bare-minimum@sdk-${semver.major(sdkVersion)}`;\n}\n\nasync function copyPathsFromTemplateAsync(\n  projectRoot: string,\n  templatePath: string,\n  paths: string[]\n): Promise<[string[], string[]]> {\n  const copiedPaths = [];\n  const skippedPaths = [];\n  for (const targetPath of paths) {\n    const projectPath = path.join(projectRoot, targetPath);\n    if (!(await directoryExistsAsync(projectPath))) {\n      copiedPaths.push(targetPath);\n      fs.copySync(path.join(templatePath, targetPath), projectPath);\n    } else {\n      skippedPaths.push(targetPath);\n    }\n  }\n  return [copiedPaths, skippedPaths];\n}\n\nfunction getTargetPaths(projectRoot: string, pkg: PackageJSONConfig, platforms: ModPlatform[]) {\n  const targetPaths: string[] = [...platforms];\n\n  const bareEntryFile = resolveBareEntryFile(projectRoot, pkg.main);\n  // Only create index.js if we cannot resolve the existing entry point (after replacing the expo entry).\n  if (!bareEntryFile) {\n    targetPaths.push('index.js');\n  }\n\n  return targetPaths;\n}\n\nexport function resolveBareEntryFile(projectRoot: string, main: any) {\n  // expo app entry is not needed for bare projects.\n  if (isPkgMainExpoAppEntry(main)) return null;\n  // Look at the `package.json`s `main` field for the main file.\n  const resolvedMainField = main ?? './index';\n  // Get a list of possible extensions for the main file.\n  const extensions = getBareExtensions(['ios', 'android']);\n  // Testing the main field against all of the provided extensions - for legacy reasons we can't use node module resolution as the package.json allows you to pass in a file without a relative path and expect it as a relative path.\n  return getFileWithExtensions(projectRoot, resolvedMainField, extensions);\n}\n"],"mappings":"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"}