{"version":3,"file":"publishSetAsync.js","names":["table","data","_interopRequireWildcard","require","_log","_interopRequireDefault","_PublishUtils","_deprecationNotice","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","actionAsync","projectRoot","options","printDeprecationNotice","releaseChannel","Error","publishId","result","setPublishToChannelAsync","tableString","printTableJson","queryResult","Log","log","e","error"],"sources":["../../../src/commands/publish/publishSetAsync.ts"],"sourcesContent":["import * as table from '../../commands/utils/cli-table';\nimport Log from '../../log';\nimport { setPublishToChannelAsync } from '../utils/PublishUtils';\nimport { printDeprecationNotice } from './deprecationNotice';\n\ntype Options = { releaseChannel?: string; publishId?: string };\n\nexport async function actionAsync(projectRoot: string, options: Options): Promise<void> {\n  printDeprecationNotice();\n  if (!options.releaseChannel) {\n    throw new Error('You must specify a release channel.');\n  }\n  if (!options.publishId) {\n    throw new Error('You must specify a publish id. You can find ids using publish:history.');\n  }\n  try {\n    const result = await setPublishToChannelAsync(\n      projectRoot,\n      options as { releaseChannel: string; publishId: string }\n    );\n    const tableString = table.printTableJson(result.queryResult, 'Channel Set Status ', 'SUCCESS');\n    Log.log(tableString);\n  } catch (e: any) {\n    Log.error(e);\n  }\n}\n"],"mappings":";;;;;;AAAA,SAAAA,MAAA;EAAA,MAAAC,IAAA,GAAAC,uBAAA,CAAAC,OAAA;EAAAH,KAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAG,KAAA;EAAA,MAAAH,IAAA,GAAAI,sBAAA,CAAAF,OAAA;EAAAC,IAAA,YAAAA,CAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAK,cAAA;EAAA,MAAAL,IAAA,GAAAE,OAAA;EAAAG,aAAA,YAAAA,CAAA;IAAA,OAAAL,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAM,mBAAA;EAAA,MAAAN,IAAA,GAAAE,OAAA;EAAAI,kBAAA,YAAAA,CAAA;IAAA,OAAAN,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAA6D,SAAAI,uBAAAG,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAAA,SAAAG,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,CAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAV,wBAAAM,GAAA,EAAAI,WAAA,SAAAA,WAAA,IAAAJ,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,oBAAAA,GAAA,wBAAAA,GAAA,4BAAAE,OAAA,EAAAF,GAAA,UAAAQ,KAAA,GAAAL,wBAAA,CAAAC,WAAA,OAAAI,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAT,GAAA,YAAAQ,KAAA,CAAAE,GAAA,CAAAV,GAAA,SAAAW,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAhB,GAAA,QAAAgB,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAnB,GAAA,EAAAgB,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAf,GAAA,EAAAgB,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAhB,GAAA,CAAAgB,GAAA,SAAAL,MAAA,CAAAT,OAAA,GAAAF,GAAA,MAAAQ,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAArB,GAAA,EAAAW,MAAA,YAAAA,MAAA;AAItD,eAAeW,WAAWA,CAACC,WAAmB,EAAEC,OAAgB,EAAiB;EACtF,IAAAC,2CAAsB,EAAC,CAAC;EACxB,IAAI,CAACD,OAAO,CAACE,cAAc,EAAE;IAC3B,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;EACxD;EACA,IAAI,CAACH,OAAO,CAACI,SAAS,EAAE;IACtB,MAAM,IAAID,KAAK,CAAC,wEAAwE,CAAC;EAC3F;EACA,IAAI;IACF,MAAME,MAAM,GAAG,MAAM,IAAAC,wCAAwB,EAC3CP,WAAW,EACXC,OACF,CAAC;IACD,MAAMO,WAAW,GAAGvC,KAAK,CAAD,CAAC,CAACwC,cAAc,CAACH,MAAM,CAACI,WAAW,EAAE,qBAAqB,EAAE,SAAS,CAAC;IAC9FC,cAAG,CAACC,GAAG,CAACJ,WAAW,CAAC;EACtB,CAAC,CAAC,OAAOK,CAAM,EAAE;IACfF,cAAG,CAACG,KAAK,CAACD,CAAC,CAAC;EACd;AACF"}