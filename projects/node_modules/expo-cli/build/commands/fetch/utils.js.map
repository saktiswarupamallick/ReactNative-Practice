{"version":3,"file":"utils.js","names":["_assert","data","_interopRequireDefault","require","_chalk","fs","_interopRequireWildcard","path","_log","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","assertSlug","slug","assert","chalk","bold","maybeRenameExistingFileAsync","projectRoot","filename","desiredFilePath","resolve","pathExists","num","Log","log","rename"],"sources":["../../../src/commands/fetch/utils.ts"],"sourcesContent":["import assert from 'assert';\nimport chalk from 'chalk';\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\n\nimport Log from '../../log';\n\nexport type Options = {\n  parent?: {\n    nonInteractive: boolean;\n  };\n};\n\nexport function assertSlug(slug: any): asserts slug {\n  assert(slug, `${chalk.bold(slug)} field must be set in your app.json or app.config.js`);\n}\n\nexport async function maybeRenameExistingFileAsync(projectRoot: string, filename: string) {\n  const desiredFilePath = path.resolve(projectRoot, filename);\n\n  if (await fs.pathExists(desiredFilePath)) {\n    let num = 1;\n    while (await fs.pathExists(path.resolve(projectRoot, `OLD_${num}_${filename}`))) {\n      num++;\n    }\n    Log.log(\n      `\\nA file already exists at \"${desiredFilePath}\"\\n  Renaming the existing file to OLD_${num}_${filename}\\n`\n    );\n    await fs.rename(desiredFilePath, path.resolve(projectRoot, `OLD_${num}_${filename}`));\n  }\n}\n"],"mappings":"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"}