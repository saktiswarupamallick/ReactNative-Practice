{"version":3,"file":"index.js","names":["_chalk","data","_interopRequireDefault","require","_applyAsyncAction","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_default","program","applyAsyncActionProjectDir","command","description","chalk","yellow","bold","longDescription","helpGroup","Promise","resolve","then"],"sources":["../../../src/commands/fetch/index.ts"],"sourcesContent":["import chalk from 'chalk';\nimport type { Command } from 'commander';\n\nimport { applyAsyncActionProjectDir } from '../utils/applyAsyncAction';\n\nexport default function (program: Command) {\n  applyAsyncActionProjectDir(\n    program\n      .command('fetch:ios:certs [path]')\n      .description(`${chalk.yellow`Superseded`} by ${chalk.bold`eas credentials`} in eas-cli`)\n      .longDescription(\n        `Fetch this project's iOS certificates/keys and provisioning profile. Writes files to the PROJECT_DIR and prints passwords to stdout.`\n      )\n      .helpGroup('deprecated'),\n    () => import('./fetchIosCertsAsync')\n  );\n\n  applyAsyncActionProjectDir(\n    program\n      .command('fetch:android:keystore [path]')\n      .description(`${chalk.yellow`Superseded`} by ${chalk.bold`eas credentials`} in eas-cli`)\n      .longDescription(\n        \"Fetch this project's Android Keystore. Writes Keystore to PROJECT_DIR/PROJECT_NAME.jks and prints passwords to stdout.\"\n      )\n      .helpGroup('deprecated'),\n    () => import('./fetchAndroidKeystoreAsync')\n  );\n\n  applyAsyncActionProjectDir(\n    program\n      .command('fetch:android:hashes [path]')\n      .description(`${chalk.yellow`Superseded`} by ${chalk.bold`eas credentials`} in eas-cli`)\n      .longDescription(\n        \"Fetch this project's Android key hashes needed to set up Google/Facebook authentication. Note: if you are using Google Play signing, this app will be signed with a different key after publishing to the store, and you'll need to use the hashes displayed in the Google Play console.\"\n      )\n      .helpGroup('deprecated'),\n    () => import('./fetchAndroidHashesAsync')\n  );\n\n  applyAsyncActionProjectDir(\n    program\n      .command('fetch:android:upload-cert [path]')\n      .description(`${chalk.yellow`Superseded`} by ${chalk.bold`eas credentials`} in eas-cli`)\n      .longDescription(\n        \"Fetch this project's upload certificate needed after opting in to app signing by Google Play or after resetting a previous upload certificate\"\n      )\n      .helpGroup('deprecated'),\n    () => import('./fetchAndroidUploadCertAsync')\n  );\n}\n"],"mappings":"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"}