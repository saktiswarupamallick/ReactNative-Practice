{"version":3,"file":"urlAsync.js","names":["_chalk","data","_interopRequireDefault","require","_xdl","_CommandError","_log","_urlOpts","_printRunInstructionsAsync","obj","__esModule","default","actionAsync","projectRoot","options","urlOpts","optsAsync","assertProjectRunningAsync","url","web","getWebAppUrlAsync","UrlUtils","constructDeepLinkAsync","logUrl","printRunInstructionsAsync","handleMobileOptsAsync","ProjectSettings","getCurrentStatusAsync","CommandError","constructWebAppUrlAsync","Log","newLine","printQRCode","log","chalk","underline"],"sources":["../../../src/commands/url/urlAsync.ts"],"sourcesContent":["import chalk from 'chalk';\nimport type { Command } from 'commander';\nimport { ProjectSettings, UrlUtils } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\nimport urlOpts, { URLOptions } from '../utils/urlOpts';\nimport printRunInstructionsAsync from './printRunInstructionsAsync';\n\ntype ProjectUrlOptions = Command & {\n  web?: boolean;\n};\n\nexport async function actionAsync(projectRoot: string, options: ProjectUrlOptions & URLOptions) {\n  await urlOpts.optsAsync(projectRoot, options);\n\n  await assertProjectRunningAsync(projectRoot);\n\n  const url = options.web\n    ? await getWebAppUrlAsync(projectRoot)\n    : await UrlUtils.constructDeepLinkAsync(projectRoot);\n\n  logUrl(url);\n\n  if (!options.web) {\n    await printRunInstructionsAsync();\n    await urlOpts.handleMobileOptsAsync(projectRoot, options);\n  }\n}\n\nasync function assertProjectRunningAsync(projectRoot: string) {\n  if ((await ProjectSettings.getCurrentStatusAsync(projectRoot)) !== 'running') {\n    throw new CommandError(\n      'NOT_RUNNING',\n      `Project is not running. Please start it with \\`expo start\\`.`\n    );\n  }\n}\n\nasync function getWebAppUrlAsync(projectRoot: string): Promise<string> {\n  const url = await UrlUtils.constructWebAppUrlAsync(projectRoot);\n  if (!url) {\n    throw new CommandError(\n      'NOT_RUNNING',\n      `Webpack dev server is not running. Please start it with \\`expo start:web\\`.`\n    );\n  }\n  return url;\n}\n\nfunction logUrl(url: string) {\n  Log.newLine();\n\n  urlOpts.printQRCode(url);\n\n  Log.log('Your URL is\\n\\n' + chalk.underline(url) + '\\n');\n}\n"],"mappings":";;;;;;AAAA,SAAAA,OAAA;EAAA,MAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,MAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEA,SAAAG,KAAA;EAAA,MAAAH,IAAA,GAAAE,OAAA;EAAAC,IAAA,YAAAA,CAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEA,SAAAI,cAAA;EAAA,MAAAJ,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAE,aAAA,YAAAA,CAAA;IAAA,OAAAJ,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAK,KAAA;EAAA,MAAAL,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAG,IAAA,YAAAA,CAAA;IAAA,OAAAL,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAM,SAAA;EAAA,MAAAN,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAI,QAAA,YAAAA,CAAA;IAAA,OAAAN,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAO,2BAAA;EAAA,MAAAP,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAK,0BAAA,YAAAA,CAAA;IAAA,OAAAP,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAAoE,SAAAC,uBAAAO,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAM7D,eAAeG,WAAWA,CAACC,WAAmB,EAAEC,OAAuC,EAAE;EAC9F,MAAMC,kBAAO,CAACC,SAAS,CAACH,WAAW,EAAEC,OAAO,CAAC;EAE7C,MAAMG,yBAAyB,CAACJ,WAAW,CAAC;EAE5C,MAAMK,GAAG,GAAGJ,OAAO,CAACK,GAAG,GACnB,MAAMC,iBAAiB,CAACP,WAAW,CAAC,GACpC,MAAMQ,eAAQ,CAACC,sBAAsB,CAACT,WAAW,CAAC;EAEtDU,MAAM,CAACL,GAAG,CAAC;EAEX,IAAI,CAACJ,OAAO,CAACK,GAAG,EAAE;IAChB,MAAM,IAAAK,oCAAyB,EAAC,CAAC;IACjC,MAAMT,kBAAO,CAACU,qBAAqB,CAACZ,WAAW,EAAEC,OAAO,CAAC;EAC3D;AACF;AAEA,eAAeG,yBAAyBA,CAACJ,WAAmB,EAAE;EAC5D,IAAI,CAAC,MAAMa,sBAAe,CAACC,qBAAqB,CAACd,WAAW,CAAC,MAAM,SAAS,EAAE;IAC5E,MAAM,KAAIe,uBAAY,EACpB,aAAa,EACZ,8DACH,CAAC;EACH;AACF;AAEA,eAAeR,iBAAiBA,CAACP,WAAmB,EAAmB;EACrE,MAAMK,GAAG,GAAG,MAAMG,eAAQ,CAACQ,uBAAuB,CAAChB,WAAW,CAAC;EAC/D,IAAI,CAACK,GAAG,EAAE;IACR,MAAM,KAAIU,uBAAY,EACpB,aAAa,EACZ,6EACH,CAAC;EACH;EACA,OAAOV,GAAG;AACZ;AAEA,SAASK,MAAMA,CAACL,GAAW,EAAE;EAC3BY,cAAG,CAACC,OAAO,CAAC,CAAC;EAEbhB,kBAAO,CAACiB,WAAW,CAACd,GAAG,CAAC;EAExBY,cAAG,CAACG,GAAG,CAAC,iBAAiB,GAAGC,gBAAK,CAACC,SAAS,CAACjB,GAAG,CAAC,GAAG,IAAI,CAAC;AAC1D"}