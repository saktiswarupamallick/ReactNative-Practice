{"version":3,"file":"getMissingPackages.js","names":["_config","data","require","_resolveFrom","_interopRequireDefault","_xdl","obj","__esModule","default","collectMissingPackages","projectRoot","requiredPackages","resolutions","missingPackages","filter","p","resolved","resolveFrom","file","pkg","missing","getMissingPackagesAsync","exp","getConfig","skipSDKVersionRequirement","results","length","mutatePackagesWithKnownVersionsAsync","getSDKVersionsAsync","sdkVersion","_sdkVersions$exp$sdkV","sdkVersions","Versions","releasedSdkVersionsAsync","packages","versions","relatedPackages","version"],"sources":["../../../../src/commands/utils/web/getMissingPackages.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport { ExpoConfig } from '@expo/config-types';\nimport resolveFrom from 'resolve-from';\nimport { Versions } from 'xdl';\n\nexport type ResolvedPackage = {\n  file: string;\n  pkg: string;\n  version?: string;\n};\n\nexport function collectMissingPackages(\n  projectRoot: string,\n  requiredPackages: ResolvedPackage[]\n): {\n  missing: ResolvedPackage[];\n  resolutions: Record<string, string>;\n} {\n  const resolutions: Record<string, string> = {};\n\n  const missingPackages = requiredPackages.filter(p => {\n    try {\n      const resolved = resolveFrom(projectRoot, p.file);\n      if (resolved) {\n        resolutions[p.pkg] = resolved;\n      }\n      return !resolved;\n    } catch {\n      return true;\n    }\n  });\n\n  return { missing: missingPackages, resolutions };\n}\n\n/**\n * Collect missing packages given a list of required packages.\n * Any missing packages will be versioned to the known versions for the current SDK.\n *\n * @param projectRoot\n * @param props.requiredPackages list of required packages to check for\n * @returns list of missing packages and resolutions to existing packages.\n */\nexport async function getMissingPackagesAsync(\n  projectRoot: string,\n  {\n    exp = getConfig(projectRoot, { skipSDKVersionRequirement: true }).exp,\n    requiredPackages,\n  }: {\n    exp?: ExpoConfig;\n    requiredPackages: ResolvedPackage[];\n  }\n): Promise<{\n  missing: ResolvedPackage[];\n  resolutions: Record<string, string>;\n}> {\n  const results = collectMissingPackages(projectRoot, requiredPackages);\n  if (!results.missing.length) {\n    return results;\n  }\n\n  // Ensure the versions are right for the SDK that the project is currently using.\n  await mutatePackagesWithKnownVersionsAsync(exp, results.missing);\n\n  return results;\n}\n\nasync function getSDKVersionsAsync(exp: ExpoConfig): Promise<Versions.SDKVersion | null> {\n  try {\n    if (exp.sdkVersion) {\n      const sdkVersions = await Versions.releasedSdkVersionsAsync();\n      return sdkVersions[exp.sdkVersion] ?? null;\n    }\n  } catch {\n    // This is a convenience method and we should avoid making this halt the process.\n  }\n  return null;\n}\n\nexport async function mutatePackagesWithKnownVersionsAsync(\n  exp: ExpoConfig,\n  packages: ResolvedPackage[]\n) {\n  // Ensure the versions are right for the SDK that the project is currently using.\n  const versions = await getSDKVersionsAsync(exp);\n  if (versions?.relatedPackages) {\n    for (const pkg of packages) {\n      if (pkg.pkg in versions.relatedPackages) {\n        pkg.version = versions.relatedPackages[pkg.pkg];\n      }\n    }\n  }\n  return packages;\n}\n"],"mappings":";;;;;;;;AAAA,SAAAA,QAAA;EAAA,MAAAC,IAAA,GAAAC,OAAA;EAAAF,OAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEA,SAAAE,aAAA;EAAA,MAAAF,IAAA,GAAAG,sBAAA,CAAAF,OAAA;EAAAC,YAAA,YAAAA,CAAA;IAAA,OAAAF,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAI,KAAA;EAAA,MAAAJ,IAAA,GAAAC,OAAA;EAAAG,IAAA,YAAAA,CAAA;IAAA,OAAAJ,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAA+B,SAAAG,uBAAAE,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAQxB,SAASG,sBAAsBA,CACpCC,WAAmB,EACnBC,gBAAmC,EAInC;EACA,MAAMC,WAAmC,GAAG,CAAC,CAAC;EAE9C,MAAMC,eAAe,GAAGF,gBAAgB,CAACG,MAAM,CAACC,CAAC,IAAI;IACnD,IAAI;MACF,MAAMC,QAAQ,GAAG,IAAAC,sBAAW,EAACP,WAAW,EAAEK,CAAC,CAACG,IAAI,CAAC;MACjD,IAAIF,QAAQ,EAAE;QACZJ,WAAW,CAACG,CAAC,CAACI,GAAG,CAAC,GAAGH,QAAQ;MAC/B;MACA,OAAO,CAACA,QAAQ;IAClB,CAAC,CAAC,MAAM;MACN,OAAO,IAAI;IACb;EACF,CAAC,CAAC;EAEF,OAAO;IAAEI,OAAO,EAAEP,eAAe;IAAED;EAAY,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeS,uBAAuBA,CAC3CX,WAAmB,EACnB;EACEY,GAAG,GAAG,IAAAC,mBAAS,EAACb,WAAW,EAAE;IAAEc,yBAAyB,EAAE;EAAK,CAAC,CAAC,CAACF,GAAG;EACrEX;AAIF,CAAC,EAIA;EACD,MAAMc,OAAO,GAAGhB,sBAAsB,CAACC,WAAW,EAAEC,gBAAgB,CAAC;EACrE,IAAI,CAACc,OAAO,CAACL,OAAO,CAACM,MAAM,EAAE;IAC3B,OAAOD,OAAO;EAChB;;EAEA;EACA,MAAME,oCAAoC,CAACL,GAAG,EAAEG,OAAO,CAACL,OAAO,CAAC;EAEhE,OAAOK,OAAO;AAChB;AAEA,eAAeG,mBAAmBA,CAACN,GAAe,EAAuC;EACvF,IAAI;IACF,IAAIA,GAAG,CAACO,UAAU,EAAE;MAAA,IAAAC,qBAAA;MAClB,MAAMC,WAAW,GAAG,MAAMC,eAAQ,CAACC,wBAAwB,CAAC,CAAC;MAC7D,QAAAH,qBAAA,GAAOC,WAAW,CAACT,GAAG,CAACO,UAAU,CAAC,cAAAC,qBAAA,cAAAA,qBAAA,GAAI,IAAI;IAC5C;EACF,CAAC,CAAC,MAAM;IACN;EAAA;EAEF,OAAO,IAAI;AACb;AAEO,eAAeH,oCAAoCA,CACxDL,GAAe,EACfY,QAA2B,EAC3B;EACA;EACA,MAAMC,QAAQ,GAAG,MAAMP,mBAAmB,CAACN,GAAG,CAAC;EAC/C,IAAIa,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEC,eAAe,EAAE;IAC7B,KAAK,MAAMjB,GAAG,IAAIe,QAAQ,EAAE;MAC1B,IAAIf,GAAG,CAACA,GAAG,IAAIgB,QAAQ,CAACC,eAAe,EAAE;QACvCjB,GAAG,CAACkB,OAAO,GAAGF,QAAQ,CAACC,eAAe,CAACjB,GAAG,CAACA,GAAG,CAAC;MACjD;IACF;EACF;EACA,OAAOe,QAAQ;AACjB"}