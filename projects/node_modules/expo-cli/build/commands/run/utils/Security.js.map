{"version":3,"file":"Security.js","names":["_spawnAsync","data","_interopRequireDefault","require","_nodeForge","_CommandError","obj","__esModule","default","assertInstalledAsync","spawnAsync","CommandError","getCertificateForSigningIdAsync","id","_await$spawnAsync$std","_await$spawnAsync$std2","pem","stdout","trim","call","forge","pki","certificateFromPem","findIdentitiesAsync","_await$spawnAsync$std3","_await$spawnAsync$std4","results","parsed","split","map","line","extractCodeSigningInfo","filter","Boolean","Set","value","_value$match$","_value$match","match","resolveIdentitiesAsync","identities","values","extractSigningId","Promise","all","signingCertificateId","resolveCertificateSigningInfoAsync","_certificate$subject$","_certificate$subject$2","_certificate$subject$3","certificate","codeSigningInfo","subject","getField","appleTeamName","appleTeamId","_codeSigningInfo$matc","_codeSigningInfo$matc2"],"sources":["../../../../src/commands/run/utils/Security.ts"],"sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport forge from 'node-forge';\n\nimport CommandError from '../../../CommandError';\n\nexport type CertificateSigningInfo = {\n  /**\n   * @example 'AA00AABB0A'\n   */\n  signingCertificateId: string;\n  /**\n   * @example 'Apple Development: Evan Bacon (AA00AABB0A)'\n   */\n  codeSigningInfo?: string;\n  /**\n   * @example '650 Industries, Inc.'\n   */\n  appleTeamName?: string;\n  /**\n   * @example 'A1BCDEF234'\n   */\n  appleTeamId?: string;\n};\n\nexport async function assertInstalledAsync() {\n  try {\n    await spawnAsync('which', ['security']);\n  } catch {\n    throw new CommandError(\n      \"Cannot code sign project because the CLI `security` is not available on your computer.\\nPlease ensure it's installed and try again.\"\n    );\n  }\n}\n\nexport async function getCertificateForSigningIdAsync(id: string): Promise<forge.pki.Certificate> {\n  const pem = (await spawnAsync('security', ['find-certificate', '-c', id, '-p'])).stdout?.trim?.();\n  if (!pem) {\n    throw new CommandError(\n      `Failed to get PEM certificate for ID \"${id}\" using the \\`security\\` CLI`\n    );\n  }\n  return forge.pki.certificateFromPem(pem);\n}\n\nexport async function findIdentitiesAsync(): Promise<string[]> {\n  const results = (\n    await spawnAsync('security', ['find-identity', '-p', 'codesigning', '-v'])\n  ).stdout.trim?.();\n  // Returns a string like:\n  // 1) 12222234253761286351826735HGKDHAJGF45283 \"Apple Development: Evan Bacon (AA00AABB0A)\" (CSSMERR_TP_CERT_REVOKED)\n  // 2) 12312234253761286351826735HGKDHAJGF45283 \"Apple Development: bacon@expo.io (BB00AABB0A)\"\n  // 3) 12442234253761286351826735HGKDHAJGF45283 \"iPhone Distribution: Evan Bacon (CC00AABB0B)\" (CSSMERR_TP_CERT_REVOKED)\n  // 4) 15672234253761286351826735HGKDHAJGF45283 \"Apple Development: Evan Bacon (AA00AABB0A)\"\n  //  4 valid identities found\n\n  const parsed = results\n    .split('\\n')\n    .map(line => extractCodeSigningInfo(line))\n    .filter(Boolean) as string[];\n\n  // Remove duplicates\n  return [...new Set(parsed)];\n}\n\n/**\n * @param value '  2) 12312234253761286351826735HGKDHAJGF45283 \"Apple Development: bacon@expo.io (BB00AABB0A)\"'\n * @returns 'Apple Development: Evan Bacon (PH75MDXG4H)'\n */\nexport function extractCodeSigningInfo(value: string): string | null {\n  return value.match(/^\\s*\\d+\\).+\"(.+Develop(ment|er).+)\"$/)?.[1] ?? null;\n}\n\nexport async function resolveIdentitiesAsync(\n  identities: string[]\n): Promise<CertificateSigningInfo[]> {\n  const values = identities.map(extractSigningId).filter(Boolean) as string[];\n  return await Promise.all(\n    values.map(signingCertificateId => resolveCertificateSigningInfoAsync(signingCertificateId))\n  );\n}\n\nexport async function resolveCertificateSigningInfoAsync(\n  signingCertificateId: string\n): Promise<CertificateSigningInfo> {\n  const certificate = await getCertificateForSigningIdAsync(signingCertificateId);\n  return {\n    signingCertificateId,\n    codeSigningInfo: certificate.subject.getField('CN')?.value,\n    appleTeamName: certificate.subject.getField('O')?.value,\n    appleTeamId: certificate.subject.getField('OU')?.value,\n  };\n}\n\n/**\n * @param codeSigningInfo 'Apple Development: Evan Bacon (AA00AABB0A)'\n * @returns 'AA00AABB0A'\n */\nexport function extractSigningId(codeSigningInfo: string): string | null {\n  return codeSigningInfo.match(/.*\\(([a-zA-Z0-9]+)\\)/)?.[1] ?? null;\n}\n"],"mappings":"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"}