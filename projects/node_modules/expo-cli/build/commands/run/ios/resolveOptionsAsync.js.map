{"version":3,"file":"resolveOptionsAsync.js","names":["_configPlugins","data","require","_chalk","_interopRequireDefault","_glob","path","_interopRequireWildcard","_CommandError","_log","_prompts","_profileMethod","_resolvePortAsync","_resolveDeviceAsync","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ignoredPaths","findXcodeProjectPaths","projectRoot","extension","globSync","absolute","cwd","ignore","resolveXcodeProject","paths","length","name","isWorkspace","CommandError","isMac","process","platform","getDefaultUserTerminal","REACT_TERMINAL","TERM_PROGRAM","TERM","env","resolveNativeSchemeAsync","scheme","configuration","resolvedScheme","schemes","IOSConfig","BuildScheme","getRunnableSchemesFromXcodeproj","_schemes$find","resolvedSchemeName","selectAsync","message","choices","map","value","isApp","type","Target","TargetType","APPLICATION","osType","title","chalk","bold","gray","nonInteractiveHelp","join","find","Log","log","resolveOptionsAsync","options","_ref","_await$resolveNativeS","_options$bundler","xcodeProject","port","bundler","resolvePortAsync","reuseExistingPort","defaultPort","profileMethod","basename","extname","device","resolveDeviceAsync","isSimulator","deviceType","startsWith","shouldSkipInitialBundling","shouldStartBundler","buildCache","terminal"],"sources":["../../../../src/commands/run/ios/resolveOptionsAsync.ts"],"sourcesContent":["import { IOSConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport { sync as globSync } from 'glob';\nimport * as path from 'path';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\nimport { selectAsync } from '../../../utils/prompts';\nimport { profileMethod } from '../../utils/profileMethod';\nimport { resolvePortAsync } from '../utils/resolvePortAsync';\nimport * as XcodeBuild from './XcodeBuild';\nimport { resolveDeviceAsync } from './resolveDeviceAsync';\n\nexport type XcodeConfiguration = 'Debug' | 'Release';\n\nexport type Options = {\n  device?: string | boolean;\n  port?: number;\n  scheme?: string;\n  configuration?: XcodeConfiguration;\n  bundler?: boolean;\n  install?: boolean;\n  /** Should use derived data for builds. */\n  buildCache: boolean;\n};\n\nexport type ProjectInfo = {\n  isWorkspace: boolean;\n  name: string;\n};\n\nconst ignoredPaths = ['**/@(Carthage|Pods|vendor|node_modules)/**'];\n\nfunction findXcodeProjectPaths(\n  projectRoot: string,\n  extension: 'xcworkspace' | 'xcodeproj'\n): string[] {\n  return globSync(`ios/*.${extension}`, {\n    absolute: true,\n    cwd: projectRoot,\n    ignore: ignoredPaths,\n  });\n}\n\nfunction resolveXcodeProject(projectRoot: string): ProjectInfo {\n  let paths = findXcodeProjectPaths(projectRoot, 'xcworkspace');\n  if (paths.length) {\n    return {\n      // Use full path instead of relative project root so that warnings and errors contain full paths as well, this helps with filtering.\n      // Also helps keep things consistent in monorepos.\n      name: paths[0],\n      // name: path.relative(projectRoot, paths[0]),\n      isWorkspace: true,\n    };\n  }\n  paths = findXcodeProjectPaths(projectRoot, 'xcodeproj');\n  if (paths.length) {\n    return { name: paths[0], isWorkspace: false };\n  }\n  throw new CommandError(`Xcode project not found in project: ${projectRoot}`);\n}\n\nconst isMac = process.platform === 'darwin';\n\nfunction getDefaultUserTerminal(): string | undefined {\n  const { REACT_TERMINAL, TERM_PROGRAM, TERM } = process.env;\n\n  if (REACT_TERMINAL) {\n    return REACT_TERMINAL;\n  }\n\n  if (isMac) {\n    return TERM_PROGRAM;\n  }\n\n  return TERM;\n}\n\nasync function resolveNativeSchemeAsync(\n  projectRoot: string,\n  { scheme, configuration }: { scheme?: string | true; configuration?: XcodeConfiguration }\n): Promise<{ name: string; osType?: string } | null> {\n  let resolvedScheme: { name: string; osType?: string } | null = null;\n  // @ts-ignore\n  if (scheme === true) {\n    const schemes = IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj(projectRoot, {\n      configuration,\n    });\n    if (!schemes.length) {\n      throw new CommandError('No native iOS build schemes found');\n    }\n    resolvedScheme = schemes[0];\n    if (schemes.length > 1) {\n      const resolvedSchemeName = await selectAsync(\n        {\n          message: 'Select a scheme',\n          choices: schemes.map(value => {\n            const isApp =\n              value.type === IOSConfig.Target.TargetType.APPLICATION && value.osType === 'iOS';\n            return {\n              value: value.name,\n              title: isApp ? chalk.bold(value.name) + chalk.gray(' (app)') : value.name,\n            };\n          }),\n        },\n        {\n          nonInteractiveHelp: `--scheme: argument must be provided with a string in non-interactive mode. Valid choices are: ${schemes.join(\n            ', '\n          )}`,\n        }\n      );\n      resolvedScheme = schemes.find(({ name }) => resolvedSchemeName === name) ?? null;\n    } else {\n      Log.log(`Auto selecting only available scheme: ${resolvedScheme.name}`);\n    }\n  } else if (scheme) {\n    // Attempt to match the schemes up so we can open the correct simulator\n    const schemes = IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj(projectRoot, {\n      configuration,\n    });\n    resolvedScheme = schemes.find(({ name }) => name === scheme) || { name: scheme };\n  }\n\n  return resolvedScheme;\n}\n\nexport async function resolveOptionsAsync(\n  projectRoot: string,\n  options: Options\n): Promise<XcodeBuild.BuildProps> {\n  const xcodeProject = resolveXcodeProject(projectRoot);\n\n  let port = options.bundler\n    ? await resolvePortAsync(projectRoot, { reuseExistingPort: true, defaultPort: options.port })\n    : null;\n  // Skip bundling if the port is null\n  options.bundler = !!port;\n  if (!port) {\n    // any random number\n    port = 8081;\n  }\n\n  const resolvedScheme = (await resolveNativeSchemeAsync(projectRoot, options)) ??\n    profileMethod(IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj)(projectRoot, {\n      configuration: options.configuration,\n    })[0] ?? {\n      name: path.basename(xcodeProject.name, path.extname(xcodeProject.name)),\n    };\n\n  const device = await resolveDeviceAsync(options.device, { osType: resolvedScheme.osType });\n\n  const isSimulator =\n    !('deviceType' in device) ||\n    device.deviceType.startsWith('com.apple.CoreSimulator.SimDeviceType.');\n\n  const configuration = options.configuration || 'Debug';\n  // This optimization skips resetting the Metro cache needlessly.\n  // The cache is reset in `../node_modules/react-native/scripts/react-native-xcode.sh` when the\n  // project is running in Debug and built onto a physical device. It seems that this is done because\n  // the script is run from Xcode and unaware of the CLI instance.\n  const shouldSkipInitialBundling = configuration === 'Debug' && !isSimulator;\n  return {\n    projectRoot,\n    isSimulator,\n    xcodeProject,\n    device,\n    configuration: options.configuration || 'Debug',\n    shouldStartBundler: options.bundler ?? false,\n    shouldSkipInitialBundling,\n    port,\n    buildCache: options.buildCache,\n    terminal: getDefaultUserTerminal(),\n    scheme: resolvedScheme.name,\n  };\n}\n"],"mappings":"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"}