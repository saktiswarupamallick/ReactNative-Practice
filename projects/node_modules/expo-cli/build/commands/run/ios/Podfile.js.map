{"version":3,"file":"Podfile.js","names":["_config","data","require","_jsonFile","_interopRequireDefault","_chalk","_fsExtra","path","_interopRequireWildcard","_CommandError","_log","_updatePackageJson","_CreateApp","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","getTempPrebuildFolder","projectRoot","join","hasNewDependenciesSinceLastBuild","packageChecksums","tempDir","tempPkgJsonPath","fs","pathExistsSync","dependencies","devDependencies","JsonFile","read","hasNewDependencies","hasNewDevDependencies","createPackageChecksums","pkg","hashForDependencyMap","hasPackageJsonDependencyListChangedAsync","getPackageJson","packages","ensureFile","writeAsync","doesProjectUseCocoaPods","existsSync","isLockfileCreated","podfileLockPath","isPodFolderCreated","podFolderPath","maybePromptToSyncPodsAsync","installCocoaPodsAsync","AbortCommandError","promptToInstallPodsAsync","missingPods","length","Log","log","map","pod","chalk","bold","error","removeSync"],"sources":["../../../../src/commands/run/ios/Podfile.ts"],"sourcesContent":["import { getPackageJson, PackageJSONConfig } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport * as path from 'path';\n\nimport { AbortCommandError } from '../../../CommandError';\nimport Log from '../../../log';\nimport { hashForDependencyMap } from '../../eject/updatePackageJson';\nimport { installCocoaPodsAsync } from '../../utils/CreateApp';\n\nfunction getTempPrebuildFolder(projectRoot: string) {\n  return path.join(projectRoot, '.expo', 'prebuild');\n}\n\ntype PackageChecksums = {\n  dependencies: string;\n  devDependencies: string;\n};\n\nfunction hasNewDependenciesSinceLastBuild(projectRoot: string, packageChecksums: PackageChecksums) {\n  // TODO: Maybe comparing lock files would be better...\n  const tempDir = getTempPrebuildFolder(projectRoot);\n  const tempPkgJsonPath = path.join(tempDir, 'cached-packages.json');\n  if (!fs.pathExistsSync(tempPkgJsonPath)) {\n    return true;\n  }\n  const { dependencies, devDependencies } = JsonFile.read(tempPkgJsonPath);\n  // Only change the dependencies if the normalized hash changes, this helps to reduce meaningless changes.\n  const hasNewDependencies = packageChecksums.dependencies !== dependencies;\n  const hasNewDevDependencies = packageChecksums.devDependencies !== devDependencies;\n\n  return hasNewDependencies || hasNewDevDependencies;\n}\n\nfunction createPackageChecksums(pkg: PackageJSONConfig): PackageChecksums {\n  return {\n    dependencies: hashForDependencyMap(pkg.dependencies || {}),\n    devDependencies: hashForDependencyMap(pkg.devDependencies || {}),\n  };\n}\n\nexport async function hasPackageJsonDependencyListChangedAsync(projectRoot: string) {\n  const pkg = getPackageJson(projectRoot);\n\n  const packages = createPackageChecksums(pkg);\n  const hasNewDependencies = hasNewDependenciesSinceLastBuild(projectRoot, packages);\n\n  // Cache package.json\n  const tempDir = path.join(getTempPrebuildFolder(projectRoot), 'cached-packages.json');\n  await fs.ensureFile(tempDir);\n  await JsonFile.writeAsync(tempDir, packages);\n\n  return hasNewDependencies;\n}\n\nfunction doesProjectUseCocoaPods(projectRoot: string): boolean {\n  return fs.existsSync(path.join(projectRoot, 'ios', 'Podfile'));\n}\n\nfunction isLockfileCreated(projectRoot: string): boolean {\n  const podfileLockPath = path.join(projectRoot, 'ios', 'Podfile.lock');\n  return fs.existsSync(podfileLockPath);\n}\n\nfunction isPodFolderCreated(projectRoot: string): boolean {\n  const podFolderPath = path.join(projectRoot, 'ios', 'Pods');\n  return fs.existsSync(podFolderPath);\n}\n\n// TODO: Same process but with app.config changes + default plugins.\n// This will ensure the user is prompted for extra setup.\nexport default async function maybePromptToSyncPodsAsync(projectRoot: string) {\n  if (!doesProjectUseCocoaPods(projectRoot)) {\n    // Project does not use CocoaPods\n    return;\n  }\n  if (!isLockfileCreated(projectRoot) || !isPodFolderCreated(projectRoot)) {\n    if (!(await installCocoaPodsAsync(projectRoot))) {\n      throw new AbortCommandError();\n    }\n    return;\n  }\n\n  // Getting autolinked packages can be heavy, optimize around checking every time.\n  if (!(await hasPackageJsonDependencyListChangedAsync(projectRoot))) {\n    return;\n  }\n\n  await promptToInstallPodsAsync(projectRoot, []);\n}\n\nasync function promptToInstallPodsAsync(projectRoot: string, missingPods?: string[]) {\n  if (missingPods?.length) {\n    Log.log(\n      `Could not find the following native modules: ${missingPods\n        .map(pod => chalk.bold(pod))\n        .join(', ')}. Did you forget to run \"${chalk.bold('pod install')}\" ?`\n    );\n  }\n\n  try {\n    if (!(await installCocoaPodsAsync(projectRoot))) {\n      throw new AbortCommandError();\n    }\n  } catch (error: any) {\n    fs.removeSync(path.join(getTempPrebuildFolder(projectRoot), 'cached-packages.json'));\n    throw error;\n  }\n}\n"],"mappings":"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"}