{"version":3,"file":"developmentCodeSigning.js","names":["_configPlugins","data","require","_chalk","_interopRequireDefault","_commander","fs","_interopRequireWildcard","_xdl","_CommandError","_log","_prompts","_TerminalLink","Security","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","getLastDeveloperCodeSigningIdAsync","developmentCodeSigningId","UserSettings","readAsync","setLastDeveloperCodeSigningIdAsync","id","setAsync","catch","getCodeSigningInfoForPbxproj","projectRoot","project","IOSConfig","XcodeUtils","getPbxproj","targets","Target","findSignableTargets","signingInfo","nativeTargetId","nativeTarget","developmentTeams","provisioningProfiles","getBuildConfigurationsForListId","buildConfigurationList","filter","item","buildSettings","PRODUCT_NAME","forEach","DEVELOPMENT_TEAM","PROVISIONING_PROFILE","push","setAutoCodeSigningInfoForPbxproj","appleTeamId","quotedAppleTeamId","ensureQuotes","CODE_SIGN_IDENTITY","CODE_SIGN_STYLE","entries","getProjectSection","isNotComment","attributes","TargetAttributes","DevelopmentTeam","ProvisioningStyle","writeFileSync","filepath","writeSync","value","match","ensureDeviceIsCodeSignedForDeploymentAsync","allTargetsHaveTeams","values","reduce","prev","curr","length","teamList","concat","Log","log","chalk","dim","join","allTargetsHaveProfiles","assertInstalledAsync","ids","findIdentitiesAsync","selectCertificateSigningIdentityAsync","codeSigningInfo","sortDefaultIdToBeginningAsync","identities","lastSelected","iterations","signingCertificateId","shift","addNewLineIfNone","bold","learnMore","newLine","CommandError","program","nonInteractive","resolveCertificateSigningInfoAsync","preferred","resolveIdentitiesAsync","index","selectAsync","message","choices","map","i","format","title","appleTeamName","selected"],"sources":["../../../../src/commands/run/ios/developmentCodeSigning.ts"],"sourcesContent":["import { IOSConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport program from 'commander';\nimport * as fs from 'fs-extra';\nimport { UserSettings } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\nimport { selectAsync } from '../../../utils/prompts';\nimport { learnMore } from '../../utils/TerminalLink';\nimport * as Security from '../utils/Security';\n\nasync function getLastDeveloperCodeSigningIdAsync() {\n  const { developmentCodeSigningId } = await UserSettings.readAsync();\n  return developmentCodeSigningId;\n}\n\nasync function setLastDeveloperCodeSigningIdAsync(id: string) {\n  await UserSettings.setAsync('developmentCodeSigningId', id).catch(() => {});\n}\n\n/**\n * Find the development team and provisioning profile that's currently in use by the Xcode project.\n *\n * @param projectRoot\n * @returns\n */\nexport function getCodeSigningInfoForPbxproj(projectRoot: string) {\n  const project = IOSConfig.XcodeUtils.getPbxproj(projectRoot);\n  const targets = IOSConfig.Target.findSignableTargets(project);\n\n  const signingInfo: Record<\n    string,\n    { developmentTeams: string[]; provisioningProfiles: string[] }\n  > = {};\n  for (const [nativeTargetId, nativeTarget] of targets) {\n    const developmentTeams: string[] = [];\n    const provisioningProfiles: string[] = [];\n\n    IOSConfig.XcodeUtils.getBuildConfigurationsForListId(\n      project,\n      nativeTarget.buildConfigurationList\n    )\n      .filter(\n        ([, item]: IOSConfig.XcodeUtils.ConfigurationSectionEntry) =>\n          item.buildSettings.PRODUCT_NAME\n      )\n      .forEach(([, item]: IOSConfig.XcodeUtils.ConfigurationSectionEntry) => {\n        const { DEVELOPMENT_TEAM, PROVISIONING_PROFILE } = item.buildSettings;\n        if (\n          typeof DEVELOPMENT_TEAM === 'string' &&\n          // If the user selects \"Team: none\" in Xcode, it'll be an empty string.\n          !!DEVELOPMENT_TEAM &&\n          // xcode package sometimes reads an empty string as a quoted empty string.\n          DEVELOPMENT_TEAM !== '\"\"'\n        ) {\n          developmentTeams.push(DEVELOPMENT_TEAM);\n        }\n        if (typeof PROVISIONING_PROFILE === 'string' && !!PROVISIONING_PROFILE) {\n          provisioningProfiles.push(PROVISIONING_PROFILE);\n        }\n      });\n    signingInfo[nativeTargetId] = {\n      developmentTeams,\n      provisioningProfiles,\n    };\n  }\n\n  return signingInfo;\n}\n\n/**\n * Set the development team and configure the Xcode project for automatic code signing,\n * this helps us resolve the code signing on subsequent runs and emulates Xcode behavior.\n *\n * @param projectRoot\n * @param props.appleTeamId\n */\nfunction setAutoCodeSigningInfoForPbxproj(\n  projectRoot: string,\n  { appleTeamId }: { appleTeamId: string }\n): void {\n  const project = IOSConfig.XcodeUtils.getPbxproj(projectRoot);\n  const targets = IOSConfig.Target.findSignableTargets(project);\n\n  const quotedAppleTeamId = ensureQuotes(appleTeamId);\n\n  for (const [nativeTargetId, nativeTarget] of targets) {\n    IOSConfig.XcodeUtils.getBuildConfigurationsForListId(\n      project,\n      nativeTarget.buildConfigurationList\n    )\n      .filter(\n        ([, item]: IOSConfig.XcodeUtils.ConfigurationSectionEntry) =>\n          item.buildSettings.PRODUCT_NAME\n      )\n      .forEach(([, item]: IOSConfig.XcodeUtils.ConfigurationSectionEntry) => {\n        item.buildSettings.DEVELOPMENT_TEAM = quotedAppleTeamId;\n        item.buildSettings.CODE_SIGN_IDENTITY = '\"Apple Development\"';\n        item.buildSettings.CODE_SIGN_STYLE = 'Automatic';\n      });\n\n    Object.entries(IOSConfig.XcodeUtils.getProjectSection(project))\n      .filter(IOSConfig.XcodeUtils.isNotComment)\n      .forEach(([, item]: IOSConfig.XcodeUtils.ProjectSectionEntry) => {\n        if (!item.attributes.TargetAttributes[nativeTargetId]) {\n          item.attributes.TargetAttributes[nativeTargetId] = {};\n        }\n\n        item.attributes.TargetAttributes[nativeTargetId].DevelopmentTeam = quotedAppleTeamId;\n        item.attributes.TargetAttributes[nativeTargetId].ProvisioningStyle = 'Automatic';\n      });\n  }\n\n  fs.writeFileSync(project.filepath, project.writeSync());\n}\n\nconst ensureQuotes = (value: string) => {\n  if (!value.match(/^['\"]/)) {\n    return `\"${value}\"`;\n  }\n  return value;\n};\n\nexport async function ensureDeviceIsCodeSignedForDeploymentAsync(\n  projectRoot: string\n): Promise<string | null> {\n  // Check if the app already has a development team defined.\n  const signingInfo = getCodeSigningInfoForPbxproj(projectRoot);\n\n  const allTargetsHaveTeams = Object.values(signingInfo).reduce((prev, curr) => {\n    return prev && !!curr.developmentTeams.length;\n  }, true);\n\n  if (allTargetsHaveTeams) {\n    const teamList = Object.values(signingInfo).reduce<string[]>((prev, curr) => {\n      return prev.concat([curr.developmentTeams[0]]);\n    }, []);\n    Log.log(chalk.dim`\\u203A Auto signing app using team(s): ${teamList.join(', ')}`);\n    return null;\n  }\n\n  const allTargetsHaveProfiles = Object.values(signingInfo).reduce((prev, curr) => {\n    return prev && !!curr.provisioningProfiles.length;\n  }, true);\n  if (allTargetsHaveProfiles) {\n    // this indicates that the user has manual code signing setup (possibly for production).\n    return null;\n  }\n\n  // Only assert if the project needs to be signed.\n  await Security.assertInstalledAsync();\n\n  const ids = await Security.findIdentitiesAsync();\n\n  const id = await selectCertificateSigningIdentityAsync(ids);\n\n  Log.log(`\\u203A Signing and building iOS app with: ${id.codeSigningInfo}`);\n\n  setAutoCodeSigningInfoForPbxproj(projectRoot, {\n    appleTeamId: id.appleTeamId!,\n  });\n  return id.appleTeamId!;\n}\n\n/**\n * Sort the code signing items so the last selected item (user's default) is the first suggested.\n */\nasync function sortDefaultIdToBeginningAsync(\n  identities: Security.CertificateSigningInfo[]\n): Promise<[Security.CertificateSigningInfo[], string | undefined]> {\n  const lastSelected = await getLastDeveloperCodeSigningIdAsync();\n\n  if (lastSelected) {\n    let iterations = 0;\n    while (identities[0].signingCertificateId !== lastSelected && iterations < identities.length) {\n      identities.push(identities.shift()!);\n      iterations++;\n    }\n  }\n  return [identities, lastSelected];\n}\n\nasync function selectCertificateSigningIdentityAsync(ids: string[]) {\n  // The user has no valid code signing identities.\n  if (!ids.length) {\n    // TODO: We can probably do this too.\n    Log.addNewLineIfNone();\n    Log.log(\n      `\\u203A Your computer requires some additional setup before you can build onto physical iOS devices.\\n  ${chalk.bold(\n        learnMore('https://expo.fyi/setup-xcode-signing')\n      )}`\n    );\n    Log.newLine();\n    throw new CommandError('No code signing certificates are available to use.');\n  }\n\n  //  One ID available 🤝 Program is not interactive\n  //\n  //     using the the first available option\n  if (ids.length === 1 || program.nonInteractive) {\n    return Security.resolveCertificateSigningInfoAsync(ids[0]);\n  }\n\n  // Get identities and sort by the one that the user is most likely to choose.\n  const [identities, preferred] = await sortDefaultIdToBeginningAsync(\n    await Security.resolveIdentitiesAsync(ids)\n  );\n\n  const index = await selectAsync({\n    message: 'Development team for signing the app',\n    choices: identities.map((value, i) => {\n      const format =\n        value.signingCertificateId === preferred ? chalk.bold : (message: string) => message;\n      return {\n        // Formatted like: `650 Industries, Inc. (A1BCDEF234) - Apple Development: Evan Bacon (AA00AABB0A)`\n        title: format(\n          [value.appleTeamName, `(${value.appleTeamId}) -`, value.codeSigningInfo].join(' ')\n        ),\n        value: i,\n      };\n    }),\n  });\n\n  const selected = identities[index];\n\n  // Store the last used value and suggest it as the first value\n  // next time the user has to select a code signing identity.\n  await setLastDeveloperCodeSigningIdAsync(selected.signingCertificateId);\n\n  return selected;\n}\n"],"mappings":"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"}