{"version":3,"file":"UrlUtils.js","names":["_config","data","require","_assert","_interopRequireDefault","_os","_querystring","_resolveFrom","_url","_internal","obj","__esModule","default","constructBundleUrlAsync","projectRoot","opts","requestHostname","constructUrlAsync","constructDeepLinkAsync","devClient","ProjectSettings","readAsync","constructDevClientUrlAsync","constructManifestUrlAsync","_scheme","scheme","XDLError","protocol","resolveProtocol","urlType","manifestUrl","encodeURIComponent","constructHostUriAsync","urlString","urlObj","url","parse","slashes","format","constructLogUrlAsync","baseUrl","constructLoadingUrlAsync","platform","query","constructUrlWithExtensionAsync","entryPoint","ext","metroQueryOptions","defaultOpts","dev","minify","bundleUrl","hostType","mainModulePath","stripJSExtension","queryParams","constructBundleQueryParams","constructPublishUrlAsync","constructSourceMapUrlAsync","constructAssetsUrlAsync","constructDebuggerHostAsync","exp","getConfig","skipSDKVersionRequirement","constructBundleQueryParamsWithConfig","hot","strict","Versions","lteSdkVersion","includeAssetFileHashes","pluginModule","resolveFrom","assetPlugin","QueryString","stringify","constructWebAppUrlAsync","options","_options$hostType","packagerInfo","readPackagerInfoAsync","webpackServerPort","https","host","ip","address","assertValidOptions","undefined","includes","lanType","urlRandomness","Object","keys","forEach","key","ensureOptionsAsync","optionsWithDefaults","detach","sdkVersion","schemes","Array","isArray","filter","firstScheme","incomingOpts","isPackager","hostname","port","proxyURL","process","env","EXPO_PACKAGER_PROXY_URL","EXPO_MANIFEST_PROXY_URL","parsedProxyURL","packagerPort","expoServerPort","ConnectionStatus","isOffline","EXPO_PACKAGER_HOSTNAME","trim","REACT_NATIVE_PACKAGER_HOSTNAME","os","ngrokUrl","packagerNgrokUrl","expoServerNgrokUrl","ProjectUtils","logWarning","clearNotification","pnu","url_","joinURLComponents","createRedirectURL","assert","validPort","validProtocol","replace","isHttps","isURL","protocols","requireProtocol","URL","parsed","map","x","toLowerCase"],"sources":["../src/UrlUtils.ts"],"sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport assert from 'assert';\nimport os from 'os';\nimport QueryString from 'querystring';\nimport resolveFrom from 'resolve-from';\nimport url from 'url';\n\nimport {\n  ConnectionStatus,\n  ip,\n  ProjectSettings,\n  ProjectUtils,\n  Versions,\n  XDLError,\n} from './internal';\n\ninterface URLOptions extends ProjectSettings.ProjectSettings {\n  urlType: null | 'exp' | 'http' | 'no-protocol' | 'redirect' | 'custom';\n}\n\ninterface MetroQueryOptions {\n  dev?: boolean;\n  strict?: boolean;\n  minify?: boolean;\n}\n\nexport async function constructBundleUrlAsync(\n  projectRoot: string,\n  opts: Partial<URLOptions>,\n  requestHostname?: string\n) {\n  return await constructUrlAsync(projectRoot, opts, true, requestHostname);\n}\n\nexport async function constructDeepLinkAsync(\n  projectRoot: string,\n  opts?: Partial<URLOptions>,\n  requestHostname?: string\n): Promise<string> {\n  const { devClient } = await ProjectSettings.readAsync(projectRoot);\n  if (devClient) {\n    return constructDevClientUrlAsync(projectRoot, opts, requestHostname);\n  } else {\n    return constructManifestUrlAsync(projectRoot, opts, requestHostname);\n  }\n}\n\nexport async function constructManifestUrlAsync(\n  projectRoot: string,\n  opts?: Partial<URLOptions>,\n  requestHostname?: string\n) {\n  return await constructUrlAsync(projectRoot, opts ?? null, false, requestHostname);\n}\n\nexport async function constructDevClientUrlAsync(\n  projectRoot: string,\n  opts?: Partial<URLOptions>,\n  requestHostname?: string\n) {\n  let _scheme: string;\n  if (opts?.scheme) {\n    _scheme = opts?.scheme;\n  } else {\n    const { scheme } = await ProjectSettings.readAsync(projectRoot);\n    if (!scheme || typeof scheme !== 'string') {\n      throw new XDLError('NO_DEV_CLIENT_SCHEME', 'No scheme specified for development client');\n    }\n    _scheme = scheme;\n  }\n  const protocol = resolveProtocol(projectRoot, { scheme: _scheme, urlType: 'custom' });\n  const manifestUrl = await constructManifestUrlAsync(\n    projectRoot,\n    { ...opts, urlType: 'http' },\n    requestHostname\n  );\n  return `${protocol}://expo-development-client/?url=${encodeURIComponent(manifestUrl)}`;\n}\n\n// gets the base manifest URL and removes the scheme\nexport async function constructHostUriAsync(\n  projectRoot: string,\n  requestHostname?: string\n): Promise<string> {\n  const urlString = await constructUrlAsync(projectRoot, null, false, requestHostname);\n  // we need to use node's legacy urlObject api since the newer one doesn't like empty protocols\n  const urlObj = url.parse(urlString);\n  urlObj.protocol = '';\n  urlObj.slashes = false;\n  return url.format(urlObj);\n}\n\nexport async function constructLogUrlAsync(\n  projectRoot: string,\n  requestHostname?: string\n): Promise<string> {\n  const baseUrl = await constructUrlAsync(projectRoot, { urlType: 'http' }, false, requestHostname);\n  return `${baseUrl}/logs`;\n}\n\nexport async function constructLoadingUrlAsync(\n  projectRoot: string,\n  platform: 'ios' | 'android' | null,\n  requestHostname?: string\n): Promise<string> {\n  const baseUrl = await constructUrlAsync(projectRoot, { urlType: 'http' }, false, requestHostname);\n  const query = platform ? `?platform=${platform}` : '';\n  return `${baseUrl}/_expo/loading${query}`;\n}\n\nexport async function constructUrlWithExtensionAsync(\n  projectRoot: string,\n  entryPoint: string,\n  ext: string,\n  requestHostname?: string,\n  metroQueryOptions?: MetroQueryOptions\n) {\n  const defaultOpts = {\n    dev: false,\n    minify: true,\n  };\n  metroQueryOptions = metroQueryOptions || defaultOpts;\n  let bundleUrl = await constructBundleUrlAsync(\n    projectRoot,\n    {\n      hostType: 'localhost',\n      urlType: 'http',\n    },\n    requestHostname\n  );\n\n  const mainModulePath = stripJSExtension(entryPoint);\n  bundleUrl += `/${mainModulePath}.${ext}`;\n\n  const queryParams = constructBundleQueryParams(projectRoot, metroQueryOptions);\n  return `${bundleUrl}?${queryParams}`;\n}\n\nexport async function constructPublishUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string,\n  metroQueryOptions?: MetroQueryOptions\n): Promise<string> {\n  return await constructUrlWithExtensionAsync(\n    projectRoot,\n    entryPoint,\n    'bundle',\n    requestHostname,\n    metroQueryOptions\n  );\n}\n\nexport async function constructSourceMapUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n): Promise<string> {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'map', requestHostname);\n}\n\nexport async function constructAssetsUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n): Promise<string> {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'assets', requestHostname);\n}\n\nexport async function constructDebuggerHostAsync(\n  projectRoot: string,\n  requestHostname?: string\n): Promise<string> {\n  return await constructUrlAsync(\n    projectRoot,\n    {\n      urlType: 'no-protocol',\n    },\n    true,\n    requestHostname\n  );\n}\n\nexport function constructBundleQueryParams(projectRoot: string, opts: MetroQueryOptions): string {\n  // No SDK Version will assume the latest requirements\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  return constructBundleQueryParamsWithConfig(projectRoot, opts, exp);\n}\n\nexport function constructBundleQueryParamsWithConfig(\n  projectRoot: string,\n  opts: MetroQueryOptions,\n  exp: Pick<ExpoConfig, 'sdkVersion'>\n): string {\n  const queryParams: Record<string, boolean | string> = {\n    dev: !!opts.dev,\n    hot: false,\n  };\n\n  if ('strict' in opts) {\n    queryParams.strict = !!opts.strict;\n  }\n\n  if ('minify' in opts) {\n    // TODO: Maybe default this to true if dev is false\n    queryParams.minify = !!opts.minify;\n  }\n\n  // TODO: Remove this ...\n\n  // SDK11 to SDK32 require us to inject hashAssetFiles through the params, but this is not\n  // needed with SDK33+\n  if (Versions.lteSdkVersion(exp, '10.0.0')) {\n    // SDK <=10\n    // Only sdk-10.1.0+ supports the assetPlugin parameter. We use only the\n    // major version in the sdkVersion field, so check for 11.0.0 to be sure.\n    queryParams.includeAssetFileHashes = true;\n  } else if (Versions.lteSdkVersion(exp, '32.0.0')) {\n    // SDK 11-32\n    // Use an absolute path here so that we can not worry about symlinks/relative requires\n    const pluginModule = resolveFrom(projectRoot, 'expo/tools/hashAssetFiles');\n    queryParams.assetPlugin = encodeURIComponent(pluginModule);\n  }\n  // Special requirements aren't needed after SDK 33 (Jun 5 2019)\n\n  return QueryString.stringify(queryParams);\n}\n\nexport async function constructWebAppUrlAsync(\n  projectRoot: string,\n  options: { hostType?: 'localhost' | 'lan' | 'tunnel' } = {}\n): Promise<string | null> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.webpackServerPort) {\n    return null;\n  }\n\n  const { https, hostType } = await ProjectSettings.readAsync(projectRoot);\n  const host = (options.hostType ?? hostType) === 'localhost' ? 'localhost' : ip.address();\n\n  let urlType = 'http';\n  if (https === true) {\n    urlType = 'https';\n  }\n\n  return `${urlType}://${host}:${packagerInfo.webpackServerPort}`;\n}\n\nfunction assertValidOptions(opts: Partial<URLOptions>): URLOptions {\n  if (opts.devClient && typeof opts.devClient !== 'boolean') {\n    throw new XDLError('INVALID_OPTIONS', `\"devClient\" must be a boolean if specified`);\n  }\n\n  if (opts.scheme && typeof opts.scheme !== 'string') {\n    throw new XDLError('INVALID_OPTIONS', `\"scheme\" must be a string if specified`);\n  }\n\n  if (![undefined, null, 'exp', 'http', 'redirect', 'no-protocol'].includes(opts.urlType)) {\n    throw new XDLError(\n      'INVALID_OPTIONS',\n      `\"urlType\" must be one of: \"exp\", \"http\", \"redirect\", \"no-protocol\" if specified`\n    );\n  }\n\n  if (![undefined, 'ip', 'hostname'].includes(opts.lanType)) {\n    throw new XDLError(\n      'INVALID_OPTIONS',\n      `\"lanType\" must be one of: \"ip\", \"hostname\" if specified`\n    );\n  }\n\n  if (![undefined, 'localhost', 'lan', 'tunnel'].includes(opts.hostType)) {\n    throw new XDLError(\n      'INVALID_OPTIONS',\n      `\"hostType\" must be one of: \"localhost\", \"lan\", \"tunnel\" if specified`\n    );\n  }\n\n  if (opts.dev && typeof opts.dev !== 'boolean') {\n    throw new XDLError('INVALID_OPTIONS', `\"dev\" must be a boolean if specified`);\n  }\n\n  if (opts.strict && typeof opts.strict !== 'boolean') {\n    throw new XDLError('INVALID_OPTIONS', `\"strict\" must be a boolean if specified`);\n  }\n\n  if (opts.minify && typeof opts.minify !== 'boolean') {\n    throw new XDLError('INVALID_OPTIONS', `\"minify\" must be a boolean if specified`);\n  }\n\n  if (opts.https && typeof opts.https !== 'boolean') {\n    throw new XDLError('INVALID_OPTIONS', `\"https\" must be a boolean if specified`);\n  }\n\n  if (opts.urlRandomness && typeof opts.urlRandomness !== 'string') {\n    throw new XDLError('INVALID_OPTIONS', `\"urlRandomness\" must be a string if specified`);\n  }\n\n  Object.keys(opts).forEach(key => {\n    if (\n      ![\n        'devClient',\n        'scheme',\n        'urlType',\n        'lanType',\n        'hostType',\n        'dev',\n        'strict',\n        'minify',\n        'https',\n        'urlRandomness',\n      ].includes(key)\n    ) {\n      throw new XDLError('INVALID_OPTIONS', `\"${key}\" is not a valid option`);\n    }\n  });\n\n  return opts as URLOptions;\n}\n\nasync function ensureOptionsAsync(\n  projectRoot: string,\n  opts: Partial<URLOptions> | null\n): Promise<URLOptions> {\n  if (opts) {\n    assertValidOptions(opts);\n  }\n\n  const defaultOpts = await ProjectSettings.readAsync(projectRoot);\n  if (!opts) {\n    return { urlType: null, ...defaultOpts };\n  }\n  const optionsWithDefaults = { ...defaultOpts, ...opts };\n  return assertValidOptions(optionsWithDefaults);\n}\n\nfunction resolveProtocol(\n  projectRoot: string,\n  { urlType, ...options }: Pick<URLOptions, 'urlType' | 'scheme'>\n): string | null {\n  if (urlType === 'http') {\n    return 'http';\n  } else if (urlType === 'no-protocol') {\n    return null;\n  } else if (urlType === 'custom') {\n    return options.scheme;\n  }\n  let protocol = 'exp';\n\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  // We only use these values from the config\n  const { scheme, detach, sdkVersion } = exp;\n\n  if (detach) {\n    // Normalize schemes and filter invalid schemes.\n    const schemes = (Array.isArray(scheme) ? scheme : [scheme]).filter(\n      (scheme: any) => typeof scheme === 'string' && !!scheme\n    );\n    // Get the first valid scheme.\n    const firstScheme = schemes[0];\n    if (firstScheme && !Versions.lteSdkVersion({ sdkVersion }, '26.0.0')) {\n      protocol = firstScheme;\n    } else if (detach.scheme) {\n      // must keep this fallback in place for older projects\n      // and those detached with an older version of xdl\n      protocol = detach.scheme;\n    }\n  }\n\n  return protocol;\n}\n\nexport async function constructUrlAsync(\n  projectRoot: string,\n  incomingOpts: Partial<URLOptions> | null,\n  isPackager: boolean,\n  requestHostname?: string\n): Promise<string> {\n  const opts = await ensureOptionsAsync(projectRoot, incomingOpts);\n\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n\n  let protocol = resolveProtocol(projectRoot, opts);\n\n  let hostname;\n  let port;\n\n  const proxyURL = isPackager\n    ? process.env.EXPO_PACKAGER_PROXY_URL\n    : process.env.EXPO_MANIFEST_PROXY_URL;\n  if (proxyURL) {\n    const parsedProxyURL = url.parse(proxyURL);\n    hostname = parsedProxyURL.hostname;\n    port = parsedProxyURL.port;\n    if (parsedProxyURL.protocol === 'https:') {\n      if (protocol === 'http') {\n        protocol = 'https';\n      }\n      if (!port) {\n        port = '443';\n      }\n    }\n  } else if (opts.hostType === 'localhost' || requestHostname === 'localhost') {\n    hostname = '127.0.0.1';\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else if (opts.hostType === 'lan' || ConnectionStatus.isOffline()) {\n    if (process.env.EXPO_PACKAGER_HOSTNAME) {\n      hostname = process.env.EXPO_PACKAGER_HOSTNAME.trim();\n    } else if (process.env.REACT_NATIVE_PACKAGER_HOSTNAME) {\n      hostname = process.env.REACT_NATIVE_PACKAGER_HOSTNAME.trim();\n    } else if (opts.lanType === 'ip') {\n      if (requestHostname) {\n        hostname = requestHostname;\n      } else {\n        hostname = ip.address();\n      }\n    } else {\n      // Some old versions of OSX work with hostname but not local ip address.\n      hostname = os.hostname();\n    }\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else {\n    const ngrokUrl = isPackager ? packagerInfo.packagerNgrokUrl : packagerInfo.expoServerNgrokUrl;\n    if (!ngrokUrl || typeof ngrokUrl !== 'string') {\n      // TODO: if you start with --tunnel flag then this warning will always\n      // show up right before the tunnel starts...\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        'Tunnel URL not found (it might not be ready yet), falling back to LAN URL.',\n        'tunnel-url-not-found'\n      );\n\n      return constructUrlAsync(\n        projectRoot,\n        { ...opts, hostType: 'lan' },\n        isPackager,\n        requestHostname\n      );\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'tunnel-url-not-found');\n      const pnu = url.parse(ngrokUrl);\n      hostname = pnu.hostname;\n      port = pnu.port;\n    }\n  }\n\n  const url_ = joinURLComponents({ protocol, hostname, port });\n\n  if (opts.urlType === 'redirect') {\n    return createRedirectURL(url_);\n  }\n\n  return url_;\n}\n\nfunction createRedirectURL(url: string): string {\n  return `https://exp.host/--/to-exp/${encodeURIComponent(url)}`;\n}\n\nfunction joinURLComponents({\n  protocol,\n  hostname,\n  port,\n}: {\n  protocol?: string | null;\n  hostname?: string | null;\n  port?: string | number | null;\n}): string {\n  assert(hostname, 'hostname cannot be inferred.');\n  // Android HMR breaks without this port 80.\n  // This is because Android React Native WebSocket implementation is not spec compliant and fails without a port:\n  // `E unknown:ReactNative: java.lang.IllegalArgumentException: Invalid URL port: \"-1\"`\n  // Invoked first in `metro-runtime/src/modules/HMRClient.js`\n  const validPort = port ?? '80';\n  const validProtocol = protocol ? `${protocol}://` : '';\n\n  return `${validProtocol}${hostname}:${validPort}`;\n}\n\nexport function stripJSExtension(entryPoint: string): string {\n  return entryPoint.replace(/\\.js$/, '');\n}\n\nexport function isHttps(urlString: string): boolean {\n  return isURL(urlString, { protocols: ['https'] });\n}\n\nexport function isURL(\n  urlString: string,\n  { protocols, requireProtocol }: { protocols?: string[]; requireProtocol?: boolean }\n) {\n  try {\n    // eslint-disable-next-line\n    new url.URL(urlString);\n    const parsed = url.parse(urlString);\n    if (!parsed.protocol && !requireProtocol) {\n      return true;\n    }\n    return protocols\n      ? parsed.protocol\n        ? protocols.map(x => `${x.toLowerCase()}:`).includes(parsed.protocol)\n        : false\n      : true;\n  } catch {\n    return false;\n  }\n}\n"],"mappings":"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"}