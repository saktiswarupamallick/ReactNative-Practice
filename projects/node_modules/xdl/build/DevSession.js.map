{"version":3,"file":"DevSession.js","names":["_os","data","_interopRequireDefault","require","_url","_internal","obj","__esModule","default","UPDATE_FREQUENCY_SECS","keepUpdating","startSession","projectRoot","exp","platform","forceUpdate","ConnectionStatus","isOffline","authSession","UserManager","getSessionAsync","devices","ProjectSettings","getDevicesInfoAsync","length","url","UrlUtils","constructDeepLinkAsync","constructWebAppUrlAsync","Error","queryString","searchParams","URLSearchParams","forEach","device","append","installationId","toString","apiClient","ApiV2Client","clientForUser","postAsync","session","description","name","os","hostname","config","slug","primaryColor","source","e","logger","global","debug","setTimeout","stopSession"],"sources":["../src/DevSession.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport os from 'os';\nimport { URLSearchParams } from 'url';\n\nimport {\n  ApiV2 as ApiV2Client,\n  ConnectionStatus,\n  Logger as logger,\n  ProjectSettings,\n  UrlUtils,\n  UserManager,\n} from './internal';\n\nconst UPDATE_FREQUENCY_SECS = 20;\n\nlet keepUpdating = true;\n\n// TODO notify www when a project is started, and every N seconds afterwards\nexport async function startSession(\n  projectRoot: string,\n  exp: Pick<ExpoConfig, 'name' | 'description' | 'slug' | 'primaryColor'>,\n  platform: 'native' | 'web',\n  forceUpdate: boolean = false\n): Promise<void> {\n  if (forceUpdate) {\n    keepUpdating = true;\n  }\n\n  if (!ConnectionStatus.isOffline() && keepUpdating) {\n    const authSession = await UserManager.getSessionAsync();\n    const { devices } = await ProjectSettings.getDevicesInfoAsync(projectRoot);\n\n    if (!authSession && !devices?.length) {\n      // NOTE(brentvatne) let's just bail out in this case for now\n      // throw new Error('development sessions can only be initiated for logged in users or with a device ID');\n      return;\n    }\n\n    try {\n      let url;\n      if (platform === 'native') {\n        url = await UrlUtils.constructDeepLinkAsync(projectRoot);\n      } else if (platform === 'web') {\n        url = await UrlUtils.constructWebAppUrlAsync(projectRoot);\n      } else {\n        throw new Error(`Unsupported platform: ${platform}`);\n      }\n\n      let queryString = '';\n      if (devices) {\n        const searchParams = new URLSearchParams();\n        devices.forEach(device => {\n          searchParams.append('deviceId', device.installationId);\n        });\n        queryString = `?${searchParams.toString()}`;\n      }\n\n      const apiClient = ApiV2Client.clientForUser(authSession);\n      await apiClient.postAsync(`development-sessions/notify-alive${queryString}`, {\n        data: {\n          session: {\n            description: `${exp.name} on ${os.hostname()}`,\n            hostname: os.hostname(),\n            platform,\n            config: {\n              // TODO: if icons are specified, upload a url for them too so people can distinguish\n              description: exp.description,\n              name: exp.name,\n              slug: exp.slug,\n              primaryColor: exp.primaryColor,\n            },\n            url,\n            source: 'desktop',\n          },\n        },\n      });\n    } catch (e: any) {\n      logger.global.debug(e, `Error updating dev session: ${e}`);\n    }\n\n    setTimeout(() => startSession(projectRoot, exp, platform), UPDATE_FREQUENCY_SECS * 1000);\n  }\n}\n\nexport function stopSession() {\n  keepUpdating = false;\n}\n"],"mappings":"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"}