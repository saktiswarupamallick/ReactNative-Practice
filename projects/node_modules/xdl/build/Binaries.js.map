{"version":3,"file":"Binaries.js","names":["_fsExtra","data","_interopRequireDefault","require","_hasbin","_path","_internal","obj","__esModule","default","OSX_SOURCE_PATH","path","join","__dirname","exports","_hasbinAsync","name","Promise","resolve","reject","hasbin","result","getBinariesPath","process","platform","XDLError","addToPathAsync","ignoreBundledBinaries","UserSettings","getAsync","includes","binariesPath","_prependToPath","newPath","currentPath","env","PATH","length","delimiter","writePathToUserSettingsAsync","setAsync","pathFile","dotExpoHomeDirectory","fs","writeFile","_isDirectory","dir","statSync","isDirectory","isXcodeInstalled"],"sources":["../src/Binaries.ts"],"sourcesContent":["import fs from 'fs-extra';\nimport hasbin from 'hasbin';\nimport path from 'path';\n\nimport { UserSettings, XDLError } from './internal';\n\nexport const OSX_SOURCE_PATH = path.join(__dirname, '..', 'binaries', 'osx');\n\nfunction _hasbinAsync(name: string) {\n  return new Promise((resolve, reject) => {\n    hasbin(name, result => {\n      resolve(result);\n    });\n  });\n}\n\nexport function getBinariesPath(): string {\n  if (process.platform === 'darwin') {\n    return path.join(__dirname, '..', 'binaries', 'osx');\n  } else if (process.platform === 'win32') {\n    return path.join(__dirname, '..', 'binaries', 'windows');\n  } else if (process.platform === 'linux') {\n    return path.join(__dirname, '..', 'binaries', 'linux');\n  } else {\n    throw new XDLError('PLATFORM_NOT_SUPPORTED', 'Platform not supported.');\n  }\n}\n\nexport async function addToPathAsync(name: string): Promise<void> {\n  if (await _hasbinAsync(name)) {\n    return;\n  }\n\n  // Users can set {ignoreBundledBinaries: [\"watchman\"]} to tell us to never use our version\n  const ignoreBundledBinaries = await UserSettings.getAsync(\n    'ignoreBundledBinaries',\n    [] as string[]\n  );\n  if (ignoreBundledBinaries.includes(name)) {\n    return;\n  }\n\n  const binariesPath = path.join(getBinariesPath(), name);\n  _prependToPath(binariesPath);\n}\n\nfunction _prependToPath(newPath: string) {\n  let currentPath = process.env.PATH ? process.env.PATH : '';\n  if (currentPath.length > 0) {\n    const delimiter = process.platform === 'win32' ? ';' : ':';\n    currentPath = `${delimiter}${currentPath}`;\n  }\n\n  process.env.PATH = `${newPath}${currentPath}`;\n}\n\nexport async function writePathToUserSettingsAsync(): Promise<void> {\n  await UserSettings.setAsync('PATH', process.env.PATH);\n\n  // Used in detach app\n  const pathFile = path.join(UserSettings.dotExpoHomeDirectory(), 'PATH');\n  await fs.writeFile(pathFile, process.env.PATH);\n}\n\nfunction _isDirectory(dir: string) {\n  try {\n    if (fs.statSync(dir).isDirectory()) {\n      return true;\n    }\n\n    return false;\n  } catch {\n    return false;\n  }\n}\n\nexport function isXcodeInstalled(): boolean {\n  return _isDirectory('/Applications/Xcode.app/');\n}\n"],"mappings":"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"}