{"version":3,"file":"SimControlLogs.js","names":["_chalk","data","_interopRequireDefault","require","_child_process","_path","_wrapAnsi","_internal","obj","__esModule","default","forks","parseMessageJson","stringData","toString","JSON","parse","Logger","global","debug","isNetworkLog","simLog","_simLog$source","subsystem","category","source","image","isReactLog","_simLog$source2","file","isCoreTelephonyLog","isWebKitLog","isRunningBoardServicesLog","formatMessage","_simLog$source$image","_simLog$source3","chalk","gray","message","eventMessage","wrapAnsi","process","stdout","columns","onMessage","hasLogged","messageType","error","_simLog$source4","includes","info","isStreamingLogs","udid","streamLogs","pid","childProcess","spawn","on","ensureExitHooksInstalled","detachStream","killProcess","hasInstalledExitHooks","killSignals","signal","Promise","all","Object","keys","map","resolve","kill","getImageNameFromBundleIdentifierAsync","bundleIdentifier","containerPath","SimControl","getContainerPathAsync","getImageNameFromContainerPath","binaryPath","path","basename","split"],"sources":["../src/SimControlLogs.ts"],"sourcesContent":["import chalk from 'chalk';\nimport { ChildProcessWithoutNullStreams, spawn } from 'child_process';\nimport path from 'path';\nimport wrapAnsi from 'wrap-ansi';\n\nimport { Logger, SimControl } from './internal';\n\nconst forks: Record<string, ChildProcessWithoutNullStreams> = {};\n\nexport type SimControlLog = {\n  /**\n   * 258753568922927108\n   */\n  traceID: number;\n  /**\n   *\n   * \"Connection 1: done\",\n   */\n  eventMessage: string;\n  /**\n   * \"logEvent\" | \"activityCreateEvent\",\n   */\n  eventType: 'logEvent' | 'activityCreateEvent';\n  source: null | {\n    /**\n     * 'RCTDefaultLogFunction_block_invoke' | '__TCC_CRASHING_DUE_TO_PRIVACY_VIOLATION__'\n     */\n    symbol: string;\n    line: number;\n    /**\n     * 'TCC' | 'Security' | 'CFNetwork' | 'libnetwork.dylib' | 'myapp'\n     *\n     * TCC is apple sys, it means \"Transparency, Consent, and Control\"\n     */\n    image: string;\n    /**\n     * 'RCTLog.mm' | ''\n     */\n    file: string;\n  };\n  /**\n   * \"Connection %llu: done\"\n   */\n  formatString: string;\n  /**\n   * 0\n   */\n  activityIdentifier: number;\n  subsystem:\n    | ''\n    | 'com.apple.network'\n    | 'com.facebook.react.log'\n    | 'com.apple.TCC'\n    | 'com.apple.CoreTelephony'\n    | 'com.apple.WebKit'\n    | 'com.apple.runningboard'\n    | string;\n  category: '' | 'access' | 'connection' | 'plugin';\n  /**\n   * \"2021-03-15 15:36:28.004331-0700\"\n   */\n  timestamp: string;\n  /**\n   * 706567072091713\n   */\n  machTimestamp: number;\n  /**\n   * \"Default\"\n   */\n  messageType: 'Default' | 'Error';\n  /**\n   * 15192\n   */\n  processID: number;\n};\n\nfunction parseMessageJson(data: Buffer) {\n  const stringData = data.toString();\n  try {\n    return JSON.parse(stringData) as SimControlLog;\n  } catch {\n    Logger.global.debug('Failed to parse simctl JSON message:\\n' + stringData);\n  }\n  return null;\n}\n\n// There are a lot of networking logs in RN that aren't relevant to the user.\nfunction isNetworkLog(simLog: SimControlLog): boolean {\n  return (\n    simLog.subsystem === 'com.apple.network' ||\n    simLog.category === 'connection' ||\n    simLog.source?.image === 'CFNetwork'\n  );\n}\n\nfunction isReactLog(simLog: SimControlLog): boolean {\n  return simLog.subsystem === 'com.facebook.react.log' && simLog.source?.file === 'RCTLog.mm';\n}\n\n// It's not clear what these are but they aren't very useful.\n// (The connection to service on pid 0 named com.apple.commcenter.coretelephony.xpc was invalidated)\n// We can add them later if need.\nfunction isCoreTelephonyLog(simLog: SimControlLog): boolean {\n  // [CoreTelephony] Updating selectors failed with: Error Domain=NSCocoaErrorDomain Code=4099\n  // \"The connection to service on pid 0 named com.apple.commcenter.coretelephony.xpc was invalidated.\" UserInfo={NSDebugDescription=The connection to service on pid 0 named com.apple.commcenter.coretelephony.xpc was invalidated.}\n  return simLog.subsystem === 'com.apple.CoreTelephony';\n}\n\n// https://stackoverflow.com/a/65313219/4047926\nfunction isWebKitLog(simLog: SimControlLog): boolean {\n  // [WebKit] 0x1143ca500 - ProcessAssertion: Failed to acquire RBS Background assertion 'WebProcess Background Assertion' for process with PID 27084, error: Error Domain=RBSAssertionErrorDomain Code=3 \"Target is not running or required target\n  // entitlement is missing\" UserInfo={RBSAssertionAttribute=<RBSDomainAttribute| domain:\"com.apple.webkit\" name:\"Background\" sourceEnvironment:\"(null)\">, NSLocalizedFailureReason=Target is not running or required target entitlement is missing}\n  return simLog.subsystem === 'com.apple.WebKit';\n}\n\n// Similar to WebKit logs\nfunction isRunningBoardServicesLog(simLog: SimControlLog): boolean {\n  // [RunningBoardServices] Error acquiring assertion: <Error Domain=RBSAssertionErrorDomain Code=3 \"Target is not running or required target entitlement is missing\" UserInfo={RBSAssertionAttribute=<RBSDomainAttribute| domain:\"com.apple.webkit\"\n  // name:\"Background\" sourceEnvironment:\"(null)\">, NSLocalizedFailureReason=Target is not running or required target entitlement is missing}>\n  return simLog.subsystem === 'com.apple.runningboard';\n}\n\nfunction formatMessage(simLog: SimControlLog): string {\n  // TODO: Maybe change \"TCC\" to \"Consent\" or \"System\".\n  const category = chalk.gray(`[${simLog.source?.image ?? simLog.subsystem}]`);\n  const message = simLog.eventMessage;\n  return wrapAnsi(category + ' ' + message, process.stdout.columns || 80);\n}\n\nexport function onMessage(simLog: SimControlLog) {\n  let hasLogged = false;\n\n  if (simLog.messageType === 'Error') {\n    if (\n      // Hide all networking errors which are mostly useless.\n      !isNetworkLog(simLog) &&\n      // Showing React errors will result in duplicate messages.\n      !isReactLog(simLog) &&\n      !isCoreTelephonyLog(simLog) &&\n      !isWebKitLog(simLog) &&\n      !isRunningBoardServicesLog(simLog)\n    ) {\n      hasLogged = true;\n      // Sim: This app has crashed because it attempted to access privacy-sensitive data without a usage description.  The app's Info.plist must contain an NSCameraUsageDescription key with a string value explaining to the user how the app uses this data.\n      Logger.global.error(formatMessage(simLog));\n    }\n  } else if (simLog.eventMessage) {\n    // If the source has a file (i.e. not a system log).\n    if (\n      simLog.source?.file ||\n      simLog.eventMessage.includes('Terminating app due to uncaught exception')\n    ) {\n      hasLogged = true;\n      Logger.global.info(formatMessage(simLog));\n    }\n  }\n\n  if (!hasLogged) {\n    Logger.global.debug(formatMessage(simLog));\n  } else {\n    // console.log('DATA:', JSON.stringify(simLog));\n  }\n}\n\nexport function isStreamingLogs(udid: string): boolean {\n  return !!forks[udid];\n}\n\n// The primary purpose of this module is to surface logs related to fatal app crashes.\n// Everything else should come through the native React logger.\nexport function streamLogs({ pid, udid }: { pid: string; udid: string }): void {\n  // Prevent adding a duplicate listener.\n  // This only works because our current usage of SimControlLogs only allows for one possible `pid` to be used.\n  // If in the future, you can attach logs to two different apps from the same process, then this will need to be changed.\n  if (forks[udid]) {\n    return;\n  }\n\n  // xcrun simctl spawn booted log stream --process --style json\n  const childProcess = spawn('xcrun', [\n    'simctl',\n    'spawn',\n    udid,\n    'log',\n    'stream',\n    '--process',\n    pid,\n    // ndjson provides a better format than json.\n    '--style',\n    'ndjson',\n    // Provide the source so we can filter logs better\n    '--source',\n    // log, activity, trace -- activity was related to layouts, trace didn't work, so that leaves log.\n    // Passing nothing combines all three, but we don't use activity.\n    '--type',\n    'log',\n    // backtrace doesn't seem very useful in basic cases.\n    // TODO: Maybe we can format as a stack trace for native errors.\n    '--no-backtrace',\n  ]);\n\n  childProcess.stdout.on('data', (data: Buffer) => {\n    const simLog = parseMessageJson(data);\n    if (!simLog) {\n      return;\n    }\n\n    onMessage(simLog);\n  });\n\n  childProcess.on('error', ({ message }) => {\n    Logger.global.debug('[simctl error]:', message);\n  });\n\n  forks[udid] = childProcess;\n  // Ensure the process is removed.\n  ensureExitHooksInstalled();\n}\n\nexport async function detachStream(udid: string) {\n  if (forks[udid]) {\n    await killProcess(forks[udid]);\n    delete forks[udid];\n  }\n}\n\nlet hasInstalledExitHooks = false;\n\nfunction ensureExitHooksInstalled(): void {\n  if (hasInstalledExitHooks) return;\n  hasInstalledExitHooks = true;\n\n  const killSignals: ['SIGINT', 'SIGTERM'] = ['SIGINT', 'SIGTERM'];\n  for (const signal of killSignals) {\n    process.on(signal, async () => {\n      await Promise.all(Object.keys(forks).map(udid => detachStream(udid)));\n    });\n  }\n}\n\nasync function killProcess(childProcess: ChildProcessWithoutNullStreams): Promise<void> {\n  if (childProcess) {\n    return new Promise<void>(resolve => {\n      childProcess.on('close', resolve);\n      childProcess.kill();\n    });\n  }\n}\n\n/**\n *\n * @param udid\n * @param bundleIdentifier\n * @returns Image name like `Exponent` and `null` when the app is not installed on the provided simulator.\n */\nexport async function getImageNameFromBundleIdentifierAsync(\n  udid: string,\n  bundleIdentifier: string\n): Promise<string | null> {\n  const containerPath = await SimControl.getContainerPathAsync({ udid, bundleIdentifier });\n\n  if (containerPath) {\n    return getImageNameFromContainerPath(containerPath);\n  }\n  return null;\n}\n\nexport function getImageNameFromContainerPath(binaryPath: string): string {\n  return path.basename(binaryPath).split('.')[0];\n}\n"],"mappings":"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"}