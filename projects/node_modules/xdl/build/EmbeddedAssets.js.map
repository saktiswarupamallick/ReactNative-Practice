{"version":3,"file":"EmbeddedAssets.js","names":["_config","data","require","_configPlugins","_plist","_interopRequireDefault","_fsExtra","_path","_semver","_internal","obj","__esModule","default","PLACEHOLDER_URL","FYI_URL","configureAsync","config","_maybeWriteArtifactsToDiskAsync","_maybeConfigureExpoKitEmbeddedAssetsAsync","_maybeRunModifiedExpoUpdatesPluginAsync","getEmbeddedManifestPath","platform","projectRoot","exp","ios","publishManifestPath","_getDefaultEmbeddedManifestPath","android","path","join","_getDefaultEmbeddedAssetDir","_getDefaultEmbeddedBundlePath","iosSupportingDirectory","getIOSPaths","Error","shouldEmbedAssetsForExpoUpdates","pkg","target","_pkg$dependencies","dependencies","expoUpdatesVersion","semver","coerce","satisfies","fs","existsSync","_exp$android","_exp$android2","_exp$ios","_exp$ios2","iosManifest","iosBundle","androidManifest","androidBundle","androidBundlePath","androidManifestPath","iosBundlePath","iosManifestPath","defaultAndroidDir","defaultIosDir","ensureDir","logger","global","warn","publishBundlePath","writeArtifactSafelyAsync","JSON","stringify","releaseChannel","androidManifestUrl","context","StandaloneContext","createUserContext","supportingDirectory","IosWorkspace","getPaths","IosPlist","modifyAsync","shellPlist","constantsPath","ExponentTools","deleteLinesInFileAsync","regexFileAsync","bundleUrl","_config$pkg$dependenc","iosManifestUrl","isLikelyFirstIOSPublish","expoPlistPath","expoPlistForProject","plist","parse","readFileSync","currentlyConfiguredExpoPlist","IOSConfig","Updates","setUpdatesConfig","Config","UPDATE_URL","RELEASE_CHANNEL","configuredIOSUpdatesURL","writeFileSync","build","SDK_VERSION","RUNTIME_VERSION","key","currentlyConfiguredValue","inferredValue","_currentlyConfiguredV","message","WarningAggregator","addWarningIOS","isLikelyFirstAndroidPublish","androidManifestXmlPath","AndroidManifestKeyForUpdateURL","AndroidConfig","_currentConfiguredMan","_currentConfiguredMan2","_currentlyConfiguredM","currentlyConfiguredAndroidManifest","Manifest","readAndroidManifestAsync","currentConfiguredManifestApplication","getMainApplicationOrThrow","currentlyConfiguredMetaDataAttributes","map","md","inferredAndroidManifest","inferredMainApplication","addMetaDataItemToMainApplication","currentlyConfiguredAndroidUpdateURL","find","x","writeAndroidManifestAsync","_inferredMainApplicat","inferredMetaDataAttributes","_inferredMetaDataAttr","_currentlyConfiguredM2","_currentlyConfiguredV2","addWarningAndroid","platformSpecificMessage","getConfig","skipSDKVersionRequirement","projectName","name","iosProjectDirectory","XcodeUtils","sanitizedName","iconPath"],"sources":["../src/EmbeddedAssets.ts"],"sourcesContent":["import { ExpoAppManifest, getConfig, PackageJSONConfig, ProjectTarget } from '@expo/config';\nimport { AndroidConfig, IOSConfig, WarningAggregator } from '@expo/config-plugins';\nimport plist from '@expo/plist';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport semver from 'semver';\n\nimport {\n  ExponentTools,\n  IosPlist,\n  IosWorkspace,\n  Logger as logger,\n  StandaloneContext,\n  writeArtifactSafelyAsync,\n} from './internal';\n\nconst PLACEHOLDER_URL = 'YOUR-APP-URL-HERE';\nconst FYI_URL = 'https://expo.fyi/expo-updates-config';\n\nexport type EmbeddedAssetsConfiguration = {\n  projectRoot: string;\n  pkg: PackageJSONConfig;\n  exp: ExpoAppManifest;\n  releaseChannel?: string;\n  iosManifestUrl: string;\n  iosManifest: any;\n  iosBundle: string | Uint8Array;\n  androidManifestUrl: string;\n  androidManifest: any;\n  androidBundle: string | Uint8Array;\n  target: ProjectTarget;\n};\n\nexport async function configureAsync(config: EmbeddedAssetsConfiguration) {\n  await _maybeWriteArtifactsToDiskAsync(config);\n  await _maybeConfigureExpoKitEmbeddedAssetsAsync(config);\n  await _maybeRunModifiedExpoUpdatesPluginAsync(config);\n}\n\nexport function getEmbeddedManifestPath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  if (platform === 'ios') {\n    return exp.ios && exp.ios.publishManifestPath\n      ? exp.ios.publishManifestPath\n      : _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n  } else if (platform === 'android') {\n    return exp.android && exp.android.publishManifestPath\n      ? exp.android.publishManifestPath\n      : _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n  }\n  return _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n}\n\nfunction _getDefaultEmbeddedManifestPath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  return path.join(_getDefaultEmbeddedAssetDir(platform, projectRoot, exp), 'app.manifest');\n}\n\nfunction _getDefaultEmbeddedBundlePath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  return path.join(_getDefaultEmbeddedAssetDir(platform, projectRoot, exp), 'app.bundle');\n}\n\nfunction _getDefaultEmbeddedAssetDir(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  if (platform === 'ios') {\n    const { iosSupportingDirectory } = getIOSPaths(projectRoot);\n    return iosSupportingDirectory;\n  } else if (platform === 'android') {\n    return path.join(projectRoot, 'android', 'app', 'src', 'main', 'assets');\n  } else {\n    throw new Error('Embedding assets is not supported for platform ' + platform);\n  }\n}\n\nexport function shouldEmbedAssetsForExpoUpdates(\n  projectRoot: string,\n  exp: ExpoAppManifest,\n  pkg: PackageJSONConfig,\n  target: ProjectTarget\n): boolean {\n  if (!pkg.dependencies?.['expo-updates'] || target !== 'bare') {\n    return false;\n  }\n\n  // semver.coerce can return null\n  const expoUpdatesVersion = semver.coerce(pkg.dependencies['expo-updates']);\n\n  // expo-updates 0.1.x relies on expo-cli automatically embedding the manifest and bundle\n  if (expoUpdatesVersion && semver.satisfies(expoUpdatesVersion, '~0.1.0')) {\n    return true;\n  }\n\n  // We also want to support developers who had expo-updates 0.1.x and upgraded but still rely on\n  // expo-cli's automatic embedding. If the files already exist we can assume we need to update them\n  if (\n    fs.existsSync(_getDefaultEmbeddedBundlePath('android', projectRoot, exp)) ||\n    fs.existsSync(_getDefaultEmbeddedManifestPath('android', projectRoot, exp)) ||\n    fs.existsSync(_getDefaultEmbeddedBundlePath('ios', projectRoot, exp)) ||\n    fs.existsSync(_getDefaultEmbeddedManifestPath('ios', projectRoot, exp))\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nasync function _maybeWriteArtifactsToDiskAsync(config: EmbeddedAssetsConfiguration) {\n  const {\n    projectRoot,\n    pkg,\n    exp,\n    iosManifest,\n    iosBundle,\n    androidManifest,\n    androidBundle,\n    target,\n  } = config;\n\n  let androidBundlePath;\n  let androidManifestPath;\n  let iosBundlePath;\n  let iosManifestPath;\n\n  if (shouldEmbedAssetsForExpoUpdates(projectRoot, exp, pkg, target)) {\n    const defaultAndroidDir = _getDefaultEmbeddedAssetDir('android', projectRoot, exp);\n    const defaultIosDir = _getDefaultEmbeddedAssetDir('ios', projectRoot, exp);\n\n    await fs.ensureDir(defaultIosDir);\n    await fs.ensureDir(defaultAndroidDir);\n\n    androidBundlePath = _getDefaultEmbeddedBundlePath('android', projectRoot, exp);\n    androidManifestPath = _getDefaultEmbeddedManifestPath('android', projectRoot, exp);\n    iosBundlePath = _getDefaultEmbeddedBundlePath('ios', projectRoot, exp);\n    iosManifestPath = _getDefaultEmbeddedManifestPath('ios', projectRoot, exp);\n\n    if (!fs.existsSync(iosBundlePath) || !fs.existsSync(iosManifestPath)) {\n      logger.global.warn(\n        'Creating app.manifest and app.bundle inside of your ios/<project>/Supporting directory.\\nBe sure to add these files to your Xcode project. More info at https://expo.fyi/embedded-assets'\n      );\n    }\n  }\n\n  // allow custom overrides\n  if (exp.android?.publishBundlePath) {\n    androidBundlePath = exp.android.publishBundlePath;\n  }\n  if (exp.android?.publishManifestPath) {\n    androidManifestPath = exp.android.publishManifestPath;\n  }\n  if (exp.ios?.publishBundlePath) {\n    iosBundlePath = exp.ios.publishBundlePath;\n  }\n  if (exp.ios?.publishManifestPath) {\n    iosManifestPath = exp.ios.publishManifestPath;\n  }\n\n  if (androidBundlePath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishBundlePath',\n      androidBundlePath,\n      androidBundle\n    );\n  }\n\n  if (androidManifestPath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishManifestPath',\n      androidManifestPath,\n      JSON.stringify(androidManifest)\n    );\n  }\n\n  if (iosBundlePath) {\n    await writeArtifactSafelyAsync(projectRoot, 'ios.publishBundlePath', iosBundlePath, iosBundle);\n  }\n\n  if (iosManifestPath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishManifestPath',\n      iosManifestPath,\n      JSON.stringify(iosManifest)\n    );\n  }\n}\n\nasync function _maybeConfigureExpoKitEmbeddedAssetsAsync(config: EmbeddedAssetsConfiguration) {\n  const { projectRoot, exp, releaseChannel, androidManifestUrl, androidManifest } = config;\n\n  const context = StandaloneContext.createUserContext(projectRoot, exp);\n  const { supportingDirectory } = IosWorkspace.getPaths(context);\n\n  // iOS ExpoKit\n  if (releaseChannel && fs.existsSync(path.join(supportingDirectory, 'EXShell.plist'))) {\n    // This is an ExpoKit app, set properties in EXShell.plist\n    await IosPlist.modifyAsync(supportingDirectory, 'EXShell', (shellPlist: any) => {\n      shellPlist.releaseChannel = releaseChannel;\n      return shellPlist;\n    });\n  }\n\n  // Android ExpoKit\n  const constantsPath = path.join(\n    projectRoot,\n    'android',\n    'app',\n    'src',\n    'main',\n    'java',\n    'host',\n    'exp',\n    'exponent',\n    'generated',\n    'AppConstants.java'\n  );\n  if (fs.existsSync(constantsPath)) {\n    // This is an ExpoKit app\n    // We need to add EmbeddedResponse instances on Android to tell the runtime\n    // that the shell app manifest and bundle is packaged.\n    await ExponentTools.deleteLinesInFileAsync(\n      `START EMBEDDED RESPONSES`,\n      `END EMBEDDED RESPONSES`,\n      constantsPath\n    );\n    await ExponentTools.regexFileAsync(\n      '// ADD EMBEDDED RESPONSES HERE',\n      `\n      // ADD EMBEDDED RESPONSES HERE\n      // START EMBEDDED RESPONSES\n      embeddedResponses.add(new Constants.EmbeddedResponse(\"${androidManifestUrl}\", \"assets://shell-app-manifest.json\", \"application/json\"));\n      embeddedResponses.add(new Constants.EmbeddedResponse(\"${androidManifest.bundleUrl}\", \"assets://shell-app.bundle\", \"application/javascript\"));\n      // END EMBEDDED RESPONSES`,\n      constantsPath\n    );\n    if (releaseChannel) {\n      await ExponentTools.regexFileAsync(\n        /RELEASE_CHANNEL = \"[^\"]*\"/,\n        `RELEASE_CHANNEL = \"${releaseChannel}\"`,\n        constantsPath\n      );\n    }\n  }\n}\n\n/**\n * Guess if this is a user's first publish and run a slightly modified expo-updates plugin.\n * If it is not their first publish and a config mismatch is noticed, log warnings.\n */\nasync function _maybeRunModifiedExpoUpdatesPluginAsync(config: EmbeddedAssetsConfiguration) {\n  if (!config.pkg.dependencies?.['expo-updates'] || config.target === 'managed') {\n    return;\n  }\n\n  const { projectRoot, exp, releaseChannel, iosManifestUrl, androidManifestUrl } = config;\n\n  const { iosSupportingDirectory: supportingDirectory } = getIOSPaths(projectRoot);\n\n  // iOS expo-updates\n  let isLikelyFirstIOSPublish = false;\n  const expoPlistPath = path.join(supportingDirectory, 'Expo.plist');\n  if (fs.existsSync(expoPlistPath)) {\n    let expoPlistForProject = plist.parse(await fs.readFileSync(expoPlistPath, 'utf8'));\n    const currentlyConfiguredExpoPlist = { ...expoPlistForProject };\n\n    // The username is only used for defining a default updates URL.\n    // Since we overwrite the URL below the username is superfluous.\n    expoPlistForProject = IOSConfig.Updates.setUpdatesConfig(\n      projectRoot,\n      exp,\n      expoPlistForProject,\n      /*expoUsername*/ null\n    );\n\n    // overwrite the URL defined in IOSConfig.Updates.setUpdatesConfig\n    expoPlistForProject[IOSConfig.Updates.Config.UPDATE_URL] = iosManifestUrl;\n    // set a release channel (not done in updates plugin)\n    if (releaseChannel) {\n      expoPlistForProject[IOSConfig.Updates.Config.RELEASE_CHANNEL] = releaseChannel;\n    }\n\n    // If we guess that this is a users first publish, modify the native code to match\n    // what is configured.\n    const configuredIOSUpdatesURL =\n      currentlyConfiguredExpoPlist[IOSConfig.Updates.Config.UPDATE_URL];\n    if (configuredIOSUpdatesURL === PLACEHOLDER_URL) {\n      isLikelyFirstIOSPublish = true;\n      fs.writeFileSync(expoPlistPath, plist.build(expoPlistForProject));\n    } else {\n      // Log warnings if this is not the first publish and critical properties seem misconfigured\n      const {\n        UPDATE_URL,\n        SDK_VERSION,\n        RUNTIME_VERSION,\n        RELEASE_CHANNEL,\n      } = IOSConfig.Updates.Config;\n      for (const key of [UPDATE_URL, SDK_VERSION, RUNTIME_VERSION, RELEASE_CHANNEL]) {\n        let currentlyConfiguredValue = currentlyConfiguredExpoPlist[key];\n        const inferredValue = expoPlistForProject[key];\n        if (key === RELEASE_CHANNEL && inferredValue) {\n          // A client with an undefined release channel is mapped to\n          // 'default' in the server, so avoid logging an unneccessary warning.\n          currentlyConfiguredValue = currentlyConfiguredValue ?? 'default';\n        }\n        if (currentlyConfiguredValue !== inferredValue) {\n          let message: string;\n          switch (key) {\n            case RELEASE_CHANNEL: {\n              message = `The value passed to the --release-channel flag is to \"${inferredValue}\", but it is set to \"${currentlyConfiguredValue}\".`;\n              break;\n            }\n            case UPDATE_URL:\n            case SDK_VERSION:\n            case RUNTIME_VERSION:\n            default:\n              message = `${key} is inferred to be \"${inferredValue}\", but it is set to \"${currentlyConfiguredValue}\".`;\n          }\n          WarningAggregator.addWarningIOS(`Expo.plist key: \"${key}\"`, message, FYI_URL);\n        }\n      }\n    }\n  }\n\n  // Android expo-updates\n  let isLikelyFirstAndroidPublish = false;\n  const androidManifestXmlPath = path.join(\n    projectRoot,\n    'android',\n    'app',\n    'src',\n    'main',\n    'AndroidManifest.xml'\n  );\n  const AndroidManifestKeyForUpdateURL = AndroidConfig.Updates.Config.UPDATE_URL;\n  if (fs.existsSync(androidManifestXmlPath)) {\n    const currentlyConfiguredAndroidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(\n      androidManifestXmlPath\n    );\n    const currentConfiguredManifestApplication = AndroidConfig.Manifest.getMainApplicationOrThrow(\n      currentlyConfiguredAndroidManifest\n    );\n    const currentlyConfiguredMetaDataAttributes =\n      currentConfiguredManifestApplication['meta-data']?.map(md => md['$']) ?? [];\n\n    // The username is only used for defining a default updates URL.\n    // Since we overwrite the URL below the username is superfluous.\n    const inferredAndroidManifest = AndroidConfig.Updates.setUpdatesConfig(\n      projectRoot,\n      exp,\n      currentlyConfiguredAndroidManifest,\n      /*username*/ null\n    );\n    const inferredMainApplication = AndroidConfig.Manifest.getMainApplicationOrThrow(\n      inferredAndroidManifest\n    );\n    // overwrite the URL defined in AndroidConfig.Updates.setUpdatesConfig\n    AndroidConfig.Manifest.addMetaDataItemToMainApplication(\n      inferredMainApplication,\n      AndroidManifestKeyForUpdateURL,\n      androidManifestUrl\n    );\n    // set a release channel (not done in updates plugin)\n    if (releaseChannel) {\n      AndroidConfig.Manifest.addMetaDataItemToMainApplication(\n        inferredMainApplication,\n        AndroidConfig.Updates.Config.RELEASE_CHANNEL,\n        releaseChannel\n      );\n    }\n\n    // If we guess that this is a users first publish, modify the native code to match\n    // what is configured.\n    const currentlyConfiguredAndroidUpdateURL = currentlyConfiguredMetaDataAttributes.find(\n      x => x['android:name'] === AndroidConfig.Updates.Config.UPDATE_URL\n    )?.['android:value'];\n    if (currentlyConfiguredAndroidUpdateURL === PLACEHOLDER_URL) {\n      isLikelyFirstAndroidPublish = true;\n      await AndroidConfig.Manifest.writeAndroidManifestAsync(\n        androidManifestXmlPath,\n        inferredAndroidManifest\n      );\n    } else {\n      // Log warnings if this is not the first publish and critical properties seem misconfigured\n      const inferredMainApplication = AndroidConfig.Manifest.getMainApplicationOrThrow(\n        inferredAndroidManifest\n      );\n      const inferredMetaDataAttributes = inferredMainApplication['meta-data']?.map(md => md['$'])!;\n\n      const {\n        UPDATE_URL,\n        SDK_VERSION,\n        RUNTIME_VERSION,\n        RELEASE_CHANNEL,\n      } = AndroidConfig.Updates.Config;\n      for (const key of [UPDATE_URL, SDK_VERSION, RUNTIME_VERSION, RELEASE_CHANNEL]) {\n        const inferredValue = inferredMetaDataAttributes.find(x => x['android:name'] === key)?.[\n          'android:value'\n        ];\n        let currentlyConfiguredValue = currentlyConfiguredMetaDataAttributes.find(\n          x => x['android:name'] === key\n        )?.['android:value'];\n        if (key === RELEASE_CHANNEL && inferredValue) {\n          // A client with an undefined release channel is mapped to\n          // 'default' in the server, so avoid logging an unneccessary warning.\n          currentlyConfiguredValue = currentlyConfiguredValue ?? 'default';\n        }\n        if (inferredValue !== currentlyConfiguredValue) {\n          let message: string;\n          switch (key) {\n            case RELEASE_CHANNEL: {\n              message = `The value passed to the --release-channel flag is \"${inferredValue}\", but it is set to \"${currentlyConfiguredValue}\".`;\n              break;\n            }\n            case UPDATE_URL:\n            case SDK_VERSION:\n            case RUNTIME_VERSION:\n            default:\n              message = `The inferred value is \"${inferredValue}\", but it is set to \"${currentlyConfiguredValue}\".`;\n          }\n          WarningAggregator.addWarningAndroid(`AndroidManifest.xml key \"${key}\"`, message, FYI_URL);\n        }\n      }\n    }\n  }\n\n  if (isLikelyFirstIOSPublish || isLikelyFirstAndroidPublish) {\n    let platformSpecificMessage: string;\n\n    if (isLikelyFirstIOSPublish && !isLikelyFirstAndroidPublish) {\n      platformSpecificMessage =\n        '🚀 It looks like this your first iOS publish for this project! ' +\n        `We've automatically set some configuration values in Expo.plist. `;\n    } else if (!isLikelyFirstIOSPublish && isLikelyFirstAndroidPublish) {\n      platformSpecificMessage =\n        '🚀 It looks like this your first Android publish for this project! ' +\n        `We've automatically set some configuration values in AndroidManifest.xml. `;\n    } else {\n      platformSpecificMessage =\n        '🚀 It looks like this your first publish for this project! ' +\n        `We've automatically set some configuration values in Expo.plist and AndroidManifest.xml. `;\n    }\n\n    logger.global.warn(\n      platformSpecificMessage +\n        `You'll need to make and release a new build before your users can download the update ` +\n        'you just published.'\n    );\n  }\n}\n\n/** The code below here is duplicated from expo-cli currently **/\n\n// TODO: it's silly and kind of fragile that we look at app config to determine\n// the ios project paths. Overall this function needs to be revamped, just a\n// placeholder for now! Make this more robust when we support applying config\n// at any time (currently it's only applied on eject).\nexport function getIOSPaths(projectRoot: string) {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  const projectName = exp.name;\n  if (!projectName) {\n    throw new Error('Your project needs a name in app.json/app.config.js.');\n  }\n\n  const iosProjectDirectory = path.join(\n    projectRoot,\n    'ios',\n    IOSConfig.XcodeUtils.sanitizedName(projectName)\n  );\n  const iosSupportingDirectory = path.join(\n    projectRoot,\n    'ios',\n    IOSConfig.XcodeUtils.sanitizedName(projectName),\n    'Supporting'\n  );\n  const iconPath = path.join(iosProjectDirectory, 'Assets.xcassets', 'AppIcon.appiconset');\n\n  return {\n    projectName,\n    iosProjectDirectory,\n    iosSupportingDirectory,\n    iconPath,\n  };\n}\n"],"mappings":";;;;;;;;;AAAA,SAAAA,QAAA;EAAA,MAAAC,IAAA,GAAAC,OAAA;EAAAF,OAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAE,eAAA;EAAA,MAAAF,IAAA,GAAAC,OAAA;EAAAC,cAAA,YAAAA,CAAA;IAAA,OAAAF,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAG,OAAA;EAAA,MAAAH,IAAA,GAAAI,sBAAA,CAAAH,OAAA;EAAAE,MAAA,YAAAA,CAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAK,SAAA;EAAA,MAAAL,IAAA,GAAAI,sBAAA,CAAAH,OAAA;EAAAI,QAAA,YAAAA,CAAA;IAAA,OAAAL,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAM,MAAA;EAAA,MAAAN,IAAA,GAAAI,sBAAA,CAAAH,OAAA;EAAAK,KAAA,YAAAA,CAAA;IAAA,OAAAN,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAO,QAAA;EAAA,MAAAP,IAAA,GAAAI,sBAAA,CAAAH,OAAA;EAAAM,OAAA,YAAAA,CAAA;IAAA,OAAAP,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEA,SAAAQ,UAAA;EAAA,MAAAR,IAAA,GAAAC,OAAA;EAAAO,SAAA,YAAAA,CAAA;IAAA,OAAAR,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAOoB,SAAAI,uBAAAK,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAEpB,MAAMG,eAAe,GAAG,mBAAmB;AAC3C,MAAMC,OAAO,GAAG,sCAAsC;AAgB/C,eAAeC,cAAcA,CAACC,MAAmC,EAAE;EACxE,MAAMC,+BAA+B,CAACD,MAAM,CAAC;EAC7C,MAAME,yCAAyC,CAACF,MAAM,CAAC;EACvD,MAAMG,uCAAuC,CAACH,MAAM,CAAC;AACvD;AAEO,SAASI,uBAAuBA,CACrCC,QAA2B,EAC3BC,WAAmB,EACnBC,GAAoB,EACZ;EACR,IAAIF,QAAQ,KAAK,KAAK,EAAE;IACtB,OAAOE,GAAG,CAACC,GAAG,IAAID,GAAG,CAACC,GAAG,CAACC,mBAAmB,GACzCF,GAAG,CAACC,GAAG,CAACC,mBAAmB,GAC3BC,+BAA+B,CAACL,QAAQ,EAAEC,WAAW,EAAEC,GAAG,CAAC;EACjE,CAAC,MAAM,IAAIF,QAAQ,KAAK,SAAS,EAAE;IACjC,OAAOE,GAAG,CAACI,OAAO,IAAIJ,GAAG,CAACI,OAAO,CAACF,mBAAmB,GACjDF,GAAG,CAACI,OAAO,CAACF,mBAAmB,GAC/BC,+BAA+B,CAACL,QAAQ,EAAEC,WAAW,EAAEC,GAAG,CAAC;EACjE;EACA,OAAOG,+BAA+B,CAACL,QAAQ,EAAEC,WAAW,EAAEC,GAAG,CAAC;AACpE;AAEA,SAASG,+BAA+BA,CACtCL,QAA2B,EAC3BC,WAAmB,EACnBC,GAAoB,EACZ;EACR,OAAOK,eAAI,CAACC,IAAI,CAACC,2BAA2B,CAACT,QAAQ,EAAEC,WAAW,EAAEC,GAAG,CAAC,EAAE,cAAc,CAAC;AAC3F;AAEA,SAASQ,6BAA6BA,CACpCV,QAA2B,EAC3BC,WAAmB,EACnBC,GAAoB,EACZ;EACR,OAAOK,eAAI,CAACC,IAAI,CAACC,2BAA2B,CAACT,QAAQ,EAAEC,WAAW,EAAEC,GAAG,CAAC,EAAE,YAAY,CAAC;AACzF;AAEA,SAASO,2BAA2BA,CAClCT,QAA2B,EAC3BC,WAAmB,EACnBC,GAAoB,EACZ;EACR,IAAIF,QAAQ,KAAK,KAAK,EAAE;IACtB,MAAM;MAAEW;IAAuB,CAAC,GAAGC,WAAW,CAACX,WAAW,CAAC;IAC3D,OAAOU,sBAAsB;EAC/B,CAAC,MAAM,IAAIX,QAAQ,KAAK,SAAS,EAAE;IACjC,OAAOO,eAAI,CAACC,IAAI,CAACP,WAAW,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC;EAC1E,CAAC,MAAM;IACL,MAAM,IAAIY,KAAK,CAAC,iDAAiD,GAAGb,QAAQ,CAAC;EAC/E;AACF;AAEO,SAASc,+BAA+BA,CAC7Cb,WAAmB,EACnBC,GAAoB,EACpBa,GAAsB,EACtBC,MAAqB,EACZ;EAAA,IAAAC,iBAAA;EACT,IAAI,GAAAA,iBAAA,GAACF,GAAG,CAACG,YAAY,cAAAD,iBAAA,eAAhBA,iBAAA,CAAmB,cAAc,CAAC,KAAID,MAAM,KAAK,MAAM,EAAE;IAC5D,OAAO,KAAK;EACd;;EAEA;EACA,MAAMG,kBAAkB,GAAGC,iBAAM,CAACC,MAAM,CAACN,GAAG,CAACG,YAAY,CAAC,cAAc,CAAC,CAAC;;EAE1E;EACA,IAAIC,kBAAkB,IAAIC,iBAAM,CAACE,SAAS,CAACH,kBAAkB,EAAE,QAAQ,CAAC,EAAE;IACxE,OAAO,IAAI;EACb;;EAEA;EACA;EACA,IACEI,kBAAE,CAACC,UAAU,CAACd,6BAA6B,CAAC,SAAS,EAAET,WAAW,EAAEC,GAAG,CAAC,CAAC,IACzEqB,kBAAE,CAACC,UAAU,CAACnB,+BAA+B,CAAC,SAAS,EAAEJ,WAAW,EAAEC,GAAG,CAAC,CAAC,IAC3EqB,kBAAE,CAACC,UAAU,CAACd,6BAA6B,CAAC,KAAK,EAAET,WAAW,EAAEC,GAAG,CAAC,CAAC,IACrEqB,kBAAE,CAACC,UAAU,CAACnB,+BAA+B,CAAC,KAAK,EAAEJ,WAAW,EAAEC,GAAG,CAAC,CAAC,EACvE;IACA,OAAO,IAAI;EACb;EAEA,OAAO,KAAK;AACd;AAEA,eAAeN,+BAA+BA,CAACD,MAAmC,EAAE;EAAA,IAAA8B,YAAA,EAAAC,aAAA,EAAAC,QAAA,EAAAC,SAAA;EAClF,MAAM;IACJ3B,WAAW;IACXc,GAAG;IACHb,GAAG;IACH2B,WAAW;IACXC,SAAS;IACTC,eAAe;IACfC,aAAa;IACbhB;EACF,CAAC,GAAGrB,MAAM;EAEV,IAAIsC,iBAAiB;EACrB,IAAIC,mBAAmB;EACvB,IAAIC,aAAa;EACjB,IAAIC,eAAe;EAEnB,IAAItB,+BAA+B,CAACb,WAAW,EAAEC,GAAG,EAAEa,GAAG,EAAEC,MAAM,CAAC,EAAE;IAClE,MAAMqB,iBAAiB,GAAG5B,2BAA2B,CAAC,SAAS,EAAER,WAAW,EAAEC,GAAG,CAAC;IAClF,MAAMoC,aAAa,GAAG7B,2BAA2B,CAAC,KAAK,EAAER,WAAW,EAAEC,GAAG,CAAC;IAE1E,MAAMqB,kBAAE,CAACgB,SAAS,CAACD,aAAa,CAAC;IACjC,MAAMf,kBAAE,CAACgB,SAAS,CAACF,iBAAiB,CAAC;IAErCJ,iBAAiB,GAAGvB,6BAA6B,CAAC,SAAS,EAAET,WAAW,EAAEC,GAAG,CAAC;IAC9EgC,mBAAmB,GAAG7B,+BAA+B,CAAC,SAAS,EAAEJ,WAAW,EAAEC,GAAG,CAAC;IAClFiC,aAAa,GAAGzB,6BAA6B,CAAC,KAAK,EAAET,WAAW,EAAEC,GAAG,CAAC;IACtEkC,eAAe,GAAG/B,+BAA+B,CAAC,KAAK,EAAEJ,WAAW,EAAEC,GAAG,CAAC;IAE1E,IAAI,CAACqB,kBAAE,CAACC,UAAU,CAACW,aAAa,CAAC,IAAI,CAACZ,kBAAE,CAACC,UAAU,CAACY,eAAe,CAAC,EAAE;MACpEI,kBAAM,CAACC,MAAM,CAACC,IAAI,CAChB,0LACF,CAAC;IACH;EACF;;EAEA;EACA,KAAAjB,YAAA,GAAIvB,GAAG,CAACI,OAAO,cAAAmB,YAAA,eAAXA,YAAA,CAAakB,iBAAiB,EAAE;IAClCV,iBAAiB,GAAG/B,GAAG,CAACI,OAAO,CAACqC,iBAAiB;EACnD;EACA,KAAAjB,aAAA,GAAIxB,GAAG,CAACI,OAAO,cAAAoB,aAAA,eAAXA,aAAA,CAAatB,mBAAmB,EAAE;IACpC8B,mBAAmB,GAAGhC,GAAG,CAACI,OAAO,CAACF,mBAAmB;EACvD;EACA,KAAAuB,QAAA,GAAIzB,GAAG,CAACC,GAAG,cAAAwB,QAAA,eAAPA,QAAA,CAASgB,iBAAiB,EAAE;IAC9BR,aAAa,GAAGjC,GAAG,CAACC,GAAG,CAACwC,iBAAiB;EAC3C;EACA,KAAAf,SAAA,GAAI1B,GAAG,CAACC,GAAG,cAAAyB,SAAA,eAAPA,SAAA,CAASxB,mBAAmB,EAAE;IAChCgC,eAAe,GAAGlC,GAAG,CAACC,GAAG,CAACC,mBAAmB;EAC/C;EAEA,IAAI6B,iBAAiB,EAAE;IACrB,MAAM,IAAAW,oCAAwB,EAC5B3C,WAAW,EACX,2BAA2B,EAC3BgC,iBAAiB,EACjBD,aACF,CAAC;EACH;EAEA,IAAIE,mBAAmB,EAAE;IACvB,MAAM,IAAAU,oCAAwB,EAC5B3C,WAAW,EACX,6BAA6B,EAC7BiC,mBAAmB,EACnBW,IAAI,CAACC,SAAS,CAACf,eAAe,CAChC,CAAC;EACH;EAEA,IAAII,aAAa,EAAE;IACjB,MAAM,IAAAS,oCAAwB,EAAC3C,WAAW,EAAE,uBAAuB,EAAEkC,aAAa,EAAEL,SAAS,CAAC;EAChG;EAEA,IAAIM,eAAe,EAAE;IACnB,MAAM,IAAAQ,oCAAwB,EAC5B3C,WAAW,EACX,yBAAyB,EACzBmC,eAAe,EACfS,IAAI,CAACC,SAAS,CAACjB,WAAW,CAC5B,CAAC;EACH;AACF;AAEA,eAAehC,yCAAyCA,CAACF,MAAmC,EAAE;EAC5F,MAAM;IAAEM,WAAW;IAAEC,GAAG;IAAE6C,cAAc;IAAEC,kBAAkB;IAAEjB;EAAgB,CAAC,GAAGpC,MAAM;EAExF,MAAMsD,OAAO,GAAGC,6BAAiB,CAACC,iBAAiB,CAAClD,WAAW,EAAEC,GAAG,CAAC;EACrE,MAAM;IAAEkD;EAAoB,CAAC,GAAGC,wBAAY,CAACC,QAAQ,CAACL,OAAO,CAAC;;EAE9D;EACA,IAAIF,cAAc,IAAIxB,kBAAE,CAACC,UAAU,CAACjB,eAAI,CAACC,IAAI,CAAC4C,mBAAmB,EAAE,eAAe,CAAC,CAAC,EAAE;IACpF;IACA,MAAMG,oBAAQ,CAACC,WAAW,CAACJ,mBAAmB,EAAE,SAAS,EAAGK,UAAe,IAAK;MAC9EA,UAAU,CAACV,cAAc,GAAGA,cAAc;MAC1C,OAAOU,UAAU;IACnB,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMC,aAAa,GAAGnD,eAAI,CAACC,IAAI,CAC7BP,WAAW,EACX,SAAS,EACT,KAAK,EACL,KAAK,EACL,MAAM,EACN,MAAM,EACN,MAAM,EACN,KAAK,EACL,UAAU,EACV,WAAW,EACX,mBACF,CAAC;EACD,IAAIsB,kBAAE,CAACC,UAAU,CAACkC,aAAa,CAAC,EAAE;IAChC;IACA;IACA;IACA,MAAMC,yBAAa,CAACC,sBAAsB,CACvC,0BAAyB,EACzB,wBAAuB,EACxBF,aACF,CAAC;IACD,MAAMC,yBAAa,CAACE,cAAc,CAChC,gCAAgC,EAC/B;AACP;AACA;AACA,8DAA8Db,kBAAmB;AACjF,8DAA8DjB,eAAe,CAAC+B,SAAU;AACxF,gCAAgC,EAC1BJ,aACF,CAAC;IACD,IAAIX,cAAc,EAAE;MAClB,MAAMY,yBAAa,CAACE,cAAc,CAChC,2BAA2B,EAC1B,sBAAqBd,cAAe,GAAE,EACvCW,aACF,CAAC;IACH;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA,eAAe5D,uCAAuCA,CAACH,MAAmC,EAAE;EAAA,IAAAoE,qBAAA;EAC1F,IAAI,GAAAA,qBAAA,GAACpE,MAAM,CAACoB,GAAG,CAACG,YAAY,cAAA6C,qBAAA,eAAvBA,qBAAA,CAA0B,cAAc,CAAC,KAAIpE,MAAM,CAACqB,MAAM,KAAK,SAAS,EAAE;IAC7E;EACF;EAEA,MAAM;IAAEf,WAAW;IAAEC,GAAG;IAAE6C,cAAc;IAAEiB,cAAc;IAAEhB;EAAmB,CAAC,GAAGrD,MAAM;EAEvF,MAAM;IAAEgB,sBAAsB,EAAEyC;EAAoB,CAAC,GAAGxC,WAAW,CAACX,WAAW,CAAC;;EAEhF;EACA,IAAIgE,uBAAuB,GAAG,KAAK;EACnC,MAAMC,aAAa,GAAG3D,eAAI,CAACC,IAAI,CAAC4C,mBAAmB,EAAE,YAAY,CAAC;EAClE,IAAI7B,kBAAE,CAACC,UAAU,CAAC0C,aAAa,CAAC,EAAE;IAChC,IAAIC,mBAAmB,GAAGC,gBAAK,CAACC,KAAK,CAAC,MAAM9C,kBAAE,CAAC+C,YAAY,CAACJ,aAAa,EAAE,MAAM,CAAC,CAAC;IACnF,MAAMK,4BAA4B,GAAG;MAAE,GAAGJ;IAAoB,CAAC;;IAE/D;IACA;IACAA,mBAAmB,GAAGK,0BAAS,CAACC,OAAO,CAACC,gBAAgB,CACtDzE,WAAW,EACXC,GAAG,EACHiE,mBAAmB,EACnB,gBAAiB,IACnB,CAAC;;IAED;IACAA,mBAAmB,CAACK,0BAAS,CAACC,OAAO,CAACE,MAAM,CAACC,UAAU,CAAC,GAAGZ,cAAc;IACzE;IACA,IAAIjB,cAAc,EAAE;MAClBoB,mBAAmB,CAACK,0BAAS,CAACC,OAAO,CAACE,MAAM,CAACE,eAAe,CAAC,GAAG9B,cAAc;IAChF;;IAEA;IACA;IACA,MAAM+B,uBAAuB,GAC3BP,4BAA4B,CAACC,0BAAS,CAACC,OAAO,CAACE,MAAM,CAACC,UAAU,CAAC;IACnE,IAAIE,uBAAuB,KAAKtF,eAAe,EAAE;MAC/CyE,uBAAuB,GAAG,IAAI;MAC9B1C,kBAAE,CAACwD,aAAa,CAACb,aAAa,EAAEE,gBAAK,CAACY,KAAK,CAACb,mBAAmB,CAAC,CAAC;IACnE,CAAC,MAAM;MACL;MACA,MAAM;QACJS,UAAU;QACVK,WAAW;QACXC,eAAe;QACfL;MACF,CAAC,GAAGL,0BAAS,CAACC,OAAO,CAACE,MAAM;MAC5B,KAAK,MAAMQ,GAAG,IAAI,CAACP,UAAU,EAAEK,WAAW,EAAEC,eAAe,EAAEL,eAAe,CAAC,EAAE;QAC7E,IAAIO,wBAAwB,GAAGb,4BAA4B,CAACY,GAAG,CAAC;QAChE,MAAME,aAAa,GAAGlB,mBAAmB,CAACgB,GAAG,CAAC;QAC9C,IAAIA,GAAG,KAAKN,eAAe,IAAIQ,aAAa,EAAE;UAAA,IAAAC,qBAAA;UAC5C;UACA;UACAF,wBAAwB,IAAAE,qBAAA,GAAGF,wBAAwB,cAAAE,qBAAA,cAAAA,qBAAA,GAAI,SAAS;QAClE;QACA,IAAIF,wBAAwB,KAAKC,aAAa,EAAE;UAC9C,IAAIE,OAAe;UACnB,QAAQJ,GAAG;YACT,KAAKN,eAAe;cAAE;gBACpBU,OAAO,GAAI,yDAAwDF,aAAc,wBAAuBD,wBAAyB,IAAG;gBACpI;cACF;YACA,KAAKR,UAAU;YACf,KAAKK,WAAW;YAChB,KAAKC,eAAe;YACpB;cACEK,OAAO,GAAI,GAAEJ,GAAI,uBAAsBE,aAAc,wBAAuBD,wBAAyB,IAAG;UAC5G;UACAI,kCAAiB,CAACC,aAAa,CAAE,oBAAmBN,GAAI,GAAE,EAAEI,OAAO,EAAE9F,OAAO,CAAC;QAC/E;MACF;IACF;EACF;;EAEA;EACA,IAAIiG,2BAA2B,GAAG,KAAK;EACvC,MAAMC,sBAAsB,GAAGpF,eAAI,CAACC,IAAI,CACtCP,WAAW,EACX,SAAS,EACT,KAAK,EACL,KAAK,EACL,MAAM,EACN,qBACF,CAAC;EACD,MAAM2F,8BAA8B,GAAGC,8BAAa,CAACpB,OAAO,CAACE,MAAM,CAACC,UAAU;EAC9E,IAAIrD,kBAAE,CAACC,UAAU,CAACmE,sBAAsB,CAAC,EAAE;IAAA,IAAAG,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA;IACzC,MAAMC,kCAAkC,GAAG,MAAMJ,8BAAa,CAACK,QAAQ,CAACC,wBAAwB,CAC9FR,sBACF,CAAC;IACD,MAAMS,oCAAoC,GAAGP,8BAAa,CAACK,QAAQ,CAACG,yBAAyB,CAC3FJ,kCACF,CAAC;IACD,MAAMK,qCAAqC,IAAAR,qBAAA,IAAAC,sBAAA,GACzCK,oCAAoC,CAAC,WAAW,CAAC,cAAAL,sBAAA,uBAAjDA,sBAAA,CAAmDQ,GAAG,CAACC,EAAE,IAAIA,EAAE,CAAC,GAAG,CAAC,CAAC,cAAAV,qBAAA,cAAAA,qBAAA,GAAI,EAAE;;IAE7E;IACA;IACA,MAAMW,uBAAuB,GAAGZ,8BAAa,CAACpB,OAAO,CAACC,gBAAgB,CACpEzE,WAAW,EACXC,GAAG,EACH+F,kCAAkC,EAClC,YAAa,IACf,CAAC;IACD,MAAMS,uBAAuB,GAAGb,8BAAa,CAACK,QAAQ,CAACG,yBAAyB,CAC9EI,uBACF,CAAC;IACD;IACAZ,8BAAa,CAACK,QAAQ,CAACS,gCAAgC,CACrDD,uBAAuB,EACvBd,8BAA8B,EAC9B5C,kBACF,CAAC;IACD;IACA,IAAID,cAAc,EAAE;MAClB8C,8BAAa,CAACK,QAAQ,CAACS,gCAAgC,CACrDD,uBAAuB,EACvBb,8BAAa,CAACpB,OAAO,CAACE,MAAM,CAACE,eAAe,EAC5C9B,cACF,CAAC;IACH;;IAEA;IACA;IACA,MAAM6D,mCAAmC,IAAAZ,qBAAA,GAAGM,qCAAqC,CAACO,IAAI,CACpFC,CAAC,IAAIA,CAAC,CAAC,cAAc,CAAC,KAAKjB,8BAAa,CAACpB,OAAO,CAACE,MAAM,CAACC,UAC1D,CAAC,cAAAoB,qBAAA,uBAF2CA,qBAAA,CAExC,eAAe,CAAC;IACpB,IAAIY,mCAAmC,KAAKpH,eAAe,EAAE;MAC3DkG,2BAA2B,GAAG,IAAI;MAClC,MAAMG,8BAAa,CAACK,QAAQ,CAACa,yBAAyB,CACpDpB,sBAAsB,EACtBc,uBACF,CAAC;IACH,CAAC,MAAM;MAAA,IAAAO,qBAAA;MACL;MACA,MAAMN,uBAAuB,GAAGb,8BAAa,CAACK,QAAQ,CAACG,yBAAyB,CAC9EI,uBACF,CAAC;MACD,MAAMQ,0BAA0B,IAAAD,qBAAA,GAAGN,uBAAuB,CAAC,WAAW,CAAC,cAAAM,qBAAA,uBAApCA,qBAAA,CAAsCT,GAAG,CAACC,EAAE,IAAIA,EAAE,CAAC,GAAG,CAAC,CAAE;MAE5F,MAAM;QACJ5B,UAAU;QACVK,WAAW;QACXC,eAAe;QACfL;MACF,CAAC,GAAGgB,8BAAa,CAACpB,OAAO,CAACE,MAAM;MAChC,KAAK,MAAMQ,GAAG,IAAI,CAACP,UAAU,EAAEK,WAAW,EAAEC,eAAe,EAAEL,eAAe,CAAC,EAAE;QAAA,IAAAqC,qBAAA,EAAAC,sBAAA;QAC7E,MAAM9B,aAAa,IAAA6B,qBAAA,GAAGD,0BAA0B,CAACJ,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC,cAAc,CAAC,KAAK3B,GAAG,CAAC,cAAA+B,qBAAA,uBAA/DA,qBAAA,CACpB,eAAe,CAChB;QACD,IAAI9B,wBAAwB,IAAA+B,sBAAA,GAAGb,qCAAqC,CAACO,IAAI,CACvEC,CAAC,IAAIA,CAAC,CAAC,cAAc,CAAC,KAAK3B,GAC7B,CAAC,cAAAgC,sBAAA,uBAF8BA,sBAAA,CAE3B,eAAe,CAAC;QACpB,IAAIhC,GAAG,KAAKN,eAAe,IAAIQ,aAAa,EAAE;UAAA,IAAA+B,sBAAA;UAC5C;UACA;UACAhC,wBAAwB,IAAAgC,sBAAA,GAAGhC,wBAAwB,cAAAgC,sBAAA,cAAAA,sBAAA,GAAI,SAAS;QAClE;QACA,IAAI/B,aAAa,KAAKD,wBAAwB,EAAE;UAC9C,IAAIG,OAAe;UACnB,QAAQJ,GAAG;YACT,KAAKN,eAAe;cAAE;gBACpBU,OAAO,GAAI,sDAAqDF,aAAc,wBAAuBD,wBAAyB,IAAG;gBACjI;cACF;YACA,KAAKR,UAAU;YACf,KAAKK,WAAW;YAChB,KAAKC,eAAe;YACpB;cACEK,OAAO,GAAI,0BAAyBF,aAAc,wBAAuBD,wBAAyB,IAAG;UACzG;UACAI,kCAAiB,CAAC6B,iBAAiB,CAAE,4BAA2BlC,GAAI,GAAE,EAAEI,OAAO,EAAE9F,OAAO,CAAC;QAC3F;MACF;IACF;EACF;EAEA,IAAIwE,uBAAuB,IAAIyB,2BAA2B,EAAE;IAC1D,IAAI4B,uBAA+B;IAEnC,IAAIrD,uBAAuB,IAAI,CAACyB,2BAA2B,EAAE;MAC3D4B,uBAAuB,GACrB,iEAAiE,GAChE,mEAAkE;IACvE,CAAC,MAAM,IAAI,CAACrD,uBAAuB,IAAIyB,2BAA2B,EAAE;MAClE4B,uBAAuB,GACrB,qEAAqE,GACpE,4EAA2E;IAChF,CAAC,MAAM;MACLA,uBAAuB,GACrB,6DAA6D,GAC5D,2FAA0F;IAC/F;IAEA9E,kBAAM,CAACC,MAAM,CAACC,IAAI,CAChB4E,uBAAuB,GACpB,wFAAuF,GACxF,qBACJ,CAAC;EACH;AACF;;AAEA;;AAEA;AACA;AACA;AACA;AACO,SAAS1G,WAAWA,CAACX,WAAmB,EAAE;EAC/C,MAAM;IAAEC;EAAI,CAAC,GAAG,IAAAqH,mBAAS,EAACtH,WAAW,EAAE;IAAEuH,yBAAyB,EAAE;EAAK,CAAC,CAAC;EAE3E,MAAMC,WAAW,GAAGvH,GAAG,CAACwH,IAAI;EAC5B,IAAI,CAACD,WAAW,EAAE;IAChB,MAAM,IAAI5G,KAAK,CAAC,sDAAsD,CAAC;EACzE;EAEA,MAAM8G,mBAAmB,GAAGpH,eAAI,CAACC,IAAI,CACnCP,WAAW,EACX,KAAK,EACLuE,0BAAS,CAACoD,UAAU,CAACC,aAAa,CAACJ,WAAW,CAChD,CAAC;EACD,MAAM9G,sBAAsB,GAAGJ,eAAI,CAACC,IAAI,CACtCP,WAAW,EACX,KAAK,EACLuE,0BAAS,CAACoD,UAAU,CAACC,aAAa,CAACJ,WAAW,CAAC,EAC/C,YACF,CAAC;EACD,MAAMK,QAAQ,GAAGvH,eAAI,CAACC,IAAI,CAACmH,mBAAmB,EAAE,iBAAiB,EAAE,oBAAoB,CAAC;EAExF,OAAO;IACLF,WAAW;IACXE,mBAAmB;IACnBhH,sBAAsB;IACtBmH;EACF,CAAC;AACH"}