{"version":3,"file":"downloadAppAsync.js","names":["_axios","data","_interopRequireDefault","require","_fsExtra","_path","_internal","obj","__esModule","default","TIMER_DURATION","TIMEOUT","_downloadAsync","url","outputPath","progressFunction","retryFunction","promptShown","currentProgress","cancel","token","axios","CancelToken","source","warningTimer","setTimeout","tmpPath","config","timeout","responseType","cancelToken","response","Promise","resolve","totalDownloadSize","headers","downloadProgress","on","chunk","length","roundedProgress","Math","floor","clearTimeout","pipe","fs","createWriteStream","rename","downloadAppAsync","extract","dotExpoHomeDirectory","UserSettings","path","join","Extract","extractAsync","removeSync"],"sources":["../../src/utils/downloadAppAsync.ts"],"sourcesContent":["import axios, { AxiosRequestConfig, Canceler } from 'axios';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { Extract, UserSettings } from '../internal';\n\nconst TIMER_DURATION = 30000;\nconst TIMEOUT = 3600000;\n\ntype ProgressCallback = (progressPercentage: number) => void;\ntype RetryCallback = (cancel: Canceler) => void;\n\nasync function _downloadAsync(\n  url: string,\n  outputPath: string,\n  progressFunction?: ProgressCallback,\n  retryFunction?: RetryCallback\n) {\n  let promptShown = false;\n  let currentProgress = 0;\n\n  const { cancel, token } = axios.CancelToken.source();\n\n  let warningTimer = setTimeout(() => {\n    if (retryFunction) {\n      retryFunction(cancel);\n    }\n    promptShown = true;\n  }, TIMER_DURATION);\n\n  const tmpPath = `${outputPath}.download`;\n  const config: AxiosRequestConfig = {\n    timeout: TIMEOUT,\n    responseType: 'stream',\n    cancelToken: token,\n  };\n  const response = await axios(url, config);\n  await new Promise<void>(resolve => {\n    const totalDownloadSize = response.data.headers['content-length'];\n    let downloadProgress = 0;\n    response.data\n      .on('data', (chunk: Buffer) => {\n        downloadProgress += chunk.length;\n        const roundedProgress = Math.floor((downloadProgress / totalDownloadSize) * 100);\n        if (currentProgress !== roundedProgress) {\n          currentProgress = roundedProgress;\n          clearTimeout(warningTimer);\n          if (!promptShown) {\n            warningTimer = setTimeout(() => {\n              if (retryFunction) {\n                retryFunction(cancel);\n              }\n              promptShown = true;\n            }, TIMER_DURATION);\n          }\n          if (progressFunction) {\n            progressFunction(roundedProgress);\n          }\n        }\n      })\n      .on('end', () => {\n        clearTimeout(warningTimer);\n        if (progressFunction && currentProgress !== 100) {\n          progressFunction(100);\n        }\n        resolve();\n      })\n      .pipe(fs.createWriteStream(tmpPath));\n  });\n  await fs.rename(tmpPath, outputPath);\n}\n\nexport async function downloadAppAsync(\n  url: string,\n  outputPath: string,\n  { extract = false } = {},\n  progressFunction?: ProgressCallback,\n  retryFunction?: RetryCallback\n): Promise<void> {\n  if (extract) {\n    const dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n    const tmpPath = path.join(dotExpoHomeDirectory, 'tmp-download-file');\n    await _downloadAsync(url, tmpPath, progressFunction);\n    await Extract.extractAsync(tmpPath, outputPath);\n    fs.removeSync(tmpPath);\n  } else {\n    await _downloadAsync(url, outputPath, progressFunction, retryFunction);\n  }\n}\n"],"mappings":"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"}