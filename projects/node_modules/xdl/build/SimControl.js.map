{"version":3,"file":"SimControl.js","names":["_spawnAsync","data","_interopRequireDefault","require","_chalk","_child_process","_path","_waitForActionAsync","_internal","_profileMethod","obj","__esModule","default","getDefaultSimulatorDeviceUDIDAsync","stdout","defaultDeviceUDID","spawnAsync","trim","getContainerPathAsync","udid","bundleIdentifier","CoreSimulator","isEnabled","xcrunAsync","deviceUDIDOrBooted","error","_error$stderr","stderr","match","waitForDeviceToBootAsync","waitForActionAsync","action","bootAsync","openURLAsync","options","url","_error$stderr2","runBootAsync","openBundleIdAsync","device","getDeviceInfoAsync","catch","state","profileMethod","isSimulatorBootedAsync","getBootedSimulatorsAsync","simulatorDeviceInfo","listAsync","Object","values","devices","reduce","prev","runtime","concat","filter","_devices$find","find","bootedDevice","_devices$","_error$stderr3","installAsync","simctlAsync","dir","uninstallAsync","parseSimControlJSONResults","input","JSON","parse","message","Logger","global","type","query","result","info","keys","runtimeSuffix","split","pop","osType","osVersionComponents","osVersion","join","sims","windowName","name","listSimulatorDevicesAsync","listDevicesAsync","AppleDevice","results","getConnectedDevices","map","_ref","_device$DeviceName","DeviceName","ProductType","model","ProductVersion","deviceType","UniqueDeviceID","output","text","includes","lines","line","metadata","push","shutdownAsync","e","_e$message","updatePermissionsAsync","permission","setAppearanceAsync","theme","eraseAsync","eraseAllAsync","addMediaAsync","mediaPath","captureScreenAsync","captureType","outputFilePath","path","extname","deleteUnavailableAsync","command","args","xcrunWithLogging","Boolean","isLicenseOutOfDate","lower","toLowerCase","isXcrunInstalledAsync","execSync","stdio","debug","parseXcrunError","_e$stderr","XDLError","chalk","bold","Array","isArray"],"sources":["../src/SimControl.ts"],"sourcesContent":["import spawnAsync, { SpawnOptions, SpawnResult } from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport { execSync } from 'child_process';\nimport path from 'path';\n\nimport { waitForActionAsync } from './apple/utils/waitForActionAsync';\nimport { AppleDevice, CoreSimulator, Logger, XDLError } from './internal';\nimport { profileMethod } from './utils/profileMethod';\n\ntype DeviceState = 'Shutdown' | 'Booted';\n\nexport type SimulatorDevice = {\n  availabilityError: 'runtime profile not found';\n  /**\n   * '/Users/name/Library/Developer/CoreSimulator/Devices/00E55DC0-0364-49DF-9EC6-77BE587137D4/data'\n   */\n  dataPath: string;\n  /**\n   * '/Users/name/Library/Logs/CoreSimulator/00E55DC0-0364-49DF-9EC6-77BE587137D4'\n   */\n  logPath: string;\n  /**\n   * '00E55DC0-0364-49DF-9EC6-77BE587137D4'\n   */\n  udid: string;\n  /**\n   * com.apple.CoreSimulator.SimRuntime.tvOS-13-4\n   */\n  runtime: string;\n  isAvailable: boolean;\n  /**\n   * 'com.apple.CoreSimulator.SimDeviceType.Apple-TV-1080p'\n   */\n  deviceTypeIdentifier: string;\n  state: DeviceState;\n  /**\n   * 'Apple TV'\n   */\n  name: string;\n\n  osType: OSType;\n  /**\n   * '13.4'\n   */\n  osVersion: string;\n  /**\n   * 'iPhone 11 (13.6)'\n   */\n  windowName: string;\n};\n\nexport type XCTraceDevice = {\n  /**\n   * '00E55DC0-0364-49DF-9EC6-77BE587137D4'\n   */\n  udid: string;\n  /**\n   * 'Apple TV'\n   */\n  name: string;\n\n  deviceType: 'device' | 'catalyst';\n  /**\n   * '13.4'\n   */\n  osVersion: string;\n};\n\ntype OSType = 'iOS' | 'tvOS' | 'watchOS' | 'macOS';\n\ntype PermissionName =\n  | 'all'\n  | 'calendar'\n  | 'contacts-limited'\n  | 'contacts'\n  | 'location'\n  | 'location-always'\n  | 'photos-add'\n  | 'photos'\n  | 'media-library'\n  | 'microphone'\n  | 'motion'\n  | 'reminders'\n  | 'siri';\n\ntype SimulatorDeviceList = {\n  devices: {\n    [runtime: string]: SimulatorDevice[];\n  };\n};\n\nexport async function getDefaultSimulatorDeviceUDIDAsync() {\n  try {\n    const { stdout: defaultDeviceUDID } = await spawnAsync('defaults', [\n      'read',\n      'com.apple.iphonesimulator',\n      'CurrentDeviceUDID',\n    ]);\n    return defaultDeviceUDID.trim();\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Returns the local path for the installed tar.app. Returns null when the app isn't installed.\n *\n * @param props.udid device udid.\n * @param props.bundleIdentifier bundle identifier for app\n * @returns local file path to installed app binary, e.g. '/Users/evanbacon/Library/Developer/CoreSimulator/Devices/EFEEA6EF-E3F5-4EDE-9B72-29EAFA7514AE/data/Containers/Bundle/Application/FA43A0C6-C2AD-442D-B8B1-EAF3E88CF3BF/Exponent-2.21.3.tar.app'\n */\nexport async function getContainerPathAsync({\n  udid,\n  bundleIdentifier,\n}: {\n  udid: string;\n  bundleIdentifier: string;\n}): Promise<string | null> {\n  if (CoreSimulator.isEnabled()) {\n    return CoreSimulator.getContainerPathAsync({ udid, bundleIdentifier });\n  }\n  try {\n    const { stdout } = await xcrunAsync([\n      'simctl',\n      'get_app_container',\n      deviceUDIDOrBooted(udid),\n      bundleIdentifier,\n    ]);\n    return stdout.trim();\n  } catch (error: any) {\n    if (error.stderr?.match(/No such file or directory/)) {\n      return null;\n    }\n    throw error;\n  }\n}\n\nexport async function waitForDeviceToBootAsync({\n  udid,\n}: Pick<SimulatorDevice, 'udid'>): Promise<SimulatorDevice | null> {\n  return waitForActionAsync<SimulatorDevice | null>({\n    action: () => bootAsync({ udid }),\n  });\n}\n\nexport async function openURLAsync(options: { udid?: string; url: string }): Promise<void> {\n  try {\n    // Skip logging since this is likely to fail.\n    await xcrunAsync(['simctl', 'openurl', deviceUDIDOrBooted(options.udid), options.url]);\n  } catch (error: any) {\n    if (!error.stderr?.match(/Unable to lookup in current state: Shut/)) {\n      throw error;\n    }\n    // If the device was in a weird in-between state (\"Shutting Down\" or \"Shutdown\"), then attempt to reboot it and try again.\n    // This can happen when quitting the Simulator app, and immediately pressing `i` to reopen the project.\n\n    // First boot the simulator\n    await runBootAsync({ udid: deviceUDIDOrBooted(options.udid) });\n\n    // Finally, try again...\n    return await openURLAsync(options);\n  }\n}\n\nexport async function openBundleIdAsync(options: {\n  udid?: string;\n  bundleIdentifier: string;\n}): Promise<SpawnResult> {\n  return xcrunAsync([\n    'simctl',\n    'launch',\n    deviceUDIDOrBooted(options.udid),\n    options.bundleIdentifier,\n  ]);\n}\n\n// This will only boot in headless mode if the Simulator app is not running.\nexport async function bootAsync({ udid }: { udid: string }): Promise<SimulatorDevice | null> {\n  if (CoreSimulator.isEnabled()) {\n    const device = await CoreSimulator.getDeviceInfoAsync({ udid }).catch(() => null);\n    if (device?.state === 'Booted') {\n      return device;\n    }\n    await runBootAsync({ udid });\n    return await profileMethod(CoreSimulator.getDeviceInfoAsync)({ udid });\n  }\n\n  // TODO: Deprecate\n  await runBootAsync({ udid });\n  return await isSimulatorBootedAsync({ udid });\n}\n\nasync function getBootedSimulatorsAsync(): Promise<SimulatorDevice[]> {\n  const simulatorDeviceInfo = await listAsync('devices');\n  return Object.values(simulatorDeviceInfo.devices).reduce((prev, runtime) => {\n    return prev.concat(runtime.filter(device => device.state === 'Booted'));\n  }, []);\n}\n\nasync function isSimulatorBootedAsync({\n  udid,\n}: {\n  udid?: string;\n}): Promise<SimulatorDevice | null> {\n  // Simulators can be booted even if the app isn't running :(\n  const devices = await getBootedSimulatorsAsync();\n  if (udid) {\n    return devices.find(bootedDevice => bootedDevice.udid === udid) ?? null;\n  } else {\n    return devices[0] ?? null;\n  }\n}\n\nexport async function runBootAsync({ udid }: { udid: string }) {\n  try {\n    // Skip logging since this is likely to fail.\n    await xcrunAsync(['simctl', 'boot', udid]);\n  } catch (error: any) {\n    if (!error.stderr?.match(/Unable to boot device in current state: Booted/)) {\n      throw error;\n    }\n  }\n}\n\nexport async function installAsync(options: { udid: string; dir: string }): Promise<any> {\n  return simctlAsync(['install', deviceUDIDOrBooted(options.udid), options.dir]);\n}\n\nexport async function uninstallAsync(options: {\n  udid?: string;\n  bundleIdentifier: string;\n}): Promise<any> {\n  return simctlAsync(['uninstall', deviceUDIDOrBooted(options.udid), options.bundleIdentifier]);\n}\n\nfunction parseSimControlJSONResults(input: string): any {\n  try {\n    return JSON.parse(input);\n  } catch (error: any) {\n    // Nov 15, 2020: Observed this can happen when opening the simulator and the simulator prompts the user to update the XC command line tools.\n    // Unexpected token I in JSON at position 0\n    if (error.message.match('Unexpected token')) {\n      Logger.global.error(`Apple's simctl returned malformed JSON:\\n${input}`);\n    }\n    throw error;\n  }\n}\n\n// TODO: Compare with\n// const results = await SimControl.xcrunAsync(['instruments', '-s']);\nexport async function listAsync(\n  type: 'devices' | 'devicetypes' | 'runtimes' | 'pairs',\n  query?: string | 'available'\n): Promise<SimulatorDeviceList> {\n  const result = await simctlAsync(['list', type, '--json', query]);\n  const info = parseSimControlJSONResults(result.stdout) as SimulatorDeviceList;\n\n  for (const runtime of Object.keys(info.devices)) {\n    // Given a string like 'com.apple.CoreSimulator.SimRuntime.tvOS-13-4'\n    const runtimeSuffix = runtime.split('com.apple.CoreSimulator.SimRuntime.').pop()!;\n    // Create an array [tvOS, 13, 4]\n    const [osType, ...osVersionComponents] = runtimeSuffix.split('-');\n    // Join the end components [13, 4] -> '13.4'\n    const osVersion = osVersionComponents.join('.');\n    const sims = info.devices[runtime];\n    for (const device of sims) {\n      device.runtime = runtime;\n      device.osVersion = osVersion;\n      device.windowName = `${device.name} (${osVersion})`;\n      device.osType = osType as OSType;\n    }\n  }\n  return info;\n}\n\nexport async function listSimulatorDevicesAsync() {\n  if (CoreSimulator.isEnabled()) {\n    return CoreSimulator.listDevicesAsync();\n  }\n  const simulatorDeviceInfo = await listAsync('devices');\n  return Object.values(simulatorDeviceInfo.devices).reduce((prev, runtime) => {\n    return prev.concat(runtime);\n  }, []);\n}\n\n/**\n * Get a list of all connected devices.\n */\nexport async function listDevicesAsync(): Promise<XCTraceDevice[]> {\n  if (AppleDevice.isEnabled()) {\n    const results = await AppleDevice.getConnectedDevices();\n    // TODO: Add support for osType (ipad, watchos, etc)\n    return results.map(device => ({\n      // TODO: Better name\n      name: device.DeviceName ?? device.ProductType ?? 'unknown ios device',\n      model: device.ProductType,\n      osVersion: device.ProductVersion,\n      deviceType: 'device',\n      udid: device.UniqueDeviceID,\n    }));\n  }\n\n  const { output } = await xcrunAsync(['xctrace', 'list', 'devices']);\n\n  const text = output.join('');\n  const devices: XCTraceDevice[] = [];\n  if (!text.includes('== Simulators ==')) {\n    return [];\n  }\n\n  const lines = text.split('\\n');\n  for (const line of lines) {\n    if (line === '== Simulators ==') {\n      break;\n    }\n    const device = line.match(/(.*?) (\\(([0-9.]+)\\) )?\\(([0-9A-F-]+)\\)/i);\n    if (device) {\n      const [, name, , osVersion, udid] = device;\n      const metadata: XCTraceDevice = {\n        name,\n        udid,\n        osVersion: osVersion ?? '??',\n        deviceType: osVersion ? 'device' : 'catalyst',\n      };\n\n      devices.push(metadata);\n    }\n  }\n\n  return devices;\n}\n\nexport async function shutdownAsync(udid?: string) {\n  try {\n    return simctlAsync(['shutdown', deviceUDIDOrBooted(udid)]);\n  } catch (e: any) {\n    if (!e.message?.includes('No devices are booted.')) {\n      throw e;\n    }\n  }\n  return null;\n}\n\n// Some permission changes will terminate the application if running\nexport async function updatePermissionsAsync(\n  udid: string,\n  action: 'grant' | 'revoke' | 'reset',\n  permission: PermissionName,\n  bundleIdentifier?: string\n) {\n  return simctlAsync(['privacy', deviceUDIDOrBooted(udid), action, permission, bundleIdentifier]);\n}\n\nexport async function setAppearanceAsync(udid: string, theme: 'light' | 'dark') {\n  return simctlAsync(['ui', deviceUDIDOrBooted(udid), theme]);\n}\n\n// Cannot be invoked unless the simulator is `shutdown`\nexport async function eraseAsync(udid: string) {\n  return simctlAsync(['erase', deviceUDIDOrBooted(udid)]);\n}\n\nexport async function eraseAllAsync() {\n  return simctlAsync(['erase', 'all']);\n}\n\n// Add photos and videos to the simulator's gallery\nexport async function addMediaAsync(udid: string, mediaPath: string) {\n  return simctlAsync(['addmedia', deviceUDIDOrBooted(udid), mediaPath]);\n}\n\nexport async function captureScreenAsync(\n  udid: string,\n  captureType: 'screenshot' | 'recordVideo',\n  outputFilePath: string\n) {\n  return simctlAsync([\n    'io',\n    deviceUDIDOrBooted(udid),\n    captureType,\n    `—type=${path.extname(outputFilePath)}`,\n    outputFilePath,\n  ]);\n}\n\n// Clear all unused simulators\nexport async function deleteUnavailableAsync() {\n  return simctlAsync(['delete', 'unavailable']);\n}\n\nexport async function simctlAsync(\n  [command, ...args]: (string | undefined)[],\n  options?: SpawnOptions\n): Promise<SpawnResult> {\n  return xcrunWithLogging(\n    // @ts-ignore\n    ['simctl', command, ...args.filter(Boolean)],\n    options\n  );\n}\n\nfunction deviceUDIDOrBooted(udid?: string): string {\n  return udid ? udid : 'booted';\n}\n\nexport function isLicenseOutOfDate(text: string) {\n  if (!text) {\n    return false;\n  }\n\n  const lower = text.toLowerCase();\n  return lower.includes('xcode') && lower.includes('license');\n}\n\nexport async function isXcrunInstalledAsync() {\n  try {\n    execSync('xcrun --version', { stdio: 'ignore' });\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport async function xcrunAsync(args: string[], options?: SpawnOptions) {\n  Logger.global.debug('Running: xcrun ' + args.join(' '));\n  try {\n    return await spawnAsync('xcrun', args, options);\n  } catch (e: any) {\n    throw parseXcrunError(e);\n  }\n}\n\nexport function parseXcrunError(e: any): Error {\n  if (isLicenseOutOfDate(e.stdout) || isLicenseOutOfDate(e.stderr)) {\n    return new XDLError(\n      'XCODE_LICENSE_NOT_ACCEPTED',\n      'Xcode license is not accepted. Please run `sudo xcodebuild -license`.'\n    );\n  } else if (e.stderr?.includes('not a developer tool or in PATH')) {\n    return new XDLError(\n      'SIMCTL_NOT_AVAILABLE',\n      `You may need to run ${chalk.bold(\n        'sudo xcode-select -s /Applications/Xcode.app'\n      )} and try again.`\n    );\n  }\n  // Attempt to craft a better error message...\n  if (Array.isArray(e.output)) {\n    e.message += '\\n' + e.output.join('\\n').trim();\n  } else if (e.stderr) {\n    e.message += '\\n' + e.stderr;\n  }\n  return e;\n}\n\nexport async function xcrunWithLogging(\n  args: string[],\n  options?: SpawnOptions\n): Promise<SpawnResult> {\n  try {\n    return await xcrunAsync(args, options);\n  } catch (e: any) {\n    Logger.global.error(`Error running \\`xcrun ${args.join(' ')}\\`: ${e.stderr || e.message}`);\n    throw e;\n  }\n}\n"],"mappings":"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"}