{"version":3,"file":"CoreSimulator.js","names":["_fs","data","_interopRequireDefault","require","_getenv","_glob","_os","_path","_internal","_parseBinaryPlistAsync","obj","__esModule","default","EXPO_USE_CORE_SIM","boolish","isEnabled","DeviceState","CoreSimulatorError","Error","constructor","message","code","exports","getDevicesDirectory","path","join","os","homedir","getDirectoryForDeviceAsync","udid","deviceFolder","fs","existsSync","possibleUdids","getDirectoriesAsync","errorMessage","length","resolveUdidAsync","bootedDevice","getBootedDeviceAsync","UDID","Logger","global","debug","listDevicesAsync","devicesDirectory","devices","Promise","all","map","device","plistPath","parseBinaryPlistAsync","devicePlistToSimulatorDevice","filter","Boolean","getDeviceInfoAsync","deviceDirectory","runtimeSuffix","runtime","split","pop","osType","osVersionComponents","osVersion","dataPath","logPath","isAvailable","isDeleted","deviceTypeIdentifier","deviceType","state","BOOTED","name","windowName","isBooted","resolve","reject","complete","error","getContainerPathAsync","bundleIdentifier","appsFolder","apps","app","appFolder","MCMMetadataIdentifier","binaryPath","findBinaryFileInDirectory","folder","globSync","absolute","cwd","directory","promises","readdir","withFileTypes","catch","isDirectory"],"sources":["../../src/apple/CoreSimulator.ts"],"sourcesContent":["import fs from 'fs';\nimport { boolish } from 'getenv';\nimport { sync as globSync } from 'glob';\nimport os from 'os';\nimport path from 'path';\n\nimport { SimulatorDevice } from '../SimControl';\nimport { Logger } from '../internal';\nimport { parseBinaryPlistAsync } from '../utils/parseBinaryPlistAsync';\n\n// Enable this to test the JS version of simctl\nconst EXPO_USE_CORE_SIM = boolish('EXPO_USE_CORE_SIM', false);\n\nexport function isEnabled() {\n  return EXPO_USE_CORE_SIM;\n}\n\nenum DeviceState {\n  BOOTED = 3,\n  SHUTDOWN = 1,\n}\n\nexport class CoreSimulatorError extends Error {\n  constructor(public message: string, public code?: 'MALFORMED_BINARY' | 'INVALID_UDID') {\n    super(message);\n  }\n}\n\n/**\n * CoreSimulator devices folder.\n *\n * @returns /Users/evanbacon/Library/Developer/CoreSimulator/Devices\n */\nfunction getDevicesDirectory(): string {\n  return path.join(os.homedir(), '/Library/Developer/CoreSimulator/Devices/');\n}\n\n/**\n * CoreSimulator device folder, asserts when the device is invalid.\n *\n * @param props.udid device udid. Cannot be `booted`.\n * @returns /Users/evanbacon/Library/Developer/CoreSimulator/Devices/EFEEA6EF-E3F5-4EDE-9B72-29EAFA7514AE/\n */\nasync function getDirectoryForDeviceAsync(udid: string): Promise<string> {\n  const deviceFolder = path.join(getDevicesDirectory(), udid);\n\n  // Invalid udid (no matching device)\n  if (!fs.existsSync(deviceFolder)) {\n    const possibleUdids = await getDirectoriesAsync(getDevicesDirectory());\n    let errorMessage = `Invalid iOS Simulator device UDID: ${udid}.`;\n    if (possibleUdids.length) {\n      errorMessage += ` Expected one of: ${possibleUdids.join(', ')}`;\n    }\n    throw new CoreSimulatorError(errorMessage, 'INVALID_UDID');\n  }\n  return deviceFolder;\n}\n\nasync function resolveUdidAsync(udid: string): Promise<string> {\n  if (udid === 'booted') {\n    const bootedDevice = await getBootedDeviceAsync();\n    if (!bootedDevice) {\n      throw new CoreSimulatorError('No devices are booted.', 'INVALID_UDID');\n    }\n    udid = bootedDevice.UDID;\n    Logger.global.debug('Resolved booted device: ' + udid);\n  }\n  return udid;\n}\n\nexport async function listDevicesAsync(): Promise<SimulatorDevice[]> {\n  const devicesDirectory = getDevicesDirectory();\n  const devices = await getDirectoriesAsync(devicesDirectory);\n\n  return (\n    await Promise.all(\n      devices.map(\n        async (device): Promise<SimulatorDevice | null> => {\n          const plistPath = path.join(devicesDirectory, device, 'device.plist');\n          if (!fs.existsSync(plistPath)) return null;\n          // The plist is stored in binary format\n          const data = await parseBinaryPlistAsync(plistPath);\n          return devicePlistToSimulatorDevice(devicesDirectory, data);\n        }\n      )\n    )\n  ).filter(Boolean) as SimulatorDevice[];\n}\n\nexport async function getDeviceInfoAsync({\n  udid,\n}: { udid?: string } = {}): Promise<SimulatorDevice> {\n  if (!udid || udid === 'booted') {\n    const bootedDevice = await getBootedDeviceAsync();\n    if (!bootedDevice) {\n      throw new CoreSimulatorError('No devices are booted.', 'INVALID_UDID');\n    }\n    const deviceDirectory = await getDirectoryForDeviceAsync(bootedDevice.UDID);\n    return devicePlistToSimulatorDevice(deviceDirectory, bootedDevice);\n  }\n\n  const deviceDirectory = await getDirectoryForDeviceAsync(udid);\n  const plistPath = path.join(deviceDirectory, 'device.plist');\n  // The plist is stored in binary format\n  const data = await parseBinaryPlistAsync(plistPath);\n  return devicePlistToSimulatorDevice(deviceDirectory, data);\n}\n\nexport function devicePlistToSimulatorDevice(deviceDirectory: string, data: any): SimulatorDevice {\n  const runtimeSuffix = data.runtime.split('com.apple.CoreSimulator.SimRuntime.').pop()!;\n  // Create an array [tvOS, 13, 4]\n  const [osType, ...osVersionComponents] = runtimeSuffix.split('-');\n  // Join the end components [13, 4] -> '13.4'\n  const osVersion = osVersionComponents.join('.');\n  return {\n    ...data,\n    /**\n     * '/Users/name/Library/Developer/CoreSimulator/Devices/00E55DC0-0364-49DF-9EC6-77BE587137D4/data'\n     */\n    dataPath: path.join(deviceDirectory, 'data'),\n    /**\n     * '/Users/name/Library/Logs/CoreSimulator/00E55DC0-0364-49DF-9EC6-77BE587137D4'\n     */\n    logPath: path.join(os.homedir(), 'Library/Logs/CoreSimulator', data.UDID),\n    /**\n     * '00E55DC0-0364-49DF-9EC6-77BE587137D4'\n     */\n    udid: data.UDID,\n    /**\n     * com.apple.CoreSimulator.SimRuntime.tvOS-13-4\n     */\n    runtime: data.runtime,\n    isAvailable: !data.isDeleted,\n    /**\n     * 'com.apple.CoreSimulator.SimDeviceType.Apple-TV-1080p'\n     */\n    deviceTypeIdentifier: data.deviceType,\n    state: data.state === DeviceState.BOOTED ? 'Booted' : 'Shutdown',\n    /**\n     * 'Apple TV'\n     */\n    name: data.name,\n\n    /**\n     * 'iOS'\n     */\n    osType: osType as SimulatorDevice['osType'],\n    /**\n     * '13.4'\n     */\n    osVersion,\n    /**\n     * 'iPhone 11 (13.6)'\n     */\n    windowName: `${data.name} (${osVersion})`,\n\n    // Compare state stored under `state` to 3 (booted)\n    isBooted: data.state === DeviceState.BOOTED,\n  };\n}\n\n/**\n * Get UDID for the first booted simulator. It's unclear if this is the exact method used by  `xcrun simctl` to determine which device is \"booted\".\n *\n * @returns EFEEA6EF-E3F5-4EDE-9B72-29EAFA7514AE\n */\nexport async function getBootedDeviceAsync(): Promise<{ UDID: string } | null> {\n  const devicesDirectory = getDevicesDirectory();\n  const devices = await getDirectoriesAsync(devicesDirectory);\n\n  // parallelize searching for the matching app\n  return new Promise<{ UDID: string } | null>(async (resolve, reject) => {\n    let complete: boolean = false;\n    try {\n      await Promise.all(\n        devices.map(async device => {\n          if (complete) return;\n          const plistPath = path.join(devicesDirectory, device, 'device.plist');\n          // The plist is stored in binary format\n          const data = await parseBinaryPlistAsync(plistPath);\n          // Compare state stored under `state` to 3 (booted)\n          if (data.state === DeviceState.BOOTED) {\n            complete = true;\n            resolve(data);\n          }\n        })\n      );\n      if (!complete) {\n        resolve(null);\n      }\n    } catch (error: any) {\n      if (!complete) {\n        reject(error);\n      }\n    }\n  });\n}\n\n/**\n * Returns the local path for the installed binary.app on a given Apple simulator. Returns null when the app isn't installed.\n *\n * This can be used as a replacement for `xcrun simctl get_app_container <udid> <bundleIdentifier>` but it's over 200x faster.\n *\n * @param props.udid device udid.\n * @param props.bundleIdentifier bundle identifier for app\n * @returns local file path to installed app binary, e.g. '/Users/evanbacon/Library/Developer/CoreSimulator/Devices/EFEEA6EF-E3F5-4EDE-9B72-29EAFA7514AE/data/Containers/Bundle/Application/FA43A0C6-C2AD-442D-B8B1-EAF3E88CF3BF/Exponent-2.21.3.tar.app'\n */\nexport async function getContainerPathAsync({\n  udid,\n  bundleIdentifier,\n}: {\n  udid: string;\n  bundleIdentifier: string;\n}): Promise<string | null> {\n  udid = await resolveUdidAsync(udid);\n  // Like: `/Users/evanbacon/Library/Developer/CoreSimulator/Devices/EFEEA6EF-E3F5-4EDE-9B72-29EAFA7514AE/data/Containers/Bundle/Application/`\n  // TODO: Maybe shallow glob for `.com.apple.mobile_container_manager.metadata.plist` to find apps faster\n  const appsFolder = path.join(\n    await getDirectoryForDeviceAsync(udid),\n    'data/Containers/Bundle/Application'\n  );\n\n  // Get all apps for a device\n  // Like: `['FA43A0C6-C2AD-442D-B8B1-EAF3E88CF3BF']`\n  const apps = await getDirectoriesAsync(appsFolder);\n\n  // parallelize searching for the matching app\n  return new Promise<string | null>(async (resolve, reject) => {\n    let complete: boolean = false;\n    try {\n      await Promise.all(\n        apps.map(async app => {\n          if (complete) return;\n          const appFolder = path.join(appsFolder, app);\n          const plistPath = path.join(\n            appFolder,\n            '.com.apple.mobile_container_manager.metadata.plist'\n          );\n          // The plist is stored in binary format\n          const data = await parseBinaryPlistAsync(plistPath);\n          // Compare bundle identifier stored under `MCMMetadataIdentifier`\n          if (data.MCMMetadataIdentifier === bundleIdentifier) {\n            // Find .app file in the app folder\n            const binaryPath = findBinaryFileInDirectory(appFolder);\n            if (!binaryPath) {\n              throw new CoreSimulatorError(\n                `Found matching app container at \"${appFolder}\" but binary (*.app file) is missing.`,\n                'MALFORMED_BINARY'\n              );\n            }\n            complete = true;\n            resolve(binaryPath);\n          }\n        })\n      );\n      if (!complete) {\n        resolve(null);\n      }\n    } catch (error: any) {\n      if (!complete) {\n        reject(error);\n      }\n    }\n  });\n}\n\nfunction findBinaryFileInDirectory(folder: string) {\n  // Find .app file in the app folder\n  const binaryPath = globSync('*.app', {\n    absolute: true,\n    cwd: folder,\n  })[0];\n\n  return binaryPath || null;\n}\n\nasync function getDirectoriesAsync(directory: string) {\n  return (await fs.promises.readdir(directory, { withFileTypes: true }).catch(() => []))\n    .filter(device => device.isDirectory())\n    .map(device => device.name);\n}\n"],"mappings":"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"}