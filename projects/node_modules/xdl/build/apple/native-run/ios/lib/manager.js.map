{"version":3,"file":"manager.js","names":["_stream","data","require","tls","_interopRequireWildcard","_afc","_debugserver","_installation_proxy","_lockdownd","_mobile_image_mounter","_usbmuxd","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_defineProperty","value","_toPropertyKey","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","Number","ClientManager","constructor","pairRecord","device","lockdowndClient","connections","socket","create","udid","usbmuxClient","UsbmuxdClient","connectUsbmuxdSocket","getDevice","readPairRecord","Properties","SerialNumber","lockdownSocket","connect","lockdownClient","LockdowndClient","doHandshake","getUsbmuxdClient","push","getLockdowndClient","getLockdowndClientWithHandshake","getAFCClient","getServiceClient","AFCClient","getInstallationProxyClient","InstallationProxyClient","getMobileImageMounterClient","MobileImageMounterClient","getDebugserverClient","DebugserverClient","name","ServiceType","disableSSL","port","servicePort","enableServiceSSL","startService","usbmuxdSocket","tlsOptions","rejectUnauthorized","secureContext","createSecureContext","secureProtocol","cert","RootCertificate","RootPrivateKey","proxy","UsbmuxdProxy","Promise","resolve","reject","timeoutId","setTimeout","Error","clearTimeout","destroy","client","end","exports","Duplex","usbmuxdSock","on","_write","chunk","encoding","callback","write","_read","size","_destroy","removeAllListeners"],"sources":["../../../../../src/apple/native-run/ios/lib/manager.ts"],"sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport type * as net from 'net';\nimport { Duplex } from 'stream';\nimport * as tls from 'tls';\n\nimport type { ServiceClient } from './client';\nimport { AFCClient } from './client/afc';\nimport { DebugserverClient } from './client/debugserver';\nimport { InstallationProxyClient } from './client/installation_proxy';\nimport { LockdowndClient } from './client/lockdownd';\nimport { MobileImageMounterClient } from './client/mobile_image_mounter';\nimport type { UsbmuxdDevice, UsbmuxdPairRecord } from './client/usbmuxd';\nimport { UsbmuxdClient } from './client/usbmuxd';\n\nexport class ClientManager {\n  private connections: net.Socket[];\n  constructor(\n    public pairRecord: UsbmuxdPairRecord,\n    public device: UsbmuxdDevice,\n    private lockdowndClient: LockdowndClient\n  ) {\n    this.connections = [lockdowndClient.socket];\n  }\n\n  static async create(udid?: string) {\n    const usbmuxClient = new UsbmuxdClient(UsbmuxdClient.connectUsbmuxdSocket());\n    const device = await usbmuxClient.getDevice(udid);\n    const pairRecord = await usbmuxClient.readPairRecord(device.Properties.SerialNumber);\n    const lockdownSocket = await usbmuxClient.connect(device, 62078);\n    const lockdownClient = new LockdowndClient(lockdownSocket);\n    await lockdownClient.doHandshake(pairRecord);\n    return new ClientManager(pairRecord, device, lockdownClient);\n  }\n\n  async getUsbmuxdClient() {\n    const usbmuxClient = new UsbmuxdClient(UsbmuxdClient.connectUsbmuxdSocket());\n    this.connections.push(usbmuxClient.socket);\n    return usbmuxClient;\n  }\n\n  async getLockdowndClient() {\n    const usbmuxClient = new UsbmuxdClient(UsbmuxdClient.connectUsbmuxdSocket());\n    const lockdownSocket = await usbmuxClient.connect(this.device, 62078);\n    const lockdownClient = new LockdowndClient(lockdownSocket);\n    this.connections.push(lockdownClient.socket);\n    return lockdownClient;\n  }\n\n  async getLockdowndClientWithHandshake() {\n    const lockdownClient = await this.getLockdowndClient();\n    await lockdownClient.doHandshake(this.pairRecord);\n    return lockdownClient;\n  }\n\n  async getAFCClient() {\n    return this.getServiceClient('com.apple.afc', AFCClient);\n  }\n\n  async getInstallationProxyClient() {\n    return this.getServiceClient('com.apple.mobile.installation_proxy', InstallationProxyClient);\n  }\n\n  async getMobileImageMounterClient() {\n    return this.getServiceClient('com.apple.mobile.mobile_image_mounter', MobileImageMounterClient);\n  }\n\n  async getDebugserverClient() {\n    try {\n      // iOS 14 added support for a secure debug service so try to connect to that first\n      return await this.getServiceClient(\n        'com.apple.debugserver.DVTSecureSocketProxy',\n        DebugserverClient\n      );\n    } catch {\n      // otherwise, fall back to the previous implementation\n      return this.getServiceClient('com.apple.debugserver', DebugserverClient, true);\n    }\n  }\n\n  private async getServiceClient<T extends ServiceClient<any>>(\n    name: string,\n    ServiceType: new (...args: any[]) => T,\n    disableSSL = false\n  ) {\n    const { port: servicePort, enableServiceSSL } = await this.lockdowndClient.startService(name);\n    const usbmuxClient = new UsbmuxdClient(UsbmuxdClient.connectUsbmuxdSocket());\n    let usbmuxdSocket = await usbmuxClient.connect(this.device, servicePort);\n\n    if (enableServiceSSL) {\n      const tlsOptions: tls.ConnectionOptions = {\n        rejectUnauthorized: false,\n        secureContext: tls.createSecureContext({\n          secureProtocol: 'TLSv1_method',\n          cert: this.pairRecord.RootCertificate,\n          key: this.pairRecord.RootPrivateKey,\n        }),\n      };\n\n      // Some services seem to not support TLS/SSL after the initial handshake\n      // More info: https://github.com/libimobiledevice/libimobiledevice/issues/793\n      if (disableSSL) {\n        // According to https://nodejs.org/api/tls.html#tls_tls_connect_options_callback we can\n        // pass any Duplex in to tls.connect instead of a Socket. So we'll use our proxy to keep\n        // the TLS wrapper and underlying usbmuxd socket separate.\n        const proxy: any = new UsbmuxdProxy(usbmuxdSocket);\n        tlsOptions.socket = proxy;\n\n        await new Promise<void>((resolve, reject) => {\n          const timeoutId = setTimeout(() => {\n            reject(new Error('The TLS handshake failed to complete after 5s.'));\n          }, 5000);\n          tls.connect(tlsOptions, function (this: tls.TLSSocket) {\n            clearTimeout(timeoutId);\n            // After the handshake, we don't need TLS or the proxy anymore,\n            // since we'll just pass in the naked usbmuxd socket to the service client\n            this.destroy();\n            resolve();\n          });\n        });\n      } else {\n        tlsOptions.socket = usbmuxdSocket;\n        usbmuxdSocket = tls.connect(tlsOptions);\n      }\n    }\n    const client = new ServiceType(usbmuxdSocket);\n    this.connections.push(client.socket);\n    return client;\n  }\n\n  end() {\n    for (const socket of this.connections) {\n      // may already be closed\n      try {\n        socket.end();\n      } catch {\n        // ignore\n      }\n    }\n  }\n}\n\nclass UsbmuxdProxy extends Duplex {\n  constructor(private usbmuxdSock: net.Socket) {\n    super();\n\n    this.usbmuxdSock.on('data', data => {\n      this.push(data);\n    });\n  }\n\n  _write(chunk: any, encoding: string, callback: (err?: Error) => void) {\n    this.usbmuxdSock.write(chunk);\n    callback();\n  }\n\n  _read(size: number) {\n    // Stub so we don't error, since we push everything we get from usbmuxd as it comes in.\n    // TODO: better way to do this?\n  }\n\n  _destroy() {\n    this.usbmuxdSock.removeAllListeners();\n  }\n}\n"],"mappings":"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"}