{"version":3,"file":"afc.js","names":["_debug","data","_interopRequireDefault","require","fs","_interopRequireWildcard","path","_util","_afc","_client","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","debug","Debug","MAX_OPEN_FILES","AFCClient","ServiceClient","constructor","socket","AFCProtocolClient","getFileInfo","resp","protocolClient","sendMessage","operation","AFC_OPS","GET_FILE_INFO","toCString","strings","currentString","tokens","forEach","token","push","String","fromCharCode","writeFile","fd","Array","toString","FILE_WRITE","payload","openFile","Buffer","alloc","length","writeUInt32LE","AFC_FILE_OPEN_FLAGS","WRONLY","copy","FILE_OPEN","FILE_OPEN_RES","Error","closeFile","FILE_CLOSE","uploadFile","srcPath","destPath","srcFile","destFile","Promise","all","promisify","readFile","err","makeDirectory","MAKE_DIR","uploadDirectory","numOpenFiles","pendingFileUploads","_this","uploadDir","dirPath","promises","file","readdirSync","filePath","join","remotePath","relative","lstatSync","isDirectory","then","resolve","reject","promise","res","rej","tries","fn","pop","catch","status","AFC_STATUS","NO_RESOURCES","exports","s","buf","len","write","writeUInt8"],"sources":["../../../../../../src/apple/native-run/ios/lib/client/afc.ts"],"sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Debug from 'debug';\nimport * as fs from 'fs';\nimport type * as net from 'net';\nimport * as path from 'path';\nimport { promisify } from 'util';\n\nimport { AFC_FILE_OPEN_FLAGS, AFC_OPS, AFC_STATUS, AFCProtocolClient } from '../protocol/afc';\nimport type { AFCError, AFCResponse } from '../protocol/afc';\nimport { ServiceClient } from './client';\n\nconst debug = Debug('expo:xdl:ios:lib:client:afc');\nconst MAX_OPEN_FILES = 240;\n\nexport class AFCClient extends ServiceClient<AFCProtocolClient> {\n  constructor(public socket: net.Socket) {\n    super(socket, new AFCProtocolClient(socket));\n  }\n\n  async getFileInfo(path: string): Promise<string[]> {\n    debug(`getFileInfo: ${path}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      operation: AFC_OPS.GET_FILE_INFO,\n      data: toCString(path),\n    });\n\n    const strings: string[] = [];\n    let currentString = '';\n    const tokens = resp.data;\n    tokens.forEach(token => {\n      if (token === 0) {\n        strings.push(currentString);\n        currentString = '';\n      } else {\n        currentString += String.fromCharCode(token);\n      }\n    });\n    return strings;\n  }\n\n  async writeFile(fd: Buffer, data: Buffer): Promise<AFCResponse> {\n    debug(`writeFile: ${Array.prototype.toString.call(fd)}`);\n\n    return this.protocolClient.sendMessage({\n      operation: AFC_OPS.FILE_WRITE,\n      data: fd,\n      payload: data,\n    });\n  }\n\n  async openFile(path: string): Promise<Buffer> {\n    debug(`openFile: ${path}`);\n    // mode + path + null terminator\n    const data = Buffer.alloc(8 + path.length + 1);\n    // write mode\n    data.writeUInt32LE(AFC_FILE_OPEN_FLAGS.WRONLY, 0);\n    // then path to file\n    toCString(path).copy(data, 8);\n\n    const resp = await this.protocolClient.sendMessage({\n      operation: AFC_OPS.FILE_OPEN,\n      data,\n    });\n\n    if (resp.operation === AFC_OPS.FILE_OPEN_RES) {\n      return resp.data;\n    }\n\n    throw new Error(\n      `There was an unknown error opening file ${path}, response: ${Array.prototype.toString.call(\n        resp.data\n      )}`\n    );\n  }\n\n  async closeFile(fd: Buffer): Promise<AFCResponse> {\n    debug(`closeFile fd: ${Array.prototype.toString.call(fd)}`);\n    return this.protocolClient.sendMessage({\n      operation: AFC_OPS.FILE_CLOSE,\n      data: fd,\n    });\n  }\n\n  async uploadFile(srcPath: string, destPath: string): Promise<void> {\n    debug(`uploadFile: ${srcPath}`);\n\n    // read local file and get fd of destination\n    const [srcFile, destFile] = await Promise.all([\n      await promisify(fs.readFile)(srcPath),\n      await this.openFile(destPath),\n    ]);\n\n    try {\n      await this.writeFile(destFile, srcFile);\n      await this.closeFile(destFile);\n    } catch (err: any) {\n      await this.closeFile(destFile);\n      throw err;\n    }\n  }\n\n  async makeDirectory(path: string): Promise<AFCResponse> {\n    debug(`makeDirectory: ${path}`);\n\n    return this.protocolClient.sendMessage({\n      operation: AFC_OPS.MAKE_DIR,\n      data: toCString(path),\n    });\n  }\n\n  async uploadDirectory(srcPath: string, destPath: string): Promise<void> {\n    debug(`uploadDirectory: ${srcPath}`);\n    await this.makeDirectory(destPath);\n\n    // AFC doesn't seem to give out more than 240 file handles,\n    // so we delay any requests that would push us over until more open up\n    let numOpenFiles = 0;\n    const pendingFileUploads: (() => void)[] = [];\n    const _this = this;\n    return uploadDir(srcPath);\n\n    async function uploadDir(dirPath: string): Promise<void> {\n      const promises: Promise<void>[] = [];\n      for (const file of fs.readdirSync(dirPath)) {\n        const filePath = path.join(dirPath, file);\n        const remotePath = path.join(destPath, path.relative(srcPath, filePath));\n        if (fs.lstatSync(filePath).isDirectory()) {\n          promises.push(_this.makeDirectory(remotePath).then(() => uploadDir(filePath)));\n        } else {\n          // Create promise to add to promises array\n          // this way it can be resolved once a pending upload has finished\n          let resolve: (val?: any) => void;\n          let reject: (err: AFCError) => void;\n          const promise = new Promise<void>((res, rej) => {\n            resolve = res;\n            reject = rej;\n          });\n          promises.push(promise);\n\n          // wrap upload in a function in case we need to save it for later\n          const uploadFile = (tries = 0) => {\n            numOpenFiles++;\n            _this\n              .uploadFile(filePath, remotePath)\n              .then(() => {\n                resolve();\n                numOpenFiles--;\n                const fn = pendingFileUploads.pop();\n                if (fn) {\n                  fn();\n                }\n              })\n              .catch((err: AFCError) => {\n                // Couldn't get fd for whatever reason, try again\n                // # of retries is arbitrary and can be adjusted\n                if (err.status === AFC_STATUS.NO_RESOURCES && tries < 10) {\n                  debug(`Received NO_RESOURCES from AFC, retrying ${filePath} upload. ${tries}`);\n                  uploadFile(tries++);\n                } else {\n                  numOpenFiles--;\n                  reject(err);\n                }\n              });\n          };\n\n          if (numOpenFiles < MAX_OPEN_FILES) {\n            uploadFile();\n          } else {\n            debug(\n              `numOpenFiles >= ${MAX_OPEN_FILES}, adding to pending queue. Length: ${pendingFileUploads.length}`\n            );\n            pendingFileUploads.push(uploadFile);\n          }\n        }\n      }\n      await Promise.all(promises);\n    }\n  }\n}\n\nfunction toCString(s: string) {\n  const buf = Buffer.alloc(s.length + 1);\n  const len = buf.write(s);\n  buf.writeUInt8(0, len);\n  return buf;\n}\n"],"mappings":";;;;;;AAOA,SAAAA,OAAA;EAAA,MAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,MAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAG,GAAA;EAAA,MAAAH,IAAA,GAAAI,uBAAA,CAAAF,OAAA;EAAAC,EAAA,YAAAA,CAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEA,SAAAK,KAAA;EAAA,MAAAL,IAAA,GAAAI,uBAAA,CAAAF,OAAA;EAAAG,IAAA,YAAAA,CAAA;IAAA,OAAAL,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAM,MAAA;EAAA,MAAAN,IAAA,GAAAE,OAAA;EAAAI,KAAA,YAAAA,CAAA;IAAA,OAAAN,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEA,SAAAO,KAAA;EAAA,MAAAP,IAAA,GAAAE,OAAA;EAAAK,IAAA,YAAAA,CAAA;IAAA,OAAAP,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEA,SAAAQ,QAAA;EAAA,MAAAR,IAAA,GAAAE,OAAA;EAAAM,OAAA,YAAAA,CAAA;IAAA,OAAAR,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAAyC,SAAAS,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,CAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAN,wBAAAU,GAAA,EAAAJ,WAAA,SAAAA,WAAA,IAAAI,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,oBAAAA,GAAA,wBAAAA,GAAA,4BAAAE,OAAA,EAAAF,GAAA,UAAAG,KAAA,GAAAR,wBAAA,CAAAC,WAAA,OAAAO,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAJ,GAAA,YAAAG,KAAA,CAAAE,GAAA,CAAAL,GAAA,SAAAM,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAX,GAAA,QAAAW,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAd,GAAA,EAAAW,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAV,GAAA,EAAAW,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAX,GAAA,CAAAW,GAAA,SAAAL,MAAA,CAAAJ,OAAA,GAAAF,GAAA,MAAAG,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAAhB,GAAA,EAAAM,MAAA,YAAAA,MAAA;AAAA,SAAAnB,uBAAAa,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAfzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAWA,MAAMiB,KAAK,GAAG,IAAAC,gBAAK,EAAC,6BAA6B,CAAC;AAClD,MAAMC,cAAc,GAAG,GAAG;AAEnB,MAAMC,SAAS,SAASC,uBAAa,CAAoB;EAC9DC,WAAWA,CAAQC,MAAkB,EAAE;IACrC,KAAK,CAACA,MAAM,EAAE,KAAIC,wBAAiB,EAACD,MAAM,CAAC,CAAC;IAAC,KAD5BA,MAAkB,GAAlBA,MAAkB;EAErC;EAEA,MAAME,WAAWA,CAAClC,IAAY,EAAqB;IACjD0B,KAAK,CAAE,gBAAe1B,IAAK,EAAC,CAAC;IAE7B,MAAMmC,IAAI,GAAG,MAAM,IAAI,CAACC,cAAc,CAACC,WAAW,CAAC;MACjDC,SAAS,EAAEC,cAAO,CAACC,aAAa;MAChC7C,IAAI,EAAE8C,SAAS,CAACzC,IAAI;IACtB,CAAC,CAAC;IAEF,MAAM0C,OAAiB,GAAG,EAAE;IAC5B,IAAIC,aAAa,GAAG,EAAE;IACtB,MAAMC,MAAM,GAAGT,IAAI,CAACxC,IAAI;IACxBiD,MAAM,CAACC,OAAO,CAACC,KAAK,IAAI;MACtB,IAAIA,KAAK,KAAK,CAAC,EAAE;QACfJ,OAAO,CAACK,IAAI,CAACJ,aAAa,CAAC;QAC3BA,aAAa,GAAG,EAAE;MACpB,CAAC,MAAM;QACLA,aAAa,IAAIK,MAAM,CAACC,YAAY,CAACH,KAAK,CAAC;MAC7C;IACF,CAAC,CAAC;IACF,OAAOJ,OAAO;EAChB;EAEA,MAAMQ,SAASA,CAACC,EAAU,EAAExD,IAAY,EAAwB;IAC9D+B,KAAK,CAAE,cAAa0B,KAAK,CAAC/B,SAAS,CAACgC,QAAQ,CAAC9B,IAAI,CAAC4B,EAAE,CAAE,EAAC,CAAC;IAExD,OAAO,IAAI,CAACf,cAAc,CAACC,WAAW,CAAC;MACrCC,SAAS,EAAEC,cAAO,CAACe,UAAU;MAC7B3D,IAAI,EAAEwD,EAAE;MACRI,OAAO,EAAE5D;IACX,CAAC,CAAC;EACJ;EAEA,MAAM6D,QAAQA,CAACxD,IAAY,EAAmB;IAC5C0B,KAAK,CAAE,aAAY1B,IAAK,EAAC,CAAC;IAC1B;IACA,MAAML,IAAI,GAAG8D,MAAM,CAACC,KAAK,CAAC,CAAC,GAAG1D,IAAI,CAAC2D,MAAM,GAAG,CAAC,CAAC;IAC9C;IACAhE,IAAI,CAACiE,aAAa,CAACC,0BAAmB,CAACC,MAAM,EAAE,CAAC,CAAC;IACjD;IACArB,SAAS,CAACzC,IAAI,CAAC,CAAC+D,IAAI,CAACpE,IAAI,EAAE,CAAC,CAAC;IAE7B,MAAMwC,IAAI,GAAG,MAAM,IAAI,CAACC,cAAc,CAACC,WAAW,CAAC;MACjDC,SAAS,EAAEC,cAAO,CAACyB,SAAS;MAC5BrE;IACF,CAAC,CAAC;IAEF,IAAIwC,IAAI,CAACG,SAAS,KAAKC,cAAO,CAAC0B,aAAa,EAAE;MAC5C,OAAO9B,IAAI,CAACxC,IAAI;IAClB;IAEA,MAAM,IAAIuE,KAAK,CACZ,2CAA0ClE,IAAK,eAAcoD,KAAK,CAAC/B,SAAS,CAACgC,QAAQ,CAAC9B,IAAI,CACzFY,IAAI,CAACxC,IACP,CAAE,EACJ,CAAC;EACH;EAEA,MAAMwE,SAASA,CAAChB,EAAU,EAAwB;IAChDzB,KAAK,CAAE,iBAAgB0B,KAAK,CAAC/B,SAAS,CAACgC,QAAQ,CAAC9B,IAAI,CAAC4B,EAAE,CAAE,EAAC,CAAC;IAC3D,OAAO,IAAI,CAACf,cAAc,CAACC,WAAW,CAAC;MACrCC,SAAS,EAAEC,cAAO,CAAC6B,UAAU;MAC7BzE,IAAI,EAAEwD;IACR,CAAC,CAAC;EACJ;EAEA,MAAMkB,UAAUA,CAACC,OAAe,EAAEC,QAAgB,EAAiB;IACjE7C,KAAK,CAAE,eAAc4C,OAAQ,EAAC,CAAC;;IAE/B;IACA,MAAM,CAACE,OAAO,EAAEC,QAAQ,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC5C,MAAM,IAAAC,iBAAS,EAAC9E,EAAE,CAAD,CAAC,CAAC+E,QAAQ,CAAC,CAACP,OAAO,CAAC,EACrC,MAAM,IAAI,CAACd,QAAQ,CAACe,QAAQ,CAAC,CAC9B,CAAC;IAEF,IAAI;MACF,MAAM,IAAI,CAACrB,SAAS,CAACuB,QAAQ,EAAED,OAAO,CAAC;MACvC,MAAM,IAAI,CAACL,SAAS,CAACM,QAAQ,CAAC;IAChC,CAAC,CAAC,OAAOK,GAAQ,EAAE;MACjB,MAAM,IAAI,CAACX,SAAS,CAACM,QAAQ,CAAC;MAC9B,MAAMK,GAAG;IACX;EACF;EAEA,MAAMC,aAAaA,CAAC/E,IAAY,EAAwB;IACtD0B,KAAK,CAAE,kBAAiB1B,IAAK,EAAC,CAAC;IAE/B,OAAO,IAAI,CAACoC,cAAc,CAACC,WAAW,CAAC;MACrCC,SAAS,EAAEC,cAAO,CAACyC,QAAQ;MAC3BrF,IAAI,EAAE8C,SAAS,CAACzC,IAAI;IACtB,CAAC,CAAC;EACJ;EAEA,MAAMiF,eAAeA,CAACX,OAAe,EAAEC,QAAgB,EAAiB;IACtE7C,KAAK,CAAE,oBAAmB4C,OAAQ,EAAC,CAAC;IACpC,MAAM,IAAI,CAACS,aAAa,CAACR,QAAQ,CAAC;;IAElC;IACA;IACA,IAAIW,YAAY,GAAG,CAAC;IACpB,MAAMC,kBAAkC,GAAG,EAAE;IAC7C,MAAMC,KAAK,GAAG,IAAI;IAClB,OAAOC,SAAS,CAACf,OAAO,CAAC;IAEzB,eAAee,SAASA,CAACC,OAAe,EAAiB;MACvD,MAAMC,QAAyB,GAAG,EAAE;MACpC,KAAK,MAAMC,IAAI,IAAI1F,EAAE,CAAD,CAAC,CAAC2F,WAAW,CAACH,OAAO,CAAC,EAAE;QAC1C,MAAMI,QAAQ,GAAG1F,IAAI,CAAD,CAAC,CAAC2F,IAAI,CAACL,OAAO,EAAEE,IAAI,CAAC;QACzC,MAAMI,UAAU,GAAG5F,IAAI,CAAD,CAAC,CAAC2F,IAAI,CAACpB,QAAQ,EAAEvE,IAAI,CAAD,CAAC,CAAC6F,QAAQ,CAACvB,OAAO,EAAEoB,QAAQ,CAAC,CAAC;QACxE,IAAI5F,EAAE,CAAD,CAAC,CAACgG,SAAS,CAACJ,QAAQ,CAAC,CAACK,WAAW,CAAC,CAAC,EAAE;UACxCR,QAAQ,CAACxC,IAAI,CAACqC,KAAK,CAACL,aAAa,CAACa,UAAU,CAAC,CAACI,IAAI,CAAC,MAAMX,SAAS,CAACK,QAAQ,CAAC,CAAC,CAAC;QAChF,CAAC,MAAM;UACL;UACA;UACA,IAAIO,OAA4B;UAChC,IAAIC,MAA+B;UACnC,MAAMC,OAAO,GAAG,IAAIzB,OAAO,CAAO,CAAC0B,GAAG,EAAEC,GAAG,KAAK;YAC9CJ,OAAO,GAAGG,GAAG;YACbF,MAAM,GAAGG,GAAG;UACd,CAAC,CAAC;UACFd,QAAQ,CAACxC,IAAI,CAACoD,OAAO,CAAC;;UAEtB;UACA,MAAM9B,UAAU,GAAGA,CAACiC,KAAK,GAAG,CAAC,KAAK;YAChCpB,YAAY,EAAE;YACdE,KAAK,CACFf,UAAU,CAACqB,QAAQ,EAAEE,UAAU,CAAC,CAChCI,IAAI,CAAC,MAAM;cACVC,OAAO,CAAC,CAAC;cACTf,YAAY,EAAE;cACd,MAAMqB,EAAE,GAAGpB,kBAAkB,CAACqB,GAAG,CAAC,CAAC;cACnC,IAAID,EAAE,EAAE;gBACNA,EAAE,CAAC,CAAC;cACN;YACF,CAAC,CAAC,CACDE,KAAK,CAAE3B,GAAa,IAAK;cACxB;cACA;cACA,IAAIA,GAAG,CAAC4B,MAAM,KAAKC,iBAAU,CAACC,YAAY,IAAIN,KAAK,GAAG,EAAE,EAAE;gBACxD5E,KAAK,CAAE,4CAA2CgE,QAAS,YAAWY,KAAM,EAAC,CAAC;gBAC9EjC,UAAU,CAACiC,KAAK,EAAE,CAAC;cACrB,CAAC,MAAM;gBACLpB,YAAY,EAAE;gBACdgB,MAAM,CAACpB,GAAG,CAAC;cACb;YACF,CAAC,CAAC;UACN,CAAC;UAED,IAAII,YAAY,GAAGtD,cAAc,EAAE;YACjCyC,UAAU,CAAC,CAAC;UACd,CAAC,MAAM;YACL3C,KAAK,CACF,mBAAkBE,cAAe,sCAAqCuD,kBAAkB,CAACxB,MAAO,EACnG,CAAC;YACDwB,kBAAkB,CAACpC,IAAI,CAACsB,UAAU,CAAC;UACrC;QACF;MACF;MACA,MAAMK,OAAO,CAACC,GAAG,CAACY,QAAQ,CAAC;IAC7B;EACF;AACF;AAACsB,OAAA,CAAAhF,SAAA,GAAAA,SAAA;AAED,SAASY,SAASA,CAACqE,CAAS,EAAE;EAC5B,MAAMC,GAAG,GAAGtD,MAAM,CAACC,KAAK,CAACoD,CAAC,CAACnD,MAAM,GAAG,CAAC,CAAC;EACtC,MAAMqD,GAAG,GAAGD,GAAG,CAACE,KAAK,CAACH,CAAC,CAAC;EACxBC,GAAG,CAACG,UAAU,CAAC,CAAC,EAAEF,GAAG,CAAC;EACtB,OAAOD,GAAG;AACZ"}