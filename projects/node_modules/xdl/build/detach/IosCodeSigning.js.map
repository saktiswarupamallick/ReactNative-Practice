{"version":3,"file":"IosCodeSigning.js","names":["_crypto","data","_interopRequireDefault","require","_minimatch","obj","__esModule","default","validateProvisioningProfile","plistData","distCertFingerprint","bundleIdentifier","_ensureDeveloperCertificateIsValid","_ensureBundleIdentifierIsValid","devCertBase64","DeveloperCertificates","devCertFingerprint","_genDerCertFingerprint","Error","certBase64","certBuffer","Buffer","from","crypto","createHash","update","digest","toUpperCase","expectedBundleIdentifier","_exec","actualApplicationIdentifier","Entitlements","actualBundleIdentifier","exec","minimatch"],"sources":["../../src/detach/IosCodeSigning.ts"],"sourcesContent":["import { PlistObject } from '@expo/plist';\nimport crypto from 'crypto';\nimport minimatch from 'minimatch';\n\nexport type IPABuilderParams = {\n  provisioningProfilePath: string;\n  certPath: string;\n  certPassword?: string;\n  appUUID: string;\n  keychainPath: string;\n  bundleIdentifier: string;\n  teamID: string;\n  manifest: any;\n  workspacePath: string;\n  clientBuild?: boolean;\n};\n\nexport function validateProvisioningProfile(\n  plistData: PlistObject,\n  {\n    distCertFingerprint,\n    bundleIdentifier,\n  }: { distCertFingerprint: string; bundleIdentifier: string }\n) {\n  _ensureDeveloperCertificateIsValid(plistData, distCertFingerprint);\n  _ensureBundleIdentifierIsValid(plistData, bundleIdentifier);\n}\n\nfunction _ensureDeveloperCertificateIsValid(plistData: any, distCertFingerprint: string) {\n  const devCertBase64 = plistData.DeveloperCertificates[0];\n  const devCertFingerprint = _genDerCertFingerprint(devCertBase64);\n  if (devCertFingerprint !== distCertFingerprint) {\n    throw new Error(\n      'validateProvisioningProfile: provisioning profile is not associated with uploaded distribution certificate'\n    );\n  }\n}\n\nfunction _genDerCertFingerprint(certBase64: string) {\n  const certBuffer = Buffer.from(certBase64, 'base64');\n  return crypto.createHash('sha1').update(certBuffer).digest('hex').toUpperCase();\n}\n\nfunction _ensureBundleIdentifierIsValid(plistData: any, expectedBundleIdentifier: string) {\n  const actualApplicationIdentifier = plistData.Entitlements['application-identifier'];\n  const actualBundleIdentifier = /\\.(.+)/.exec(actualApplicationIdentifier)?.[1];\n\n  if (!actualBundleIdentifier || !minimatch(expectedBundleIdentifier, actualBundleIdentifier)) {\n    throw new Error(\n      `validateProvisioningProfile: wrong bundleIdentifier found in provisioning profile; expected: ${expectedBundleIdentifier}, found (in provisioning profile): ${actualBundleIdentifier}`\n    );\n  }\n}\n"],"mappings":";;;;;;AACA,SAAAA,QAAA;EAAA,MAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,OAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAG,WAAA;EAAA,MAAAH,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAC,UAAA,YAAAA,CAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAAkC,SAAAC,uBAAAG,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAe3B,SAASG,2BAA2BA,CACzCC,SAAsB,EACtB;EACEC,mBAAmB;EACnBC;AACyD,CAAC,EAC5D;EACAC,kCAAkC,CAACH,SAAS,EAAEC,mBAAmB,CAAC;EAClEG,8BAA8B,CAACJ,SAAS,EAAEE,gBAAgB,CAAC;AAC7D;AAEA,SAASC,kCAAkCA,CAACH,SAAc,EAAEC,mBAA2B,EAAE;EACvF,MAAMI,aAAa,GAAGL,SAAS,CAACM,qBAAqB,CAAC,CAAC,CAAC;EACxD,MAAMC,kBAAkB,GAAGC,sBAAsB,CAACH,aAAa,CAAC;EAChE,IAAIE,kBAAkB,KAAKN,mBAAmB,EAAE;IAC9C,MAAM,IAAIQ,KAAK,CACb,4GACF,CAAC;EACH;AACF;AAEA,SAASD,sBAAsBA,CAACE,UAAkB,EAAE;EAClD,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACH,UAAU,EAAE,QAAQ,CAAC;EACpD,OAAOI,iBAAM,CAACC,UAAU,CAAC,MAAM,CAAC,CAACC,MAAM,CAACL,UAAU,CAAC,CAACM,MAAM,CAAC,KAAK,CAAC,CAACC,WAAW,CAAC,CAAC;AACjF;AAEA,SAASd,8BAA8BA,CAACJ,SAAc,EAAEmB,wBAAgC,EAAE;EAAA,IAAAC,KAAA;EACxF,MAAMC,2BAA2B,GAAGrB,SAAS,CAACsB,YAAY,CAAC,wBAAwB,CAAC;EACpF,MAAMC,sBAAsB,IAAAH,KAAA,GAAG,QAAQ,CAACI,IAAI,CAACH,2BAA2B,CAAC,cAAAD,KAAA,uBAA1CA,KAAA,CAA6C,CAAC,CAAC;EAE9E,IAAI,CAACG,sBAAsB,IAAI,CAAC,IAAAE,oBAAS,EAACN,wBAAwB,EAAEI,sBAAsB,CAAC,EAAE;IAC3F,MAAM,IAAId,KAAK,CACZ,gGAA+FU,wBAAyB,sCAAqCI,sBAAuB,EACvL,CAAC;EACH;AACF"}