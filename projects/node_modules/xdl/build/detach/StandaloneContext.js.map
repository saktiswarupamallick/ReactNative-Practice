{"version":3,"file":"StandaloneContext.js","names":["_internal","data","require","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","isStandaloneContextDataUser","projectPath","isStandaloneContextTestEnvironment","includes","isStandaloneContextDataService","testEnvironment","expoSourcePath","shellAppSdkVersion","StandaloneContext","constructor","isAnonymous","exp","publishedUrl","context","StandaloneContextUser","url","releaseChannel","StandaloneBuildFlags","createEmpty","config","archivePath","manifest","privateConfig","build","StandaloneContextService","published","exports","_default","default"],"sources":["../../src/detach/StandaloneContext.ts"],"sourcesContent":["import { StandaloneBuildFlags } from '../internal';\n\ntype StandaloneContextDataType = 'user' | 'service';\n\ntype StandaloneContextTestEnvironment = 'none' | 'local' | 'ci';\n\n// currently unused\nexport function isStandaloneContextDataUser(value: any): value is StandaloneContextDataUser {\n  return value && typeof value.projectPath === 'string' && 'exp' in value;\n}\n\nexport function isStandaloneContextTestEnvironment(\n  value: string\n): value is StandaloneContextTestEnvironment {\n  return ['none', 'local', 'ci'].includes(value);\n}\n\nexport function isStandaloneContextDataService(value: any): value is StandaloneContextDataService {\n  return (\n    value &&\n    isStandaloneContextTestEnvironment(value.testEnvironment) &&\n    typeof value.expoSourcePath === 'string' &&\n    typeof value.shellAppSdkVersion === 'string'\n  );\n}\n\n/**\n *  A user context is used when we are configuring a standalone app locally on a user's machine,\n *  such as during `exp detach`.\n */\nexport type StandaloneContextDataUser = {\n  projectPath: string;\n  exp: any;\n};\n\n/**\n *  A service context is used when we are generating a standalone app remotely on an Expo\n *  service machine, such as during `exp build`.\n */\nexport type StandaloneContextDataService = {\n  expoSourcePath: string;\n  archivePath: string | null;\n  manifest: any;\n  privateConfig: any;\n  testEnvironment: StandaloneContextTestEnvironment;\n  shellAppSdkVersion: string;\n};\n\nclass StandaloneContext {\n  data?: StandaloneContextDataUser | StandaloneContextDataService;\n  config: any; // same as underlying app.json or manifest\n\n  static createUserContext = (\n    projectPath: string,\n    exp: any,\n    publishedUrl?: string\n  ): StandaloneContextUser => {\n    const context = new StandaloneContextUser(\n      {\n        projectPath,\n        exp,\n      },\n      {\n        url: publishedUrl,\n        releaseChannel: 'default',\n      },\n      // we never expect to handle the build step for user contexts right now\n      StandaloneBuildFlags.createEmpty()\n    );\n    context.config = exp;\n    return context;\n  };\n\n  static createServiceContext = (\n    expoSourcePath: string,\n    archivePath: string | null,\n    manifest: any,\n    privateConfig: any,\n    testEnvironment: StandaloneContextTestEnvironment,\n    build: StandaloneBuildFlags,\n    publishedUrl: string,\n    releaseChannel: string,\n    shellAppSdkVersion: string\n  ): StandaloneContextService => {\n    const context = new StandaloneContextService(\n      {\n        expoSourcePath,\n        archivePath,\n        manifest,\n        privateConfig,\n        testEnvironment,\n        shellAppSdkVersion,\n      },\n      {\n        url: publishedUrl,\n        releaseChannel: releaseChannel ? releaseChannel : 'default',\n      },\n      build\n    );\n    context.config = manifest;\n\n    return context;\n  };\n\n  /**\n   *  On iOS we begin configuring standalone apps before we have any information about the\n   *  project's manifest. By default let's treat all contexts as non-anonymous and override\n   *  it in contexts that needs this to be different.\n   */\n  isAnonymous() {\n    return false;\n  }\n}\n\nexport class StandaloneContextUser extends StandaloneContext {\n  type: StandaloneContextDataType = 'user';\n  constructor(\n    public data: StandaloneContextDataUser,\n    public published: {\n      url?: string;\n      releaseChannel: 'default';\n    },\n    public build: StandaloneBuildFlags\n  ) {\n    super();\n  }\n}\n\nexport class StandaloneContextService extends StandaloneContext {\n  type: StandaloneContextDataType = 'service';\n  constructor(\n    public data: StandaloneContextDataService,\n    public published: {\n      url: string;\n      releaseChannel: string;\n    },\n    public build: StandaloneBuildFlags\n  ) {\n    super();\n  }\n\n  /**\n   *  On iOS we begin configuring standalone apps before we have any information about the\n   *  project's manifest.\n   */\n  isAnonymous() {\n    return true;\n  }\n}\n\nexport type AnyStandaloneContext = StandaloneContextUser | StandaloneContextService;\n\nexport default StandaloneContext;\n"],"mappings":"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"}